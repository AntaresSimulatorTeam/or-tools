<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>constraint_solver.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>constraint__solver_8h</filename>
    <class kind="class">operations_research::SimpleRevFIFO</class>
    <class kind="struct">operations_research::DefaultPhaseParameters</class>
    <class kind="class">operations_research::Solver</class>
    <class kind="struct">operations_research::Solver::IntegerCastInfo</class>
    <class kind="struct">operations_research::Solver::SearchLogParameters</class>
    <class kind="class">operations_research::BaseObject</class>
    <class kind="class">operations_research::PropagationBaseObject</class>
    <class kind="class">operations_research::Decision</class>
    <class kind="class">operations_research::DecisionVisitor</class>
    <class kind="class">operations_research::DecisionBuilder</class>
    <class kind="class">operations_research::Demon</class>
    <class kind="class">operations_research::ModelVisitor</class>
    <class kind="class">operations_research::Constraint</class>
    <class kind="class">operations_research::CastConstraint</class>
    <class kind="class">operations_research::SearchMonitor</class>
    <class kind="class">operations_research::Rev</class>
    <class kind="class">operations_research::NumericalRev</class>
    <class kind="class">operations_research::RevArray</class>
    <class kind="class">operations_research::NumericalRevArray</class>
    <class kind="class">operations_research::IntExpr</class>
    <class kind="class">operations_research::IntVarIterator</class>
    <class kind="class">operations_research::InitAndGetValues</class>
    <class kind="struct">operations_research::InitAndGetValues::Iterator</class>
    <class kind="class">operations_research::IntVar</class>
    <class kind="class">operations_research::SolutionCollector</class>
    <class kind="struct">operations_research::SolutionCollector::SolutionData</class>
    <class kind="class">operations_research::OptimizeVar</class>
    <class kind="class">operations_research::SearchLimit</class>
    <class kind="class">operations_research::RegularLimit</class>
    <class kind="class">operations_research::IntervalVar</class>
    <class kind="class">operations_research::SequenceVar</class>
    <class kind="class">operations_research::AssignmentElement</class>
    <class kind="class">operations_research::IntVarElement</class>
    <class kind="class">operations_research::IntervalVarElement</class>
    <class kind="class">operations_research::SequenceVarElement</class>
    <class kind="class">operations_research::AssignmentContainer</class>
    <class kind="class">operations_research::Assignment</class>
    <class kind="class">operations_research::Pack</class>
    <class kind="class">operations_research::DisjunctiveConstraint</class>
    <class kind="class">operations_research::SolutionPool</class>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a316abccdfa41512564d84365ea8f0ead</anchor>
      <arglist>(std::ostream &amp;out, const Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Zero</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a009f247167f32509baf749083e4bc984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>One</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa96bb5a28dd9c1ccc864b1587e8e1a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a991f7a823d83b455d6b1a45141cb9ce9</anchor>
      <arglist>(std::ostream &amp;out, const BaseObject *o)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4f44b10aa7fc7b6e85b72e7f0c96cc1f</anchor>
      <arglist>(std::ostream &amp;out, const Assignment &amp;assignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssignmentFromAssignment</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aea2bf322fab4e2319a23ad22acf8ccf8</anchor>
      <arglist>(Assignment *target_assignment, const std::vector&lt; IntVar * &gt; &amp;target_vars, const Assignment *source_assignment, const std::vector&lt; IntVar * &gt; &amp;source_vars)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constraint_solveri.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>constraint__solveri_8h</filename>
    <includes id="constraint__solver_8h" name="constraint_solver.h" local="yes" imported="no">ortools/constraint_solver/constraint_solver.h</includes>
    <class kind="class">operations_research::BaseIntExpr</class>
    <class kind="class">operations_research::SimpleRevFIFO</class>
    <class kind="class">operations_research::SimpleRevFIFO::Iterator</class>
    <class kind="class">operations_research::RevImmutableMultiMap</class>
    <class kind="class">operations_research::RevSwitch</class>
    <class kind="class">operations_research::SmallRevBitSet</class>
    <class kind="class">operations_research::RevBitSet</class>
    <class kind="class">operations_research::RevBitMatrix</class>
    <class kind="class">operations_research::CallMethod0</class>
    <class kind="class">operations_research::CallMethod1</class>
    <class kind="class">operations_research::CallMethod2</class>
    <class kind="class">operations_research::CallMethod3</class>
    <class kind="class">operations_research::DelayedCallMethod0</class>
    <class kind="class">operations_research::DelayedCallMethod1</class>
    <class kind="class">operations_research::DelayedCallMethod2</class>
    <class kind="class">operations_research::LocalSearchOperator</class>
    <class kind="class">operations_research::VarLocalSearchOperator</class>
    <class kind="class">operations_research::IntVarLocalSearchHandler</class>
    <class kind="class">operations_research::IntVarLocalSearchOperator</class>
    <class kind="class">operations_research::SequenceVarLocalSearchHandler</class>
    <class kind="class">operations_research::SequenceVarLocalSearchOperator</class>
    <class kind="class">operations_research::BaseLns</class>
    <class kind="class">operations_research::ChangeValue</class>
    <class kind="class">operations_research::PathOperator</class>
    <class kind="class">operations_research::PathWithPreviousNodesOperator</class>
    <class kind="class">operations_research::LocalSearchFilter</class>
    <class kind="class">operations_research::LocalSearchFilterManager</class>
    <class kind="class">operations_research::IntVarLocalSearchFilter</class>
    <class kind="class">operations_research::PropagationMonitor</class>
    <class kind="class">operations_research::LocalSearchMonitor</class>
    <class kind="class">operations_research::BooleanVar</class>
    <class kind="class">operations_research::SymmetryBreaker</class>
    <class kind="class">operations_research::SearchLog</class>
    <class kind="class">operations_research::ModelCache</class>
    <class kind="class">operations_research::ArgumentHolder</class>
    <class kind="class">operations_research::ModelParser</class>
    <class kind="class">operations_research::ArrayWithOffset</class>
    <class kind="class">operations_research::RevGrowingArray</class>
    <class kind="class">operations_research::RevIntSet</class>
    <class kind="class">operations_research::RevPartialSequence</class>
    <class kind="class">operations_research::UnsortedNullableRevBitset</class>
    <namespace>operations_research</namespace>
    <member kind="typedef">
      <type>VarLocalSearchOperator&lt; SequenceVar, std::vector&lt; int &gt;, SequenceVarLocalSearchHandler &gt;</type>
      <name>SequenceVarLocalSearchOperatorTemplate</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad91551404d4eeb115402e25f8ac599b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarTypes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSPECIFIED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbab4f91414920a046da6b20cd63a2796e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOMAIN_INT_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba035478726d2dcd2fb9ac77afb5c759cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOLEAN_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba79122eee2a14a98d575b0b9ac73b0e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONST_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbad9de5a1ac157ce63c698777275b17787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ADD_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba0cc8439ff5d71bb0c4c981cd04b73d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_TIMES_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbaa77c2e49834d223253421d9e3d69c51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CST_SUB_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93697c551d06ce8d37be776116f23f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPP_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba9558ccbf57e24d3ddde9bfbf2835e4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRACE_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93b00759c703fe20d9d8a5a75268a69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a64cf3e1336ec61275bdd2ae853d38406</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab89995e46facfc1db291ce75658dd0a5</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acfc54730764156f1fb717e99b71ba5d4</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a65a9c1ccf298ae110decc3b9d285dc16</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ca754fad158b92d7f678b5d354d8927</anchor>
      <arglist>(void *const ptr)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aec42cb0a7c3079eb8f0406914077d633</anchor>
      <arglist>(const std::vector&lt; T * &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac2ba31780fce352d4bba600e6e8eacad</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeLocalSearchOperator</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a85ea0ef5b46465c3793333ce9821f15f</anchor>
      <arglist>(Solver *solver, const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayConstant</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a12527c82ffc8b31c5d8dc836c366d624</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayBoolean</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3f4525e71a6b05d97c868f0832750a60</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllOnes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3e4f71c4c79e0b4ec00c4e715a7c298</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab0ae787392a8dd8a499eb55ac0916aa4</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllGreaterOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3aea406979285a28c91fd1ee8115af74</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllLessOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a15f08cfbb35e2b8b1eb76f79caea924a</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab62b402f767cda48eb67ef8b50397f8f</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a38972723946490ea4df4e34298d8805d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3de09f9134b976e5ba64751ac0f4440b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8351829c324863ddda52e201df4f9f84</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasingContiguous</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aafac7375c23337f25821aa6f86ca627c</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasing</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d434774c07815a25ffaa7adb343c19e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayInRange</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adf2aea6c68fe502389c9264b971b2f85</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, T range_min, T range_max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBound</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae4c7a8bfc6877606e512d3279549f44d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBooleans</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7abde7313cef64d25202a18f07481fc3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundOrNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a54470bffc3ea32cc37d0222e5dbb62a6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundTo</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7028ce8b481be8cb6fca7a6925d41aa7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MaxVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abc42d1bcfe023d3ac6f59471b75d853c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MinVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5c1932027ef8bc1689d725a1c597867b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillValues</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6662a100d8715747870beb9721bb304b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, std::vector&lt; int64 &gt; *const values)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivUp</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a60dabfa452b4264887ef76c75edf3765</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivDown</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a942ba2898a44303790c91e761b8f4630</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int64 &gt;</type>
      <name>ToInt64Vector</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aad4e1b406f0e56c83283747b038df88a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing_8h</filename>
    <includes id="constraint__solver_8h" name="constraint_solver.h" local="yes" imported="no">ortools/constraint_solver/constraint_solver.h</includes>
    <includes id="constraint__solveri_8h" name="constraint_solveri.h" local="yes" imported="no">ortools/constraint_solver/constraint_solveri.h</includes>
    <includes id="routing__index__manager_8h" name="routing_index_manager.h" local="yes" imported="no">ortools/constraint_solver/routing_index_manager.h</includes>
    <includes id="routing__parameters_8pb_8h" name="routing_parameters.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_parameters.pb.h</includes>
    <includes id="routing__types_8h" name="routing_types.h" local="yes" imported="no">ortools/constraint_solver/routing_types.h</includes>
    <class kind="class">operations_research::RoutingModel</class>
    <class kind="struct">operations_research::RoutingModel::StateDependentTransit</class>
    <class kind="struct">operations_research::RoutingModel::CostClass</class>
    <class kind="struct">operations_research::RoutingModel::CostClass::DimensionCost</class>
    <class kind="struct">operations_research::RoutingModel::VehicleClass</class>
    <class kind="class">operations_research::RoutingModelVisitor</class>
    <class kind="class">operations_research::DisjunctivePropagator</class>
    <class kind="struct">operations_research::DisjunctivePropagator::Tasks</class>
    <class kind="class">operations_research::GlobalVehicleBreaksConstraint</class>
    <class kind="class">operations_research::TypeRegulationsChecker</class>
    <class kind="struct">operations_research::TypeRegulationsChecker::NodeCount</class>
    <class kind="class">operations_research::TypeIncompatibilityChecker</class>
    <class kind="class">operations_research::TypeRequirementChecker</class>
    <class kind="class">operations_research::TypeRegulationsConstraint</class>
    <class kind="class">operations_research::SimpleBoundCosts</class>
    <class kind="struct">operations_research::SimpleBoundCosts::BoundCost</class>
    <class kind="class">operations_research::RoutingDimension</class>
    <class kind="struct">operations_research::RoutingDimension::NodePrecedence</class>
    <class kind="class">operations_research::SweepArranger</class>
    <class kind="class">operations_research::IntVarFilteredDecisionBuilder</class>
    <class kind="class">operations_research::RoutingFilteredDecisionBuilder</class>
    <class kind="class">operations_research::CheapestInsertionFilteredDecisionBuilder</class>
    <class kind="struct">operations_research::CheapestInsertionFilteredDecisionBuilder::StartEndValue</class>
    <class kind="class">operations_research::GlobalCheapestInsertionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::LocalCheapestInsertionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::CheapestAdditionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::EvaluatorCheapestAdditionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::ComparatorCheapestAdditionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::SavingsFilteredDecisionBuilder</class>
    <class kind="struct">operations_research::SavingsFilteredDecisionBuilder::SavingsParameters</class>
    <class kind="class">operations_research::SavingsFilteredDecisionBuilder::SavingsContainer</class>
    <class kind="struct">operations_research::SavingsFilteredDecisionBuilder::VehicleClassEntry</class>
    <class kind="class">operations_research::SequentialSavingsFilteredDecisionBuilder</class>
    <class kind="class">operations_research::ParallelSavingsFilteredDecisionBuilder</class>
    <class kind="class">operations_research::ChristofidesFilteredDecisionBuilder</class>
    <class kind="class">operations_research::BasePathFilter</class>
    <class kind="class">operations_research::CPFeasibilityFilter</class>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>void</type>
      <name>AppendTasksFromPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9c690acb94faaa03d89930ec84a76bba</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;path, const std::vector&lt; int64 &gt; &amp;min_travels, const std::vector&lt; int64 &gt; &amp;max_travels, const std::vector&lt; int64 &gt; &amp;pre_travels, const std::vector&lt; int64 &gt; &amp;post_travels, const RoutingDimension &amp;dimension, DisjunctivePropagator::Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendTasksFromIntervals</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aec575fd72a48b07ceca957691d785d57</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, DisjunctivePropagator::Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillPathEvaluation</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4f6a1b9fc737ba25fee7bf42d6635182</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;path, const RoutingModel::TransitCallback2 &amp;evaluator, std::vector&lt; int64 &gt; *values)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSetValuesFromTargets</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4e907b3668a07c9fa3f62d938f6cb855</anchor>
      <arglist>(Solver *solver, std::vector&lt; IntVar * &gt; variables, std::vector&lt; int64 &gt; targets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveModelWithSat</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab70fc1eb89b0210ef0e6d24256f7776a</anchor>
      <arglist>(const RoutingModel &amp;model, const Assignment *initial_solution, Assignment *solution)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeNodeDisjunctionFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae096121f1559753c357ed8ee184353f8</anchor>
      <arglist>(const RoutingModel &amp;routing_model, std::function&lt; void(int64)&gt; objective_callback)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeVehicleAmortizedCostFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5f6417c3f4078b9fdaafdb8e19116b55</anchor>
      <arglist>(const RoutingModel &amp;routing_model, Solver::ObjectiveWatcher objective_callback)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeTypeRegulationsFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3de43a015d4ee3ce53eb030e1d7232de</anchor>
      <arglist>(const RoutingModel &amp;routing_model)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; IntVarLocalSearchFilter * &gt;</type>
      <name>MakeCumulFilters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab7e213b9838f546243a7040d58506cd9</anchor>
      <arglist>(const RoutingDimension &amp;dimension, Solver::ObjectiveWatcher objective_callback, bool filter_objective_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakePathCumulFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab64b4ace42f0744e0814257a9a6ffa16</anchor>
      <arglist>(const RoutingDimension &amp;dimension, Solver::ObjectiveWatcher objective_callback, bool propagate_own_objective_value, bool filter_objective_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeGlobalLPCumulFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afbaa470f2ff428bc316d5eac61567955</anchor>
      <arglist>(const RoutingDimension &amp;dimension, Solver::ObjectiveWatcher objective_callback, bool filter_objective_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakePickupDeliveryFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3ffb53eac6214b414e926238012a2a0</anchor>
      <arglist>(const RoutingModel &amp;routing_model, const RoutingModel::IndexPairs &amp;pairs, const std::vector&lt; RoutingModel::PickupAndDeliveryPolicy &gt; &amp;vehicle_policies)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeVehicleVarFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a67f4b4b64a6c11717020eaa963b98c51</anchor>
      <arglist>(const RoutingModel &amp;routing_model)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeVehicleBreaksFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae9a33af72abb5c2332a1f7ca71ab8215</anchor>
      <arglist>(const RoutingModel &amp;routing_model, const RoutingDimension &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeCPFeasibilityFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaa5f7d59af23f5e10fc43a3989fa0b68</anchor>
      <arglist>(const RoutingModel *routing_model)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_enums.pb.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/gen/ortools/constraint_solver/</path>
    <filename>routing__enums_8pb_8h</filename>
    <class kind="struct">TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</class>
    <class kind="class">operations_research::FirstSolutionStrategy</class>
    <class kind="class">operations_research::LocalSearchMetaheuristic</class>
    <class kind="struct">is_proto_enum&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</class>
    <class kind="struct">is_proto_enum&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</class>
    <namespace>internal</namespace>
    <namespace>operations_research</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>ab99f705eeba00bba1fbe3cbd06567188</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FirstSolutionStrategy_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dad02e019c28342793688466400afd032d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da6c8e1e7a2859125316fe07082a2da868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da4c1d8ec510011789f52267efc7d34bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dae133e7145564aa475a81741a6240e901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_EVALUATOR_STRATEGY</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da6d0f4bf298a2b6e6462feb7035d2c5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SAVINGS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da2acc1235ef1e7bec84c9a60b010400b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SWEEP</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da83fd39655867e51be481faa09fbea164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_CHRISTOFIDES</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da8a09bb6c57bf531f6674ea171b011791</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_ALL_UNPERFORMED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da0c4ad672038428a0f3b3b7f6c92d8840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_BEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dad0735ef20259782cea2046f90c39bda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dabba644bd336acdb33aef7257f5bfa536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da8580f408e6e4af5373e4dd081d59d767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da348e92318608b985248e17102d016cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da9a63d38a1eed11971089af926145f83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da451e468bc86902552aa9b987f66f5875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da9c097f678b4aaaa6b10df89dc4d4802e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da8cdfd32facff4a66e180fab80f3fb711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dae584dc12821c9b7171986c986b6c7462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchMetaheuristic_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aedab1177884bf5c3fda2cac819cca8279ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda883a6e25cd8984a9e4e06636823f7201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GREEDY_DESCENT</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda844fc936bb493f6a5d592b28302ea2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda2909a10cd525473780b35aaa3c4f4eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda0d373c31dbec1678db8b9e50ae63327f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda63e13a565cf5daf981c1b565912b3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda300fe37f649b909a810935825778b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda0783003ef2622becdab73be7bfb66e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda719d13ec837e44b8b25b0f3315346594</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_NAMESPACE_OPEN ::operations_research::FirstSolutionStrategy *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::FirstSolutionStrategy &gt;</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>af66aea96731c9aec7a79f8f0a8ebdc2c</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::LocalSearchMetaheuristic *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::LocalSearchMetaheuristic &gt;</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>a1929141d8ceae06af6d0c92b3de0e3fe</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac8fb428ce4826abddd79ff391cfc1c51</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *</type>
      <name>FirstSolutionStrategy_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a99ad9f9140f36fbb7d0fa70aba00b46b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>FirstSolutionStrategy_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa3347cbb67e6b42bf2d99c6e36a43285</anchor>
      <arglist>(T enum_t_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a53e650ef5267d5f3db388f6a6b9482a8</anchor>
      <arglist>(const std::string &amp;name, FirstSolutionStrategy_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aed46fa1bbfbc75c04bd66f5055ddb3c1</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *</type>
      <name>LocalSearchMetaheuristic_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a00f3e64ec0029f07e62e1c1abfd6071f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>LocalSearchMetaheuristic_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3412913b0ac8a9e00d3a64bcce238da0</anchor>
      <arglist>(T enum_t_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acd6f3950d95b591a67cdc61be1f8cb40</anchor>
      <arglist>(const std::string &amp;name, LocalSearchMetaheuristic_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>af22e88bc83bbd1823edaec6845651098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EnumDescriptor *</type>
      <name>GetEnumDescriptor&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>ac10a962b3f273fe713e3ec24f958244d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable</type>
      <name>descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>routing__enums_8pb_8h.html</anchorfile>
      <anchor>adb36228f7101310ce5c6464e0afa24ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FirstSolutionStrategyDefaultTypeInternal</type>
      <name>_FirstSolutionStrategy_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a88484804c6e66958d00fb3f1b0821b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LocalSearchMetaheuristicDefaultTypeInternal</type>
      <name>_LocalSearchMetaheuristic_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5e179c1aa71c3f208d4dfbd8a27bfdc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a2c7b8136ecfa0fe9cf4cd72a7f503e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a02c2709292cb324dd96c1f7c3cd6bb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>FirstSolutionStrategy_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa952bfe0a71c0897a2490f8e29feea1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aeef02d29a4fbff402021b9ed0509b3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7c6b8ceb9a6dad94886b3a8fa8d3a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>LocalSearchMetaheuristic_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab75b4553844ec6a32a0d881f7f64d879</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_flags.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__flags_8h</filename>
    <includes id="routing__parameters_8pb_8h" name="routing_parameters.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_parameters.pb.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a3416505b31156eb123c7fe044ca301ff</anchor>
      <arglist>(routing_no_lns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a5a7014ba820155fca2b46772cc653f69</anchor>
      <arglist>(routing_no_fullpathlns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a09baada5e27307e4b579af9ea6778f7a</anchor>
      <arglist>(routing_no_relocate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac8cbfccb3e8d62cd3deafb1706db620c</anchor>
      <arglist>(routing_no_relocate_neighbors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a020dd19890638972a02c79b788d707df</anchor>
      <arglist>(routing_no_relocate_subtrip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a37169d7a229a662b3c06bedfd64995a2</anchor>
      <arglist>(routing_no_exchange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a10d847949a4fec4762cc4fd87a3d13af</anchor>
      <arglist>(routing_no_exchange_subtrip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a59d83a01bb9322b8dc72615050476ae9</anchor>
      <arglist>(routing_no_cross)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a3dc6962972228d5ce6067b9088138ee2</anchor>
      <arglist>(routing_no_2opt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a48e5ee1a077cd7f29bea07c2d51b68b5</anchor>
      <arglist>(routing_no_oropt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aba27d4acb939d01dd3557a89defdfa89</anchor>
      <arglist>(routing_no_make_active)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a125960ed8e8ff7f4e09598527124c8fb</anchor>
      <arglist>(routing_no_lkh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aeb59d6e13f3c429dd380178498417a50</anchor>
      <arglist>(routing_no_relocate_expensive_chain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a7bd2608be63ffd780a7733c092306372</anchor>
      <arglist>(routing_no_tsp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a1eab49dc667e9f72cbca34dcd328d776</anchor>
      <arglist>(routing_no_tsplns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ae28598119cf24ae8bfc651ba7cc86ce4</anchor>
      <arglist>(routing_use_chain_make_inactive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a4e72d42c139a639cac1ffe4e7f845769</anchor>
      <arglist>(routing_use_extended_swap_active)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>acdb6d5ff34d3d970c44885a8ca07869b</anchor>
      <arglist>(routing_guided_local_search)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aaf96533028f0c52c8148b551c7802009</anchor>
      <arglist>(routing_guided_local_search_lambda_coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a73e88a9f0cb6cf64ca0c7a12db9a221d</anchor>
      <arglist>(routing_simulated_annealing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a66d0ece2c9b49c9415107a5794667792</anchor>
      <arglist>(routing_tabu_search)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aeb38a57037b1e9132c03733dbba265d8</anchor>
      <arglist>(routing_generic_tabu_search)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac088c88799f5e70878fc77861dead99c</anchor>
      <arglist>(routing_solution_limit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>aa8ee0757a04bdad93b86bccd0d032a5d</anchor>
      <arglist>(routing_time_limit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac7f6724dfc2c9e12e3a2e3fabde77d37</anchor>
      <arglist>(routing_lns_time_limit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_string</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af03d19fcf75b266ff9c2f3bc4299954b</anchor>
      <arglist>(routing_first_solution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af7817771f35d51878aabad8b82218fef</anchor>
      <arglist>(routing_use_filtered_first_solutions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>acaf0064d0a157ab57f0dd76c86a77b2b</anchor>
      <arglist>(savings_neighbors_ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a74c267c61bc622a290d4d4932f881234</anchor>
      <arglist>(savings_add_reverse_arcs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a0b5b747647513d9d068be3c862d32dc5</anchor>
      <arglist>(savings_arc_coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a4eff6a6609b6eb3a70415c252345d81f</anchor>
      <arglist>(cheapest_insertion_farthest_seeds_ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af57b78879b9fa3639845edfb3208c974</anchor>
      <arglist>(cheapest_insertion_neighbors_ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a78ea457187d5b3602a0211e0149d45c9</anchor>
      <arglist>(routing_dfs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a2ad659c8e2231e2ae9850d5e80fe90b2</anchor>
      <arglist>(routing_optimization_step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int32</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a540512ada588875d8b65808a57e04098</anchor>
      <arglist>(routing_number_of_solutions_to_collect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int32</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>af1cb364c9972cbe0fead215790f168b8</anchor>
      <arglist>(routing_relocate_expensive_chain_num_arcs_to_consider)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a871df133398c8959b3cb60352ce00a2f</anchor>
      <arglist>(routing_use_light_propagation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a0fa7d21980527aa0ea3b3fc702963531</anchor>
      <arglist>(routing_cache_callbacks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a96cdf25d3bc98c8eae24e3a761f5ef35</anchor>
      <arglist>(routing_max_cache_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ac06171f360022662600e125df663cd70</anchor>
      <arglist>(routing_trace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a774858237612cc1d61ae3a812481e127</anchor>
      <arglist>(routing_profile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>ae44df5aa6332b25ae31c96216e45522b</anchor>
      <arglist>(routing_use_homogeneous_costs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>routing__flags_8h.html</anchorfile>
      <anchor>a9f81449a13758249d4247ec0ddce5a9a</anchor>
      <arglist>(routing_gzip_compress_trail)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>BuildModelParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae39a6c4d8ba890ec5150ea91a7aad643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>BuildSearchParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a95da1d3a46432afd40024f79279a48b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_index_manager.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__index__manager_8h</filename>
    <includes id="routing__types_8h" name="routing_types.h" local="yes" imported="no">ortools/constraint_solver/routing_types.h</includes>
    <class kind="class">operations_research::RoutingIndexManager</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>routing_lp_scheduling.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__lp__scheduling_8h</filename>
    <includes id="routing_8h" name="routing.h" local="yes" imported="no">ortools/constraint_solver/routing.h</includes>
    <class kind="class">operations_research::DimensionCumulOptimizerCore</class>
    <class kind="class">operations_research::LocalDimensionCumulOptimizer</class>
    <class kind="class">operations_research::GlobalDimensionCumulOptimizer</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>routing_neighborhoods.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__neighborhoods_8h</filename>
    <includes id="constraint__solver_8h" name="constraint_solver.h" local="yes" imported="no">ortools/constraint_solver/constraint_solver.h</includes>
    <includes id="constraint__solveri_8h" name="constraint_solveri.h" local="yes" imported="no">ortools/constraint_solver/constraint_solveri.h</includes>
    <includes id="routing__types_8h" name="routing_types.h" local="yes" imported="no">ortools/constraint_solver/routing_types.h</includes>
    <class kind="class">operations_research::MakeRelocateNeighborsOperator</class>
    <class kind="class">operations_research::MakePairActiveOperator</class>
    <class kind="class">operations_research::MakePairInactiveOperator</class>
    <class kind="class">operations_research::PairRelocateOperator</class>
    <class kind="class">operations_research::LightPairRelocateOperator</class>
    <class kind="class">operations_research::PairExchangeOperator</class>
    <class kind="class">operations_research::PairExchangeRelocateOperator</class>
    <class kind="class">operations_research::SwapIndexPairOperator</class>
    <class kind="class">operations_research::IndexPairSwapActiveOperator</class>
    <class kind="class">operations_research::RelocateExpensiveChain</class>
    <class kind="class">operations_research::PairNodeSwapActiveOperator</class>
    <class kind="class">operations_research::RelocateSubtrip</class>
    <class kind="class">operations_research::ExchangeSubtrip</class>
    <namespace>operations_research</namespace>
  </compound>
  <compound kind="file">
    <name>routing_parameters.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__parameters_8h</filename>
    <includes id="routing__parameters_8pb_8h" name="routing_parameters.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_parameters.pb.h</includes>
    <namespace>operations_research</namespace>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>DefaultRoutingModelParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa388c8707db255ae7742c04046bdd613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>DefaultRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adcac4a11f1e4d36ceb47f7251461487d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>FindErrorInRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae2e060e8ee4ea901dc4df260b3385eac</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_parameters.pb.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/gen/ortools/constraint_solver/</path>
    <filename>routing__parameters_8pb_8h</filename>
    <includes id="routing__enums_8pb_8h" name="routing_enums.pb.h" local="yes" imported="no">ortools/constraint_solver/routing_enums.pb.h</includes>
    <class kind="struct">TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</class>
    <class kind="class">operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators</class>
    <class kind="class">operations_research::RoutingSearchParameters</class>
    <class kind="class">operations_research::RoutingModelParameters</class>
    <namespace>internal</namespace>
    <namespace>operations_research</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>routing__parameters_8pb_8h.html</anchorfile>
      <anchor>a41c79b954c0fc1878adefd2371557f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_NAMESPACE_OPEN ::operations_research::RoutingModelParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingModelParameters &gt;</name>
      <anchorfile>routing__parameters_8pb_8h.html</anchorfile>
      <anchor>aafec97bd10b50fab49307a19965084ca</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingSearchParameters &gt;</name>
      <anchorfile>routing__parameters_8pb_8h.html</anchorfile>
      <anchor>a319e5c4759de7382dd6a60271d8e3ce6</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>Arena::CreateMaybeMessage&lt;::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators &gt;</name>
      <anchorfile>routing__parameters_8pb_8h.html</anchorfile>
      <anchor>aa5dcf33a4b44e601fc33617b5fe05a38</anchor>
      <arglist>(Arena *)</arglist>
    </member>
    <member kind="variable">
      <type>const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable</type>
      <name>descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>routing__parameters_8pb_8h.html</anchorfile>
      <anchor>a08fb716a4f5f875f265060f453fa01b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingModelParametersDefaultTypeInternal</type>
      <name>_RoutingModelParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3a853384e4e580582b670a57018029d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParametersDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a601e1a7c230fbf44503db528b20e30ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a595bafdd2ca0348c23f2c03da8ef2468</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_types.h</name>
    <path>/usr/local/google/home/lperron/Work/or-tools/ortools/constraint_solver/</path>
    <filename>routing__types_8h</filename>
    <namespace>operations_research</namespace>
    <member kind="typedef">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>RoutingTransitCallback1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a40e66c7b62d7c023af6f08912fdc3f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64)&gt;</type>
      <name>RoutingTransitCallback2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae7851f8d6518e3180b9d9f0ec69826e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::vector&lt; int64 &gt;, std::vector&lt; int64 &gt; &gt;</type>
      <name>RoutingIndexPair</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a30af988d402f0f3d36640575ca87153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RoutingIndexPair &gt;</type>
      <name>RoutingIndexPairs</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a114ea14886b902c9cf9b988c4ef12672</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8fee47a5359613bc7f8df356595c7ff0</anchor>
      <arglist>(RoutingNodeIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afa9196adb7aa76d8e60cd4c0c6687c0d</anchor>
      <arglist>(RoutingCostClassIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d98b6fb94b9cdabfaca3d9f3c9632e9</anchor>
      <arglist>(RoutingDimensionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1edd1d7c020633019991b13d14b4b15b</anchor>
      <arglist>(RoutingDisjunctionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aff19b78b3d56ff95c23727ca4ff64ea7</anchor>
      <arglist>(RoutingVehicleClassIndex, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ArgumentHolder</name>
    <filename>classoperations__research_1_1ArgumentHolder.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>TypeName</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ae8ee031f957d5ede9e14f8c1941551d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTypeName</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a6cd262ab7a6e37c48174f7f0dbd2bb73</anchor>
      <arglist>(const std::string &amp;type_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a024839a22b80cf3bd4c9879f71b9dbe4</anchor>
      <arglist>(const std::string &amp;arg_name, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ae321335efa9fe9d82edd8d5fa95ade4e</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerMatrixArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ab41855f3cb2bd93669de47d89208366f</anchor>
      <arglist>(const std::string &amp;arg_name, const IntTupleSet &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ad82e3466e449af82245c2e0b91c8c66e</anchor>
      <arglist>(const std::string &amp;arg_name, IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a059904b2a1d62ed9ad661e5a1177553d</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ae190963f736cea776abfcee0c371894f</anchor>
      <arglist>(const std::string &amp;arg_name, IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntervalArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a1664c8587a17a2dbf1aa5d26c9adfae5</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntervalVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a5e31bbe24e0a9e5918f264717c40b391</anchor>
      <arglist>(const std::string &amp;arg_name, SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequenceArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>af0fbaf39e9ce3f12565d1674a874feeb</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a7546de0f0f511735bd7a0875575e4280</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ab72da67fc0dc6e063bde74f0827bd66c</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>FindIntegerArgumentWithDefault</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a3f504aa5d541d118ea2581d54eaba52e</anchor>
      <arglist>(const std::string &amp;arg_name, int64 def) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>FindIntegerArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a01223d35d0c3d058461a2c9bee5f84a4</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>FindIntegerArrayArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>ab94296da5de955005d9bb021c9dedadb</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>const IntTupleSet &amp;</type>
      <name>FindIntegerMatrixArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a08f189fbfdb08977ffde2df4bba3e471</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>FindIntegerExpressionArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a9ae78960041ab71c94f6acbd79878f0f</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>FindIntegerVariableArrayArgumentOrDie</name>
      <anchorfile>classoperations__research_1_1ArgumentHolder.html</anchorfile>
      <anchor>a530925ddb857ccac27e83b01e438f107</anchor>
      <arglist>(const std::string &amp;arg_name) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ArrayWithOffset</name>
    <filename>classoperations__research_1_1ArrayWithOffset.html</filename>
    <templarg></templarg>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>ArrayWithOffset</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>a9ab37894f3c478b606d5f62452636324</anchor>
      <arglist>(int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayWithOffset</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>a3c91ad81a54a07e40255e93cd3b798bf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>Evaluate</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>ade4331eb679d14fc9b17ee6e30372993</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>a8863e9c3396d82c7f8af68d9711a4599</anchor>
      <arglist>(int64 index, T value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ArrayWithOffset.html</anchorfile>
      <anchor>ae3389cbd1f1f47c3c0ba0d8c9d98c8d2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Assignment</name>
    <filename>classoperations__research_1_1Assignment.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="typedef">
      <type>AssignmentContainer&lt; IntVar, IntVarElement &gt;</type>
      <name>IntContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8f1f48670d847343b04f8bacd77686e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt;</type>
      <name>IntervalContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab8f7d613cbf4ee63e39460698d3a46b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt;</type>
      <name>SequenceContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a094bbb476dd216af27921dcb30ee5303</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a54a6c970300c41c108c0ea9634d6cfa7</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ac1cb35f70f4f534716957a5ac9b381f4</anchor>
      <arglist>(const Assignment *const copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Assignment</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a676bfc6bcaf0a4866b511c82fd47c420</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a95769d12b65e9e41966f082e6be717e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad89ba9e1f4d98d3a3b2bb5d97bd1e8bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8c6ea345dae471d30d83faeef85f61cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumIntVars</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a607ab1726c4a6ae603e3645084ae96b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumIntervalVars</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8341278b341fb7888adf8cdde439dfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSequenceVars</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abc1a433b3e54e2fa0aef6925f83d43b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7eb289b0a73f7cdb6296c26f485eb69e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a17a5e13f2f630fd1566794ac31087fb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Load</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a3b43a5bec63b40d16227469fa213cb18</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Load</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad0e1c1e364817d29b49def87e42942e5</anchor>
      <arglist>(File *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa12ff68b3fe5256080f06e9dc47cd1bf</anchor>
      <arglist>(const AssignmentProto &amp;assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Save</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af0aa8d715cd8daf2fdc0dc6ebd1f5abb</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Save</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a18d25283cdf3f31ad33c05c6e9d73840</anchor>
      <arglist>(File *file) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Save</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a044f5e030695302807e757fcbb648948</anchor>
      <arglist>(AssignmentProto *const assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>adae0600f8be577e57febc34f92d59203</anchor>
      <arglist>(IntVar *const v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae2c61aed5346bd04a91421c70861d918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Objective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a507e861514fe3fdc9313406ba25b7443</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a31c577d3e5dbbf7a90f5b1955660642c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ObjectiveMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a51dadd0690d4db9d75d1f8616f2742d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ObjectiveMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a47d98f9809485d149e9537e1afb1d6fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ObjectiveValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a6eb497a20a19617c926afffe531654b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ObjectiveBound</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a57610548a8daffff880539eec24df109</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a5dbf21225962af3db13d216174989608</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a95bd74b66ab1626c7d7cb8b4c083463f</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab9f7970e317fa45b497c484a00485b1f</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetObjectiveRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a403ddf341e288433672bedb08c322963</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad71780560faa8a12413e6007c636c104</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af5ddb7fd6be53f8a7673e9f02f8116c6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a11c9545171ef35516112a3f9b49484b7</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a272ed05b871564c3ab8034010901d068</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aadef912e9222db3003405f7b60492dce</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a91dba370f181ba0f0ca98992aaeb59d6</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a0e75f7efda75c27cdec0baa19c2803d1</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a117e51bab95cb5e42af11f97448c6d29</anchor>
      <arglist>(const IntVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a5c741487249c9eb1805e33285873c240</anchor>
      <arglist>(const IntVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ac0c8bfa3cf5460476327b1360783e29d</anchor>
      <arglist>(const IntVar *const var, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad98cd25d71c9c8c2e98aab3866372a85</anchor>
      <arglist>(const IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a130169aa9a791d2f5534e5802c980c7e</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af99d85c1ebbb2482ae7f85dd59832013</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abdae8b188272df57b2ef9723d241a176</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a06215150a658d6f23e352df8e2edadc5</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a6e45377849d24ceb498ec05f3bb146e1</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7530f8bd8c4e7153cae4e5245b28b0d9</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a95e429f9bc2b17b436f68f16bd184a4c</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abf92c871da428f03cd4ad14853860721</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a0fc43c0f1a567725de7ac83cc86bde8f</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab8d2e00eb03cec613c05eaf9ad6da646</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aaee3eb3af912875dc367679f64d65a3b</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a5251224150b99f3458c7bc494ba9d193</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a02f7cd678fb793a4cedbaa11f1904e32</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a6e3a7428eea94e102ed7c7335f551b52</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ac3cbe166fe2619e72c729e18ee245eac</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae6f3b7ad8f6360c12d1b459cb5cefe59</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8898f5457ee277d6365c9d01ef6e66ab</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a846c66e60add2d3116f6080694492c55</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af77457fc093a5cca3be6a1b56e2bc028</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a470a8ff6d426b41ce7b4cefbd7de8d6d</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa52aacc34b2380d2b649983ac5c1c7fd</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a514977300d99309ea09e80365ce54dca</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a3388a6269c91d6ec8b8edc5556d5a544</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7e88fb7a9da71421cb4a67eb1f81a24e</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a157b6b9a936699c80f515accdf1bd422</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a77552a8028118507b948e06dd8d5e879</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae52a3d79c5e89b8661928c6439d9e107</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMin</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a93c0e33825a1d8ef903b34a443b281b2</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMax</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a866caecff7e07d15a7771d26fcb3b995</anchor>
      <arglist>(const IntervalVar *const var, int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedRange</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab74b8ac19e3a0c418636b841ba551c1a</anchor>
      <arglist>(const IntervalVar *const var, int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedValue</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>addd13c37ed68173aab91b87925f76e61</anchor>
      <arglist>(const IntervalVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>abf20633cc3fd8eb3262cd5eac9f8fe8b</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab216a01981cb07c26a2cd5e5b5b3c574</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aeddb97ff376e95548afc629fd7720387</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>ForwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a240108b6b72b6f8ea4a479095b36504b</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>BackwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab4a9176237aaf2e3b50196cf4726757a</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Unperformed</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a47c48e2669dce44002b0c618273bddfe</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab6d8cf1dcb0f18656622e325be57e9e8</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;forward_sequence, const std::vector&lt; int &gt; &amp;backward_sequence, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad613991e451593b83b35081635d1fca6</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;forward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackwardSequence</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad1746f20b39f1db633bb4781bedf05b7</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;backward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnperformed</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab9ab90406aa4d66b882c1e873ce76c48</anchor>
      <arglist>(const SequenceVar *const var, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>af6e5490427e0fba93541ce64812af7ff</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7d783636fe1d998f40ef05ac2b007f77</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a2ae9fa6611914148091bc9088fbd14e6</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad70c52f1150ba7ed487420845f117541</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aaebd87f4da9bbbeebd677fe83c8cd939</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a149aa46c3a234581162d68b2c6e64671</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a0576a040a8e1627cd8430d58780c2dc8</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae388b9094a9fc079091bedccd764796c</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa557e7fbf011848be236254ce97d603b</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ActivateObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>add93a1a7265307e0915276d5d3645a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeactivateObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ab5bba882c8c44098d624f9c17b3dc0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ActivatedObjective</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a808d1e2da8133bc44f693e87e5584bfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a709bad20694c9c117a3abfff24a60d03</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a75637e828b93b922f924b532c6bdf980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a7ac7a68050caf1046a8f299d597e85b1</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a18fd0cec48cbde4d1621139313bffab0</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>aa4e725a0d14583aa3dda4caf1465f991</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad6ab5aff03cb66b05fcbdff43dde169a</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8640e47c57ef2d95a6c94d383a9641a4</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>const IntContainer &amp;</type>
      <name>IntVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae8af25911cdd4091cd6a0ec08c9a38c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntContainer *</type>
      <name>MutableIntVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae51ad783156fb9ec65af38a8d234a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntervalContainer &amp;</type>
      <name>IntervalVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ad18a61ff8de4c3e7ec78a7e12a480af3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntervalContainer *</type>
      <name>MutableIntervalVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a9ffb2e99804d31214d9d23e1f200e85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SequenceContainer &amp;</type>
      <name>SequenceVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a40c0b89a06e6341fe2155f38ac1ceede</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SequenceContainer *</type>
      <name>MutableSequenceVarContainer</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a8c613fab3bb57fb3ec18a55a11eee8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>a481f3887a70f86eb37968ee8909267f4</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1Assignment.html</anchorfile>
      <anchor>ae285dcf4a5f8b6a28a9a6f5ed7b3e93d</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::AssignmentContainer</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <templarg>V</templarg>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(V *var)</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(V *var)</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(V *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const V *const var) const</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const V *const var)</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const V *const var)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const V *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const E *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const V *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; E &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; V, E &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt;</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(IntervalVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(IntervalVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(IntervalVar *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const IntervalVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const IntervalVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const IntervalVarElement *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntervalVarElement &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; IntervalVar, IntervalVarElement &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssignmentContainer&lt; IntVar, IntVarElement &gt;</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(IntVar *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const IntVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const IntVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const IntVarElement *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVarElement &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; IntVar, IntVarElement &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt;</name>
    <filename>classoperations__research_1_1AssignmentContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentContainer</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>af793fb6edd1488935eabba836ee8a76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab4270afda9d688e9132eb95fc9207ae2</anchor>
      <arglist>(SequenceVar *var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>FastAdd</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa162c36af0d0d536c3cda267a2dac1cc</anchor>
      <arglist>(SequenceVar *var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>AddAtPosition</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a45d4fca065881a70fe4598dd5f91094c</anchor>
      <arglist>(SequenceVar *var, int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aae1c4d5b0bb21f3f53d7bd5f06635bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a144d9ee58d069b6f1863b2827085143f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a877eabf96eaacfd5acee79411af3de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyIntersection</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a716629cdc52bf32755b737c4ab1b1cad</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a3e1c65f80f5da3371c10938c120fb984</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ab5bed5190537df6740bef2bede2814e6</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a2f617e7ec317b5dab5b29213dd48950f</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>MutableElement</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a252f023ff4bc155319812ef86b5356a4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>MutableElementOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a0f61a14dec7c5c955e2ec624a099d3ec</anchor>
      <arglist>(const SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>const SequenceVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aaf8cce923cb7cfc1aa15c6f0b0f7820e</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const SequenceVarElement &amp;</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>aabf4caa6a1427778f66aafbfea546b43</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const SequenceVarElement *</type>
      <name>ElementPtrOrNull</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a4d04b95d5dd08e9c6466eea81801d931</anchor>
      <arglist>(const SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; SequenceVarElement &gt; &amp;</type>
      <name>elements</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ae5f07b17110a4860e1801c0f6254e4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a088429aaba219da2c92f9abbdaaa906d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac4fc0cfe7060f5cf2e37c03b7b9a0b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>ac376aeb350b04f9b4876dfd9284a2c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllElementsBound</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a37197e2028382d8987a41c9ac84ed7f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a6a50632530dfd8c9a55a5134bdee9cb4</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1AssignmentContainer.html</anchorfile>
      <anchor>a5750f450575a30e8a539ecf7b2e89f18</anchor>
      <arglist>(const AssignmentContainer&lt; SequenceVar, SequenceVarElement &gt; &amp;container) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::AssignmentElement</name>
    <filename>classoperations__research_1_1AssignmentElement.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentElement</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a72b7c59e2cb99e623dff415ad129aa07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BaseIntExpr</name>
    <filename>classoperations__research_1_1BaseIntExpr.html</filename>
    <base>operations_research::IntExpr</base>
    <member kind="function">
      <type></type>
      <name>BaseIntExpr</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>ad7d12cdfcb4b9340db0ea792b5545419</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseIntExpr</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>a92036e166d6a3a89c23d7f77840f7f5c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>a1482a8f4291d806dc98deaf586777f0a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>CastToVar</name>
      <anchorfile>classoperations__research_1_1BaseIntExpr.html</anchorfile>
      <anchor>ac03c6f867b7e567f25a14a9e0c49a04b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a58d589131cbea30d4826248a2fa06aba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>afec5a6eea8ee64fbc7fa34d7d28f8d8f</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1fb9e08cff06a9a5b5739de4acba587c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>adee9a082160df545671781df47f2b985</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a153843dc05670b540a8e83dba2043eb0</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a13e126985026936fe8da212d2e377236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4bb288e8b397020398b1184047587f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a845a3c3c71323504f6b59f9c0ea46b08</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>aa573e0d34def6539f939b4b81d506164</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BaseLns</name>
    <filename>classoperations__research_1_1BaseLns.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>BaseLns</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>ab86ba3827c156713a060c3dc3386a440</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseLns</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a570a094915d4923b09b4d1572bb0c5b3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InitFragments</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a9d18ce7a9e739df8e4e48550616e7985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>NextFragment</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>ad86de5fe7fa58d23b953923ff1c60ef2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendToFragment</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a064f23839b17ce88e9c299c98c85efdc</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FragmentSize</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>acfc31fcffe1be7d082d23d3260a6c1eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>a4d8adbee4dc4ff4795904ef4e817a5f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1BaseLns.html</anchorfile>
      <anchor>abbf605907da7a213cfeef822a7290c53</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BaseObject</name>
    <filename>classoperations__research_1_1BaseObject.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseObject</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>abcf5669a8a0612adb1665e276efb416f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseObject</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>a9bd95fcee9e5856c6097b5dfae0b7076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BasePathFilter</name>
    <filename>classoperations__research_1_1BasePathFilter.html</filename>
    <base>operations_research::IntVarLocalSearchFilter</base>
    <member kind="function">
      <type></type>
      <name>BasePathFilter</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>a00c9770a8566169765e10133c77caa91</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, int next_domain_size, std::function&lt; void(int64)&gt; objective_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasePathFilter</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>ac76dad88eb64963f1e42825c9e5cf6f6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>ac68c29afe880d40f944a790220071192</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnSynchronize</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>ac49c84d4660f45c14cfb8aabbc1f526d</anchor>
      <arglist>(const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>af551c2cc4bd9dc8eca5c1aba2ea0cf1a</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindIndex</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a4ff8f64bad58d06ddf1e1fa16b52fefc</anchor>
      <arglist>(IntVar *const var, int64 *index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InjectObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>abeca74f43d73826093a3e288a633d7a2</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a78c80d2accf5a4506e3436081d365a34</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a29acf74cf99f603af9c73f5a994b48f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a5c85a90b191d5aae9ab29cf1e28ff878</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>afd72fb787ed7167fc9d959deb1286931</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVarSynced</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>add26b0145e2f0ba25dcda0e1565164db</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a58392212e951aafc3a6ba400d8816790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa3934bba1ec84e9c9b401693b43c662a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a7a34da518a80fbaeccb2fde10f2fbd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetNext</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>ab10424cfdf149205ba85d514ecaccfc5</anchor>
      <arglist>(int64 node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumPaths</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>a1ce25ec7070e5274ea054a8393da8eba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>a5960554906403faa298cc1c4e09b2581</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetPath</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>a7545032942a42869229c354f08e43a4d</anchor>
      <arglist>(int64 node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Rank</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>ad95f1fc3b850a5f3cf4e11390903b469</anchor>
      <arglist>(int64 node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsDisabled</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>aa999fba1a47d9fe6e3d56a98c19f8697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>GetNewSynchronizedUnperformedNodes</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>af2c7c17ffa39711a82bdfa8e2d4f2e45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SynchronizeOnAssignment</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a6371c48182d86ebf963536f1600ed058</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CanPropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>ab18158620c5618ea05b55ebd92817e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a90700139ec246bb2afe40edd0afb5dd9</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>injected_objective_value_</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a7b9afa3c307211ca15b6ea364f01e2a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int64</type>
      <name>kUnassigned</name>
      <anchorfile>classoperations__research_1_1BasePathFilter.html</anchorfile>
      <anchor>ad3e987838106b8fe5a15cee46853c930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::BooleanVar</name>
    <filename>classoperations__research_1_1BooleanVar.html</filename>
    <base>operations_research::IntVar</base>
    <member kind="function">
      <type></type>
      <name>BooleanVar</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aad74139cfb563933bf9ecdaf6e50d962</anchor>
      <arglist>(Solver *const s, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BooleanVar</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae5e724ed74c6500d881a105bae76815f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>adcdc43494bcafece6480f57f626544ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a6b734a5a677fb0fe2825436c6ba48a7f</anchor>
      <arglist>(int64 m) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a3a05915289d4c146e0a38bb316a7a47c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a378347db1409d83313ccb4af90628da5</anchor>
      <arglist>(int64 m) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae662ff228ca3c6d00bf1b5a44cde80af</anchor>
      <arglist>(int64 mi, int64 ma) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae3a6eede92fb16e764d9ed3d41457a90</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>af736502981e90d35f527e88e78c22ab5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ad87a19fb837f8246ec54921a3ce9a964</anchor>
      <arglist>(int64 v) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveInterval</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a6b644a17239598032c2018ee45d70d46</anchor>
      <arglist>(int64 l, int64 u) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ae00d6563324cebef0f7e25fae162b18c</anchor>
      <arglist>(Demon *d) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>afe92381987bbfe57038d9505070961f1</anchor>
      <arglist>(Demon *d) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a9591600255397e362d4e5e7b7849ccbd</anchor>
      <arglist>(Demon *d) override</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a68168a3801af19c22a488b7ee54a4f65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a6b91fb41b08de29549be0c06ffe8c02e</anchor>
      <arglist>(int64 v) const override</arglist>
    </member>
    <member kind="function">
      <type>IntVarIterator *</type>
      <name>MakeHoleIterator</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>ad753797f8931384f49e7bd611955ec92</anchor>
      <arglist>(bool reversible) const override</arglist>
    </member>
    <member kind="function">
      <type>IntVarIterator *</type>
      <name>MakeDomainIterator</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a06e0b808e27d374abdf8c21fbb6a66ec</anchor>
      <arglist>(bool reversible) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>acad14290f1f14a53adc0feb170d67f22</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VarType</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aecaf73027230c4b1822c9570dfb57d8d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsEqual</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a15849c683f45c394fa0226b63f878f88</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsDifferent</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a10b409b112a69d967a38fb8410b32628</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a71fce3ed760fa7b7411c1d535d6b2b1f</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>IsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a27b67394cfaf7bc52064ccbcf7c5ccb4</anchor>
      <arglist>(int64 constant) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RestoreValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a91649bf1da373e9ecc4e2988055b71f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>af9f1ddd2359a6d10c4003822bfc81289</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RawValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a855de66d6f54ee97107882d40bf87fd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a1e8732e1343228cbe86db9c986aa48d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ac65d53711c52b0988b7e8fb81e79aeb9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RemoveValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ade36b093f22913a40c24d37575c28f38</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a9b3717393d801dc1ca5ce32e55a73622</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a7b77bca97b9e8c80757ce1f8d3f985a6</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a5ed044357d490a6a2fd91b6bc180039e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a8540cc984d3c888633b4a741e052260d</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a549ce691c8ea0477891f7caf86d8ab37</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMin</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a894ecb1c102fa7fca59661a215f14d50</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMax</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a619ac58213bbff56398934e76dd1079f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a6d8841341ab21ef119c0b7df02785a48</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a49fb18ac443f329969336d1d685269ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUnboundBooleanVarValue</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aae0d6d6c66c7b9aece9eaa53d37df781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>value_</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aed0332baea49669ae70390240fa706d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleRevFIFO&lt; Demon * &gt;</type>
      <name>bound_demons_</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>aac17bfbf716bbfb56247821a17915738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleRevFIFO&lt; Demon * &gt;</type>
      <name>delayed_bound_demons_</name>
      <anchorfile>classoperations__research_1_1BooleanVar.html</anchorfile>
      <anchor>a758ecbaa706908f9ad017e4c4f3dd7de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::SimpleBoundCosts::BoundCost</name>
    <filename>structoperations__research_1_1SimpleBoundCosts_1_1BoundCost.html</filename>
    <member kind="variable">
      <type>int64</type>
      <name>bound</name>
      <anchorfile>structoperations__research_1_1SimpleBoundCosts_1_1BoundCost.html</anchorfile>
      <anchor>a638e49e7ab6ca4a3f434bcd7526649a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>cost</name>
      <anchorfile>structoperations__research_1_1SimpleBoundCosts_1_1BoundCost.html</anchorfile>
      <anchor>adbe3fa9c869587e7c930dde628daaa9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod0</name>
    <filename>classoperations__research_1_1CallMethod0.html</filename>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod0</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a52f89d97b033f2aaaed56b59f155e843</anchor>
      <arglist>(T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod0</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a440b83783e9b3e454da1b9ff8e0158d6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a1a9ae132209a5ae456616619c3a85766</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod0.html</anchorfile>
      <anchor>a50933bd9255294eca78f60b3b5bd176c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod1</name>
    <filename>classoperations__research_1_1CallMethod1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod1</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>a8fcc65a2b8b85180d3953f4a053c0427</anchor>
      <arglist>(T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod1</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>a6a0b5eb94a6a346e2105f39044639a57</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>a05fb24c470827029abf15ecebafbdc50</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod1.html</anchorfile>
      <anchor>ab65d89c9f459c682e727ec7352b13d0f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod2</name>
    <filename>classoperations__research_1_1CallMethod2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod2</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a71db8158282db6b1843ac9f374c2d257</anchor>
      <arglist>(T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod2</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a4844807bcdeb161db01ec170851aad5b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a722104f90990e4111a7dfb142e83f172</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod2.html</anchorfile>
      <anchor>a441b1578ed3ec8baccd9938f637fb96d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CallMethod3</name>
    <filename>classoperations__research_1_1CallMethod3.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>CallMethod3</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a7bb7c2f91ea3952b404a6f0a0ba52e90</anchor>
      <arglist>(T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallMethod3</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a02df126ffb5bc00e01cdb0a5fd13ff12</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a259efc51f0c4cda1c584c295309efd8a</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CallMethod3.html</anchorfile>
      <anchor>a8ffd455d49414f28011382cf83fff175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CastConstraint</name>
    <filename>classoperations__research_1_1CastConstraint.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>CastConstraint</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>a6d1daffc6d0067731f886641c64de177</anchor>
      <arglist>(Solver *const solver, IntVar *const target_var)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CastConstraint</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>abb7d3d824e298a2756e9a74b2163c5e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>target_var</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>a89f0e9f3c52c31eba3759c8c411f792d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>aaa882d58b5fc0f2e3df6eff957ad4a0d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a64ab23714e57db311ba5b9fe1e742979</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVar *const</type>
      <name>target_var_</name>
      <anchorfile>classoperations__research_1_1CastConstraint.html</anchorfile>
      <anchor>afe3c20ec0800b1d344861e783d45be41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ChangeValue</name>
    <filename>classoperations__research_1_1ChangeValue.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>ChangeValue</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>abe683422f672a5f8a9356fc63e3d21b6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChangeValue</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>a70285841877125a42f6e09c3de6d9ae2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>ModifyValue</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>a71b2589b82650decb06c8563310f5d5f</anchor>
      <arglist>(int64 index, int64 value)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1ChangeValue.html</anchorfile>
      <anchor>a7bcd4a197ade8555b9c1c1dcb731d5c3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CheapestAdditionFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1CheapestAdditionFilteredDecisionBuilder.html</filename>
    <base>operations_research::RoutingFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>CheapestAdditionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1CheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aa3cb4c8b575db00ec0b99c522dfa137f</anchor>
      <arglist>(RoutingModel *model, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CheapestAdditionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1CheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a31480f32bce0de8991c46240ff7775ce</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1CheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9c66b9184f757e7acd1bda8873b766d2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aca201d99227a6116c62418d28761aa9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CheapestInsertionFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</filename>
    <base>operations_research::RoutingFilteredDecisionBuilder</base>
    <class kind="struct">operations_research::CheapestInsertionFilteredDecisionBuilder::StartEndValue</class>
    <member kind="function">
      <type></type>
      <name>CheapestInsertionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a352753a37a4fa1bdb5cbf920752933a1</anchor>
      <arglist>(RoutingModel *model, std::function&lt; int64(int64, int64, int64)&gt; evaluator, std::function&lt; int64(int64)&gt; penalty_evaluator, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CheapestInsertionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5406092cbd615fcad4c926e14c45de13</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>af80ac7c7333a0515de2155c463c4344e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aca201d99227a6116c62418d28761aa9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int64, int64 &gt;</type>
      <name>ValuedPosition</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a73c8cc48a3a48935344dcf67fe760d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; StartEndValue, int &gt;</type>
      <name>Seed</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aa3d22767523969477c21a15afd777ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::vector&lt; StartEndValue &gt; &gt;</type>
      <name>ComputeStartEndDistanceForVehicles</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aefb129b85e384ae8dd93914fb86720e1</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vehicles)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializePriorityQueue</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a376f8042e03bc87789d0b0c472f9babe</anchor>
      <arglist>(std::vector&lt; std::vector&lt; StartEndValue &gt; &gt; *start_end_distances_per_node, Queue *priority_queue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InsertBetween</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3b0ce19f4831cb84532fef386f434b68</anchor>
      <arglist>(int64 node, int64 predecessor, int64 successor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AppendEvaluatedPositionsAfter</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a98354fb58cafe2444a25feeb691191d5</anchor>
      <arglist>(int64 node_to_insert, int64 start, int64 next_after_start, int64 vehicle, std::vector&lt; ValuedPosition &gt; *valued_positions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetUnperformedValue</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>abb5c3583fb3e234773e83c3a008cac9a</anchor>
      <arglist>(int64 node_to_insert) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; int64(int64, int64, int64)&gt;</type>
      <name>evaluator_</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab35d04181a231cbc77193b2bd8101aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>penalty_evaluator_</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad9d981960cfd68cb2181e0072039e8fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ChristofidesFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1ChristofidesFilteredDecisionBuilder.html</filename>
    <base>operations_research::RoutingFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>ChristofidesFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1ChristofidesFilteredDecisionBuilder.html</anchorfile>
      <anchor>a76174da7246cc3b44d80d651959de4e7</anchor>
      <arglist>(RoutingModel *model, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChristofidesFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1ChristofidesFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0d16f477daf81cddcb07d4eca0d6585a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1ChristofidesFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad14669b4e8708bf12a3908df9a298b34</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ChristofidesFilteredDecisionBuilder.html</anchorfile>
      <anchor>adfc28bc18d4fbc481c51c92b44d12739</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ComparatorCheapestAdditionFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1ComparatorCheapestAdditionFilteredDecisionBuilder.html</filename>
    <base>operations_research::CheapestAdditionFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>ComparatorCheapestAdditionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1ComparatorCheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3eeba8160da408e3f5a11ff7fe4fe552</anchor>
      <arglist>(RoutingModel *model, Solver::VariableValueComparator comparator, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComparatorCheapestAdditionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1ComparatorCheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ae066ede1ed054d390397bc59b3c836f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ComparatorCheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a1ee5ca24459065ac257b5e4b7a48778e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1CheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9c66b9184f757e7acd1bda8873b766d2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Constraint</name>
    <filename>classoperations__research_1_1Constraint.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>ae4bce2b10b1b0b3f953e356e6a34f339</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Constraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>ade8518fb88221d449c6a89f1dc7eac44</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>aaa882d58b5fc0f2e3df6eff957ad4a0d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a64ab23714e57db311ba5b9fe1e742979</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::RoutingModel::CostClass</name>
    <filename>structoperations__research_1_1RoutingModel_1_1CostClass.html</filename>
    <class kind="struct">operations_research::RoutingModel::CostClass::DimensionCost</class>
    <member kind="function">
      <type></type>
      <name>CostClass</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass.html</anchorfile>
      <anchor>a2d550889d680f3f8121bcc6fc69db6e5</anchor>
      <arglist>(int evaluator_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>LessThan</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass.html</anchorfile>
      <anchor>a82d131d0546fedbb19af49422d780cbf</anchor>
      <arglist>(const CostClass &amp;a, const CostClass &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>evaluator_index</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass.html</anchorfile>
      <anchor>acc06fc1b561814edcb2bcde9893385c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; DimensionCost &gt;</type>
      <name>dimension_transit_evaluator_class_and_cost_coefficient</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass.html</anchorfile>
      <anchor>a791b1c57c4eedb8d6460f7f42e725a71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::CPFeasibilityFilter</name>
    <filename>classoperations__research_1_1CPFeasibilityFilter.html</filename>
    <base>operations_research::IntVarLocalSearchFilter</base>
    <member kind="function">
      <type></type>
      <name>CPFeasibilityFilter</name>
      <anchorfile>classoperations__research_1_1CPFeasibilityFilter.html</anchorfile>
      <anchor>ae194b6d2696d2acd57178194db7d00c2</anchor>
      <arglist>(const RoutingModel *routing_model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CPFeasibilityFilter</name>
      <anchorfile>classoperations__research_1_1CPFeasibilityFilter.html</anchorfile>
      <anchor>a5fa418a63e5e748f31915dd025f8107d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1CPFeasibilityFilter.html</anchorfile>
      <anchor>a39c6c9bb0a7cdaa452daa56e740f10b4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1CPFeasibilityFilter.html</anchorfile>
      <anchor>aba28572b6a61d16bd08ce03635c17dc3</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnSynchronize</name>
      <anchorfile>classoperations__research_1_1CPFeasibilityFilter.html</anchorfile>
      <anchor>a1940df9d02761f8ef3156de13a6172c3</anchor>
      <arglist>(const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>af551c2cc4bd9dc8eca5c1aba2ea0cf1a</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindIndex</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a4ff8f64bad58d06ddf1e1fa16b52fefc</anchor>
      <arglist>(IntVar *const var, int64 *index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InjectObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>abeca74f43d73826093a3e288a633d7a2</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a78c80d2accf5a4506e3436081d365a34</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a29acf74cf99f603af9c73f5a994b48f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a5c85a90b191d5aae9ab29cf1e28ff878</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>afd72fb787ed7167fc9d959deb1286931</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVarSynced</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>add26b0145e2f0ba25dcda0e1565164db</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a58392212e951aafc3a6ba400d8816790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa3934bba1ec84e9c9b401693b43c662a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a7a34da518a80fbaeccb2fde10f2fbd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SynchronizeOnAssignment</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a6371c48182d86ebf963536f1600ed058</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CanPropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>ab18158620c5618ea05b55ebd92817e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a90700139ec246bb2afe40edd0afb5dd9</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>injected_objective_value_</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a7b9afa3c307211ca15b6ea364f01e2a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Decision</name>
    <filename>classoperations__research_1_1Decision.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>Decision</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a20a827cbc3c6cf9ecbef85bc3ba85cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Decision</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a35ecb2123d8d852154e65847096b3f69</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Apply</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a88aea04b24727f86d465479464437b2e</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Refute</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a04e7498b68e7bfc7caeacad7c4272c1f</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a8c30db3cf86cc406442a05f5361fe4b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Decision.html</anchorfile>
      <anchor>a5ac1f45476e2b62e48de4798adf8b911</anchor>
      <arglist>(DecisionVisitor *const visitor) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DecisionBuilder</name>
    <filename>classoperations__research_1_1DecisionBuilder.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>DecisionBuilder</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>adcbdca02b7495a6f2ffcff7f77e32b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DecisionBuilder</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>ae49a9c888745786d48556303451d219d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a3bcaa4dd991e8ddb4d0e48cfbca58592</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aca201d99227a6116c62418d28761aa9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DecisionVisitor</name>
    <filename>classoperations__research_1_1DecisionVisitor.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>DecisionVisitor</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a67b3034ec90261e392c5a1c4c35303c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DecisionVisitor</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a82aadbb02576d33c46f8c2851f455cde</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSetVariableValue</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>ac6e7b0464cdfb0caaac7661366295e65</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSplitVariableDomain</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a8faebc249d15a171102fd56fbe725216</anchor>
      <arglist>(IntVar *const var, int64 value, bool start_with_lower_half)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrPostpone</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af48323740d18f4059ff01271b50eb9f2</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrExpedite</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a7003dd5f4ff2cf139801866b35d02960</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankFirstInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a00084fcd22fc7f269b23dbfd5aa1032f</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankLastInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a771d64a88d1eecc6fcce4a5b39349be8</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitUnknownDecision</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af93d0ecd1a2cf63364ce9f8e554979cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::DefaultPhaseParameters</name>
    <filename>structoperations__research_1_1DefaultPhaseParameters.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>VariableSelection</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SUM_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1a7498691aa1fa94308453cbd0c3233e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_AVERAGE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1afa625d3c663f3bd0d081170ecf446f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_VALUE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1af2a047b8f99a5e3d2dcfff41b7575242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ValueSelection</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MIN_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16abdea23afb50539f635029f8424f40237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MAX_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16a9b07a23261ca51a42ecd8d28387495da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DisplayLevel</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1dab1a4c17b2c342104297c4d23db4c6936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1da31fef74cca87cb00faf89405448bf546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1daa7dc5065949f517176193ad86c4e6368</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SUM_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1a7498691aa1fa94308453cbd0c3233e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_AVERAGE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1afa625d3c663f3bd0d081170ecf446f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_VALUE_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>aa1ee3388a187cc5465d43d25ac9ab1f1af2a047b8f99a5e3d2dcfff41b7575242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MIN_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16abdea23afb50539f635029f8424f40237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELECT_MAX_IMPACT</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6938c08fc955872a3b8da845c8ad4e16a9b07a23261ca51a42ecd8d28387495da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1dab1a4c17b2c342104297c4d23db4c6936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1da31fef74cca87cb00faf89405448bf546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a57b6ace15b9d8666f76c6618d8addc1daa7dc5065949f517176193ad86c4e6368</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultPhaseParameters</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a76d1de2961308e35a45663d9af88c78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>VariableSelection</type>
      <name>var_selection_schema</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>ae1903959bc4ab1ec6e92aabd9465dc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueSelection</type>
      <name>value_selection_schema</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>ab0fe50ca88d7e5f45ae9db09d2bd2fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>initialization_splits</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a6e1093d6bf5e0301b6a7372b2a5fa119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>run_all_heuristics</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a052e4d8daedbab3afea9d53868b00161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heuristic_period</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a5599253b090dbe9b50cfa40fe05ecce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heuristic_num_failures_limit</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a70d7630b38e05e7284641e04416fd570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>persistent_impact</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a3d609270cd755aabacde8c738d49c1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>random_seed</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>adbccfb764ad843006381e772c828ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DisplayLevel</type>
      <name>display_level</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a7a3fddb880fc793ebe5fc960d31ab3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_last_conflict</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a28c6636498f47abc60feabd264ebb0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecisionBuilder *</type>
      <name>decision_builder</name>
      <anchorfile>structoperations__research_1_1DefaultPhaseParameters.html</anchorfile>
      <anchor>a4e60526379b527b91e6e271aac905bc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DelayedCallMethod0</name>
    <filename>classoperations__research_1_1DelayedCallMethod0.html</filename>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>DelayedCallMethod0</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>aac1986eed7783a50711d96712de47735</anchor>
      <arglist>(T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedCallMethod0</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>a99f8a9311023d3fe700778d992e045d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>a6f38b90112dcf92130efa8b5a9cdd4a9</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>adfd9001b4514cf914865ff234f189775</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod0.html</anchorfile>
      <anchor>ade95ef80273cff25d8e6ad96930484b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DelayedCallMethod1</name>
    <filename>classoperations__research_1_1DelayedCallMethod1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>DelayedCallMethod1</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a5e3bcd608fe966a5b8c5876d34ff43e5</anchor>
      <arglist>(T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedCallMethod1</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a314176880ecc300c8b22aad3903ad93a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a38be5eed447d7abf18d51f9fac7663a7</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>a7ef6fa85722c1d3da524468a6f3a6347</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod1.html</anchorfile>
      <anchor>ac7acfb8e911fb85df5208f96f5e44adf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DelayedCallMethod2</name>
    <filename>classoperations__research_1_1DelayedCallMethod2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>operations_research::Demon</base>
    <member kind="function">
      <type></type>
      <name>DelayedCallMethod2</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>aa0c821f8fe7496e6f5e398bc0fc178fc</anchor>
      <arglist>(T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedCallMethod2</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>ae609d741a76e6b1a2f919b6f282989fd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>a7be9d4dc86d9807ce080b67a91b0bfb7</anchor>
      <arglist>(Solver *const s) override</arglist>
    </member>
    <member kind="function">
      <type>Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>a9fd8b3e6b2008cc95f7d562659f63e12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DelayedCallMethod2.html</anchorfile>
      <anchor>a58c60413c247ee5d5fb627dda5aa20f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Demon</name>
    <filename>classoperations__research_1_1Demon.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>Demon</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ab1cf435bf9f422682783c255027e0570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Demon</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a6e4c51a92b24c256d889227667175e52</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7d3876bb3b369f0ae115e08ce9a6dc72</anchor>
      <arglist>(Solver *const s)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Solver::DemonPriority</type>
      <name>priority</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a7ec8db0f9eacea36b80bfacfb1b5af8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a906a1bd16d33b9b841e68b2a06bbbfd2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a4e51b1b49f9a937b335cd9381f95614d</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desinhibit</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>ae63a7d849eb2b518ac708c736c670f9c</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Queue</name>
      <anchorfile>classoperations__research_1_1Demon.html</anchorfile>
      <anchor>a47dfc6f2bc0d50a6e7c92eb00d97b064</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::RoutingModel::CostClass::DimensionCost</name>
    <filename>structoperations__research_1_1RoutingModel_1_1CostClass_1_1DimensionCost.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass_1_1DimensionCost.html</anchorfile>
      <anchor>a283543cc6886cb9f0b3b38057faf3ab1</anchor>
      <arglist>(const DimensionCost &amp;cost) const</arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>transit_evaluator_class</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass_1_1DimensionCost.html</anchorfile>
      <anchor>afccea4a83124382a4bc744f8a3e9942c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>cost_coefficient</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass_1_1DimensionCost.html</anchorfile>
      <anchor>a2b83eca1511688641fb6a8672b3a1433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RoutingDimension *</type>
      <name>dimension</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1CostClass_1_1DimensionCost.html</anchorfile>
      <anchor>a2ccdc6a8c990ac68add84c7decd471ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DimensionCumulOptimizerCore</name>
    <filename>classoperations__research_1_1DimensionCumulOptimizerCore.html</filename>
    <member kind="function">
      <type></type>
      <name>DimensionCumulOptimizerCore</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a36e89016a79a172ccf35fd2cd91496df</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OptimizeSingleRoute</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a4a7c9b3881b45490cb56078fa661f4a9</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values, int64 *cost, int64 *transit_cost, bool clear_lp=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Optimize</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a0e128419cfa4b416e1b13f780f2e2477</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values, int64 *cost, int64 *transit_cost, bool clear_lp=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OptimizeAndPack</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a0817496a096c399614e3e95780d82087</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OptimizeAndPackSingleRoute</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a83da37cfbbf38554e2e59089df384e7c</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, glop::LinearProgram *linear_program, glop::LPSolver *lp_solver, std::vector&lt; int64 &gt; *cumul_values)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension *</type>
      <name>dimension</name>
      <anchorfile>classoperations__research_1_1DimensionCumulOptimizerCore.html</anchorfile>
      <anchor>a0e80b6dfc017f25d413603e7aeda52ea</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DisjunctiveConstraint</name>
    <filename>classoperations__research_1_1DisjunctiveConstraint.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>DisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a204df98d042e4eb2954aea4563a950e9</anchor>
      <arglist>(Solver *const s, const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>adc7d8ad50b0d9c98c59f7f9c3f6bda6c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SequenceVar *</type>
      <name>MakeSequenceVar</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a4b4ead77ac71b5c23fc1dc2871407d8d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransitionTime</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>af80d78dab69e2420e5df2acd13be698e</anchor>
      <arglist>(Solver::IndexEvaluator2 transition_time)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>TransitionTime</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a8fa126c7081c99d91c347cb82ab16326</anchor>
      <arglist>(int before_index, int after_index)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>nexts</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>aacb295c42edd50d5fc0dc3f009fb0a81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>actives</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>ae2b4ffa19747b4205f3dff8e91424e1c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>time_cumuls</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a487094cee9f08d7d6d7f4e8642d0579d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>time_slacks</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a125375a3e7f2593d1934d1b2f1a928e9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>aaa882d58b5fc0f2e3df6eff957ad4a0d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a64ab23714e57db311ba5b9fe1e742979</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; IntervalVar * &gt;</type>
      <name>intervals_</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>ac51ca0d886882db6afc2814bb91d4f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Solver::IndexEvaluator2</type>
      <name>transition_time_</name>
      <anchorfile>classoperations__research_1_1DisjunctiveConstraint.html</anchorfile>
      <anchor>a9b6d60ebdbacdb0e3910b3c9ccd4d1fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::DisjunctivePropagator</name>
    <filename>classoperations__research_1_1DisjunctivePropagator.html</filename>
    <class kind="struct">operations_research::DisjunctivePropagator::Tasks</class>
    <member kind="function">
      <type>bool</type>
      <name>Propagate</name>
      <anchorfile>classoperations__research_1_1DisjunctivePropagator.html</anchorfile>
      <anchor>a4bca695f28fc3739d74ac6ca2c93221b</anchor>
      <arglist>(Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Precedences</name>
      <anchorfile>classoperations__research_1_1DisjunctivePropagator.html</anchorfile>
      <anchor>a10aa87697d8041fa4a1083dc648750f7</anchor>
      <arglist>(Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MirrorTasks</name>
      <anchorfile>classoperations__research_1_1DisjunctivePropagator.html</anchorfile>
      <anchor>ac392b9ff00285a5ef98286c35dd7aab3</anchor>
      <arglist>(Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EdgeFinding</name>
      <anchorfile>classoperations__research_1_1DisjunctivePropagator.html</anchorfile>
      <anchor>aee4e422de7210b61627750d3937df615</anchor>
      <arglist>(Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DetectablePrecedencesWithChain</name>
      <anchorfile>classoperations__research_1_1DisjunctivePropagator.html</anchorfile>
      <anchor>a2ecf539942f15611e7cafe1fb3a757fe</anchor>
      <arglist>(Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForbiddenIntervals</name>
      <anchorfile>classoperations__research_1_1DisjunctivePropagator.html</anchorfile>
      <anchor>a8229b22f70a1667de00db67f10f9b1e8</anchor>
      <arglist>(Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DistanceDuration</name>
      <anchorfile>classoperations__research_1_1DisjunctivePropagator.html</anchorfile>
      <anchor>a86de3b4833fec686a2d02a3b221fcd7b</anchor>
      <arglist>(Tasks *tasks)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::EvaluatorCheapestAdditionFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1EvaluatorCheapestAdditionFilteredDecisionBuilder.html</filename>
    <base>operations_research::CheapestAdditionFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>EvaluatorCheapestAdditionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1EvaluatorCheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac648768e5deabe13beb7c84b96bf2f73</anchor>
      <arglist>(RoutingModel *model, std::function&lt; int64(int64, int64)&gt; evaluator, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EvaluatorCheapestAdditionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1EvaluatorCheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9fd569bcfc61c02187de1afcd2494b2e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1EvaluatorCheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aff3956d65c1486c9bdab3fd850dbb5a6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1CheapestAdditionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9c66b9184f757e7acd1bda8873b766d2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ExchangeSubtrip</name>
    <filename>classoperations__research_1_1ExchangeSubtrip.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>ExchangeSubtrip</name>
      <anchorfile>classoperations__research_1_1ExchangeSubtrip.html</anchorfile>
      <anchor>aa24b9ac35f954edf920ba0ff049ce31d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ExchangeSubtrip.html</anchorfile>
      <anchor>a66dd3883a571b730fec9c047711e9635</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1ExchangeSubtrip.html</anchorfile>
      <anchor>a4f48364ef4d882276af33968d534fc4a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::FirstSolutionStrategy</name>
    <filename>classoperations__research_1_1FirstSolutionStrategy.html</filename>
    <member kind="typedef">
      <type>FirstSolutionStrategy_Value</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>abe2a56ed3c47bfc45ee4ef4303de4429</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FirstSolutionStrategy</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ab618f6a838711a7a8af9c6bf8dbb7d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstSolutionStrategy</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a018fb433e961f3e00719af48f867623d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FirstSolutionStrategy</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ae595f03a4b811e022abfced5b2037469</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FirstSolutionStrategy</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ac64021feef4b649b35285abe3640a79c</anchor>
      <arglist>(FirstSolutionStrategy &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FirstSolutionStrategy &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a2a67478ad16aea717eb397622f72e31f</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>FirstSolutionStrategy &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a1a1b0f411bed6edaeccf8ac130c9c360</anchor>
      <arglist>(FirstSolutionStrategy &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>aefbbafa3e99028a31e08fd5d3a494fec</anchor>
      <arglist>(FirstSolutionStrategy *other)</arglist>
    </member>
    <member kind="function">
      <type>FirstSolutionStrategy *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a914db9e5b7cfe19f49e2fb32316a028d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>FirstSolutionStrategy *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ab77c251e3e1c947a00a37e44dfb136ce</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ac8b31759a3ec7cd3f18f6144549e9698</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>af68ebbc1e89b706395596c5582362758</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a72c04e8248c815ea89b8203d0999117a</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a10b773b40ede34691e200cf01c0fb62e</anchor>
      <arglist>(const FirstSolutionStrategy &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a1d608f3ed09a86064f76d7c3d247df30</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a21c86e64b742a650565126087abe1d96</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a282abd9d82c831d9d34bac8cdc76f9b0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a0d9f206d54176dea109e620044dc7702</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>abeb27617f605bb48b78a0f91cf14bc15</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>abb1d57a5708ebc2b8219c83f47df6374</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>af0ef09ba2a23cb38accf4d6873d444b1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a4e11066b077f871567503b5d2fe19ded</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a6c4424dd0040e94f2bf4e85cd0d9300e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>GetDescriptor</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a69486649596a38ed478c8d3896822000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Reflection *</type>
      <name>GetReflection</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a9a67922ac76920430eb2421836908e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FirstSolutionStrategy &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a7735c7c04a8475800484e83ca5ef64d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>af6c474491ed5f187d781f197d6877334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FirstSolutionStrategy *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>adbeae77c2a71e73a5b38cc92994722db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_IsValid</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>af79999e7536052ddcef47815d5e27e9f</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *</type>
      <name>Value_descriptor</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a7c0b7f460246b34af182532a8f23522a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Value_Name</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ae77f2f518c9658bc9235e6172848a2ab</anchor>
      <arglist>(T enum_t_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_Parse</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a3b8efc2b7d690ed0ac9f99cb5b5c29d9</anchor>
      <arglist>(const std::string &amp;name, Value *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a16c6dfc86c75ac63032a6422060a267f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>UNSET</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a4dd41549233ec9fb7c61080b6e6ce0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>AUTOMATIC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a5477cce7c4179d9e7b90648f83fb42cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>PATH_CHEAPEST_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a72c366179254099966e64aeeccb80d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>PATH_MOST_CONSTRAINED_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a088f1250db7d5489fef5423dbdb1f852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>EVALUATOR_STRATEGY</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ab24f892b8513fd6a44b2e736cf5ebccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>SAVINGS</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>afade5e1b09e5eefccae67c7e1ace4799</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>SWEEP</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ad4a38e7277e3fb0557479e078a560d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>CHRISTOFIDES</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a810785d1c4e24d8d9f8ffa244510dbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>ALL_UNPERFORMED</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>adf4baca2e1ec52b240ef4a81222e9ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>BEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>adc58d693df6846a100517f16dcbb1976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>PARALLEL_CHEAPEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>afc186ca926ad9f46441f9f49bf0d33a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>SEQUENTIAL_CHEAPEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a679ed57a30eb39c43e4befed054875aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>LOCAL_CHEAPEST_INSERTION</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a51944b51cacedda16b4ffb5b7b8545da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>GLOBAL_CHEAPEST_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>aec1a079bc829458d3f925a1383a82721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>LOCAL_CHEAPEST_ARC</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a820abc949104ddc53240f345f70c5436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>FIRST_UNBOUND_MIN_VALUE</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>aa26bba1c9225cdb253618d62246feec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>Value_MIN</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a152b7935166a40ff6d4882c9d8dfd05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>Value_MAX</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a5df12367741c438c09f1317f878558e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>Value_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a7ab811620a1448e7d5817937aa63db53</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>a9b35d94da3444084fc3673b7717b6cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ada67e3eb964f85aa7e57c01e29ea271a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1FirstSolutionStrategy.html</anchorfile>
      <anchor>ab09287832344e79e83b447f9524c6136</anchor>
      <arglist>(FirstSolutionStrategy &amp;a, FirstSolutionStrategy &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::GlobalCheapestInsertionFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1GlobalCheapestInsertionFilteredDecisionBuilder.html</filename>
    <base>operations_research::CheapestInsertionFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>GlobalCheapestInsertionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1GlobalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a7e584844f1b0ffd02544567c8dd75b9b</anchor>
      <arglist>(RoutingModel *model, std::function&lt; int64(int64, int64, int64)&gt; evaluator, std::function&lt; int64(int64)&gt; penalty_evaluator, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters, bool is_sequential, double farthest_seeds_ratio, double neighbors_ratio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalCheapestInsertionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1GlobalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a710c18c0e9b05abca5bacf99e2129bb0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1GlobalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3a5bd7cb817b77fcba764ec7ddd71cfb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1GlobalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a396d1d7fcc6b3b71cdb07105867b83cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int64, int64 &gt;</type>
      <name>ValuedPosition</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a73c8cc48a3a48935344dcf67fe760d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; StartEndValue, int &gt;</type>
      <name>Seed</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aa3d22767523969477c21a15afd777ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::vector&lt; StartEndValue &gt; &gt;</type>
      <name>ComputeStartEndDistanceForVehicles</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aefb129b85e384ae8dd93914fb86720e1</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vehicles)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializePriorityQueue</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a376f8042e03bc87789d0b0c472f9babe</anchor>
      <arglist>(std::vector&lt; std::vector&lt; StartEndValue &gt; &gt; *start_end_distances_per_node, Queue *priority_queue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InsertBetween</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3b0ce19f4831cb84532fef386f434b68</anchor>
      <arglist>(int64 node, int64 predecessor, int64 successor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AppendEvaluatedPositionsAfter</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a98354fb58cafe2444a25feeb691191d5</anchor>
      <arglist>(int64 node_to_insert, int64 start, int64 next_after_start, int64 vehicle, std::vector&lt; ValuedPosition &gt; *valued_positions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetUnperformedValue</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>abb5c3583fb3e234773e83c3a008cac9a</anchor>
      <arglist>(int64 node_to_insert) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; int64(int64, int64, int64)&gt;</type>
      <name>evaluator_</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab35d04181a231cbc77193b2bd8101aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>penalty_evaluator_</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad9d981960cfd68cb2181e0072039e8fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::GlobalDimensionCumulOptimizer</name>
    <filename>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalDimensionCumulOptimizer</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a7aef4229a23f8e4527a1abdd40792a60</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeCumulCostWithoutFixedTransits</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a58e57b4acd1b8657912b8cb08a52a6ba</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, int64 *optimal_cost_without_transits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeCumuls</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>ae661c23f8b98bdcf659aba760638a965</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *optimal_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFeasible</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>ac584fa126a3b1b582bd918a516b489f9</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputePackedCumuls</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a4609e630ca9d2d7340a338a957d44e61</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *packed_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension *</type>
      <name>dimension</name>
      <anchorfile>classoperations__research_1_1GlobalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a64246ca0403f93006288ead58dfb0d36</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::GlobalVehicleBreaksConstraint</name>
    <filename>classoperations__research_1_1GlobalVehicleBreaksConstraint.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>GlobalVehicleBreaksConstraint</name>
      <anchorfile>classoperations__research_1_1GlobalVehicleBreaksConstraint.html</anchorfile>
      <anchor>a3957f596b49f98c7ea8e39d28b95f4f8</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1GlobalVehicleBreaksConstraint.html</anchorfile>
      <anchor>a9228a638a979284394f90c004a1b37fa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1GlobalVehicleBreaksConstraint.html</anchorfile>
      <anchor>a8e1a06d00ced8b302406376235cd2c98</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IndexPairSwapActiveOperator</name>
    <filename>classoperations__research_1_1IndexPairSwapActiveOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>IndexPairSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a871622f2ed4fb5b000554d53c4b864a8</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndexPairSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a2041fde203c51b80a7bc63fea9b1d969</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a11a3a2e7cea2b5b5197b9a17a71dc075</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>a3a0df60af89ee61a1bb0a214214e5ac1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IndexPairSwapActiveOperator.html</anchorfile>
      <anchor>ad9fef9a1ded161855e9c130bd1019b98</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::InitAndGetValues</name>
    <filename>classoperations__research_1_1InitAndGetValues.html</filename>
    <class kind="struct">operations_research::InitAndGetValues::Iterator</class>
    <member kind="function">
      <type></type>
      <name>InitAndGetValues</name>
      <anchorfile>classoperations__research_1_1InitAndGetValues.html</anchorfile>
      <anchor>abb257dd5cc47ff82a1be987c6f0614c7</anchor>
      <arglist>(IntVarIterator *it)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1InitAndGetValues.html</anchorfile>
      <anchor>ac8c498a96d19ebb98b44b68b8f6820e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1InitAndGetValues.html</anchorfile>
      <anchor>a56ec665aa9b3314c60e52ab26e8f9fc6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::Solver::IntegerCastInfo</name>
    <filename>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegerCastInfo</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>a4829cf800cd883bd0670163ef47da7cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerCastInfo</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>acb3e9a713650dd8adf2ccd35f54f49dc</anchor>
      <arglist>(IntVar *const v, IntExpr *const e, Constraint *const c)</arglist>
    </member>
    <member kind="variable">
      <type>IntVar *</type>
      <name>variable</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>a4ddfd15e19f82e34ba4a6ef321ee0cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntExpr *</type>
      <name>expression</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>a93bf7638f82b52965834ad94286161c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Constraint *</type>
      <name>maintainer</name>
      <anchorfile>structoperations__research_1_1Solver_1_1IntegerCastInfo.html</anchorfile>
      <anchor>ae16e463040462ec79e67106d639789a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntervalVar</name>
    <filename>classoperations__research_1_1IntervalVar.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>IntervalVar</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aeb43b24cad9ab5cae8741d69e1c6c9e0</anchor>
      <arglist>(Solver *const solver, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntervalVar</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a5416b468bd7fa583482aa3a5affe906c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>StartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>acf6f5c6a44c14d6197701c450457d5bf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>StartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a627e898b1125c5dd6a2fb41551d2af5f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aee80fc5cd33bc3ea9d99ec892ad9d610</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a9b5eb53cf394f0ba2c29332b7f9d60d4</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aa4372845801e7c83acbdfc7fa59d2fb2</anchor>
      <arglist>(int64 mi, int64 ma)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldStartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a2774c028f0464596c6767565cee80ff0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldStartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aaca17b1e75c4e46f2efb5973e470561e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aa109772cea3713098a40a645509f7566</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a7e7c95e3ec16dc6bcb54997bde754620</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>abaebc975bdd1226b8cca61b566d19fb3</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenStartBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ab5842069b663df27c9b6b86dd2033025</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aa979715aea2878211bcf0b1db4c62793</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenStartBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a12f7a9d665836a2f5b0c1ae5ea6bfde0</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>DurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a23709f68a0b309e7ba3329c0e4775d07</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>DurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a11247af5621b85588f22a7948ad25ed0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ac074bf0a3f7086df10faa9bca6a42004</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a34c44801edcbe3195f161f7769d1cb0a</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a9bfcdbd186adf792ef57bac57a3809b0</anchor>
      <arglist>(int64 mi, int64 ma)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldDurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a5d83388a399fb4f4e44e4054d1fda341</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldDurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a097e1714e012247ef87ba3cb18297609</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af95b1b5fb7a1ff5818d7eabaafdf8408</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad5216b1374b28aefa97ec71dd2938d91</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a2579d6d4646bfa4b5125283fcc03414a</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenDurationBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a6f2f9c44d5e8efa05a0c142310fbcd71</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad2a1dd4393008af0667d4101826f61b7</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDurationBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ab3b3530eb945e58d94d203f2b0d5a79c</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>EndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a337babca836e2eff4e67adb0e141f82d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>EndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af5257fef12cc50e0551dfcddf1ce1b67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aab465f88252c7db74615834bfe9c95fb</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>add69e5d253a42a328478f6797711abda</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a0020fd38cc76fc9c2ad20ef40e2ab182</anchor>
      <arglist>(int64 mi, int64 ma)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldEndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>afeff6d108db59ec38fad9a2fa144a6a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldEndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af78a648a227858b30ec2a379c0d67fbf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a46f1c758e6201e2606cb3561c16c9e3d</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a7151316c7367456c2bccac197ac78e07</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a9bee30b653a37961c313f8bcb3ffd930</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenEndBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a51aa4ca92209f593a3b458247642987d</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>af244626a5557c4f0addd20548d76fadc</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenEndBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a11d562e27b9c5af69d8425a84ca46af3</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MustBePerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aef9101d29cf50c67521b105947f8fdcd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MayBePerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a8e2f5e7fed94b846d1f53c1ca8e9fa9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CannotBePerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a7240f2caf6bf198514219a78d6dd11f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a1785a9adf70ca36c826a2039f8fb998e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPerformed</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a4c1f66539cdb6258a67e4543a08d8a76</anchor>
      <arglist>(bool val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>WasPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a1deb0c244aeb417d3746d0b12fc17914</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a216609be9e8d0b595ce401ca5c2d86b0</anchor>
      <arglist>(Demon *const d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad226ec1e7d6474e9ceab1048be743eb5</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenPerformedBound</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>aeecdccd02e6618a869a968daaf919d10</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenAnything</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a031d97f0c0940a75d32debe1e7c16c43</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenAnything</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a71e1a2d992370030d20b6d7324b9ca43</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenAnything</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ae606415b9cb84abf4b2a5da2e74e2ec3</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>StartExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad6271b4de12918697520817944165462</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>DurationExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a147203cf742a1daac8b1af0be03b1b92</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>EndExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a0a81be75dfa5f8c28ff444864d255fb1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>PerformedExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a2cd12d6edf03cb5b85cc14536e77a4a5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>SafeStartExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ac14b8b5751c3b224067530d0a82ed56f</anchor>
      <arglist>(int64 unperformed_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>SafeDurationExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a70158d7ac7a7d59a1ca07f3e8656b67c</anchor>
      <arglist>(int64 unperformed_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>SafeEndExpr</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>ad27a5fbdd24135dd54498db87feee98e</anchor>
      <arglist>(int64 unperformed_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a4a625f0d15b94c92546d05bee7c8b554</anchor>
      <arglist>(ModelVisitor *const visitor) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64</type>
      <name>kMinValidValue</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a052180d41b28201b81b1c1695f65bcca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64</type>
      <name>kMaxValidValue</name>
      <anchorfile>classoperations__research_1_1IntervalVar.html</anchorfile>
      <anchor>a081aea5d03ea8531476f5e51174b3d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntervalVarElement</name>
    <filename>classoperations__research_1_1IntervalVarElement.html</filename>
    <base>operations_research::AssignmentElement</base>
    <member kind="function">
      <type></type>
      <name>IntervalVarElement</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9d7357754c1a7c8bfa9cc1af03a3909d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntervalVarElement</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a8ba0b1ec02e7c147d68ebeedd6adff5b</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a3bfef48731f4ef14fead2f6c34f26aa0</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVarElement *</type>
      <name>Clone</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>afe3dbddb20591c19ba69dcaad778f0f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a85c8f2f11b9c5c13eefcc20778340555</anchor>
      <arglist>(const IntervalVarElement &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9f3bd3b96c814e46db080a7870e441be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>aba7b84e96bed12bb02d0c69e702d65f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ae749b38bd428fb00435ada66bd0b13de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadFromProto</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ac7e5aa5ca9abcfa7d8ab76fa081d9d09</anchor>
      <arglist>(const IntervalVarAssignment &amp;interval_var_assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteToProto</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a66b960e2914e177ee0be5c4c9b62f933</anchor>
      <arglist>(IntervalVarAssignment *interval_var_assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>acef5ab6c453ebd47d42f76e326c15290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ac7f4610bf9ddd8a02c4df0e389fda3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a2894c06ec30527c1810666cb9a47bc76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a7d9e6870b3d7d594cbcef37f57b088e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a107e6b7d51fa279dcd5516aff5cd05ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>acd30ddafdc9f5f26a950470d1f3edeed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a036f95ee32fc4ea98e986d6f866cb524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a57a113de1e0491feccba9b08b905a968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9b3e359361ec1c033611c5ae5252e9f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a2a559271f39b8afbd1c292ffa94880ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a0a085373190322c6e03e1a07fe26634f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>ad161fede703fc4b4ebb688b2198a2108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a8133ba700bcd64e1f180a01cc9664bc3</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>aad27176c06a3aa80de553a72014346d4</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9b887d862bb4540be60a9f4c726854b7</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>afb060e70086680308813304d51bd2160</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a0b9ab438454cb14dcaf13085d853a8a6</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a2b51c61059210e6b8a6f3bbde76b53b1</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a5cf2a7affce14a52c72a234f9623ca2b</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDurationValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a0a5d158cc83a4b454daad3d2925d4d38</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a63fec77c7b642a175000409de73b6374</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a14813a4a823ce91c390aff2477cbb435</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a8fadec579649e0012765f94d99eaf598</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a9faf5408c656a03df7409463db6e97a3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMin</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a65d8115573c692d5ff5afc12748ea592</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedMax</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a4972b271ad222d388f9bf89ad5db017e</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedRange</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a31c0e8c0739a67e401a41b93ce0cf055</anchor>
      <arglist>(int64 mi, int64 ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPerformedValue</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>af46311d9a91a9c985ed30bb560c5353b</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a20ff4a7e8f872abc11d9c0a619f8c671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a4aa969469e93c0b17054adb0072afae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>aaccf9ecedf3ef182e9d293c7561b9ff8</anchor>
      <arglist>(const IntervalVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1IntervalVarElement.html</anchorfile>
      <anchor>a80614d155acba1d61ff322283c4ce2ca</anchor>
      <arglist>(const IntervalVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntExpr</name>
    <filename>classoperations__research_1_1IntExpr.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>IntExpr</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>ad8abff4968e302f6a8576a4bdce52a8b</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntExpr</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6efc4d555955044d64aca04be757e367</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a58d589131cbea30d4826248a2fa06aba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>afec5a6eea8ee64fbc7fa34d7d28f8d8f</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1fb9e08cff06a9a5b5739de4acba587c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>adee9a082160df545671781df47f2b985</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a153843dc05670b540a8e83dba2043eb0</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a13e126985026936fe8da212d2e377236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4bb288e8b397020398b1184047587f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a751d151bfe120bc6d378c4570505cbd4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a845a3c3c71323504f6b59f9c0ea46b08</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>aa573e0d34def6539f939b4b81d506164</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVar</name>
    <filename>classoperations__research_1_1IntVar.html</filename>
    <base>operations_research::IntExpr</base>
    <member kind="function">
      <type></type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a119cae716dbbdaa31b476ef904c99776</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a3800e8fb44e2b416b52a770d2bc74f31</anchor>
      <arglist>(Solver *const s, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ab6acebb20eb1a885ca1313d759db0bdb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVar</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a1e8732e1343228cbe86db9c986aa48d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ac65d53711c52b0988b7e8fb81e79aeb9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ab84b786a2128f72fc720ae611e880499</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveValue</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>afa4460e0dd9745ad24b99d08d853f3a4</anchor>
      <arglist>(int64 v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveInterval</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a3316193a23988b72bd52ada02859efb0</anchor>
      <arglist>(int64 l, int64 u)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RemoveValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ade36b093f22913a40c24d37575c28f38</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValues</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a9b3717393d801dc1ca5ce32e55a73622</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a1501b060a0ae4f2ae77d8008479944ca</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a7b77bca97b9e8c80757ce1f8d3f985a6</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenBound</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a5ed044357d490a6a2fd91b6bc180039e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a16770c4e77b7c3bae7f706661aae94fb</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a8540cc984d3c888633b4a741e052260d</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenDomain</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a549ce691c8ea0477891f7caf86d8ab37</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint64</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a26efd8a51314b318dc14641e90af5c3a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a6e297b67956343bed8a4aece6a2c88a3</anchor>
      <arglist>(int64 v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVarIterator *</type>
      <name>MakeHoleIterator</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a68e475702b2e14bf968256ec36cccad7</anchor>
      <arglist>(bool reversible) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVarIterator *</type>
      <name>MakeDomainIterator</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>ad371f5411c3f0aa0424181fc9936a2fb</anchor>
      <arglist>(bool reversible) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMin</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a894ecb1c102fa7fca59661a215f14d50</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>OldMax</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a619ac58213bbff56398934e76dd1079f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>VarType</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a53bfcce0b60a6c491992811a8453aa86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a6d8841341ab21ef119c0b7df02785a48</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsEqual</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>adf461eaaf6bcf01239e77fa8ed407ff0</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsDifferent</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a791449c48c24075f82b47848038b5ffd</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a4566c3b4fe20baa14354525be9b31bca</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVar *</type>
      <name>IsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>af5197b4635e1581a9bdecdfba44d2428</anchor>
      <arglist>(int64 constant)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classoperations__research_1_1IntVar.html</anchorfile>
      <anchor>a49fb18ac443f329969336d1d685269ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a58d589131cbea30d4826248a2fa06aba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>afec5a6eea8ee64fbc7fa34d7d28f8d8f</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1fb9e08cff06a9a5b5739de4acba587c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>adee9a082160df545671781df47f2b985</anchor>
      <arglist>(int64 m)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Range</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a07b522d73ebcc17ebc1b480d181627f1</anchor>
      <arglist>(int64 *l, int64 *u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a153843dc05670b540a8e83dba2043eb0</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a8889930ed76665b0f24f12df2ed4e05c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a13e126985026936fe8da212d2e377236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VarWithName</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a1de04a321f16e9cdc50bbec78e1adbf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a845a3c3c71323504f6b59f9c0ea46b08</anchor>
      <arglist>(Demon *d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a4b35ce14dbdbd3df0d20af5b708288f8</anchor>
      <arglist>(Solver::Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhenRange</name>
      <anchorfile>classoperations__research_1_1IntExpr.html</anchorfile>
      <anchor>a6d21b7e60b50a18a1591de348da6563e</anchor>
      <arglist>(Solver::Action action)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarElement</name>
    <filename>classoperations__research_1_1IntVarElement.html</filename>
    <base>operations_research::AssignmentElement</base>
    <member kind="function">
      <type></type>
      <name>IntVarElement</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a7c4b5dea7c81f6ffeeab2d8144a1c7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVarElement</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a2371c903204dc30259c9d4ba1fe728dc</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>aee7b64f549193b551ca2cdcc5230e37d</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntVarElement *</type>
      <name>Clone</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a86c83c81ce35a6100adf1790419977ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>ab75541e5c6fe6f193f5cf94d8b12f5a4</anchor>
      <arglist>(const IntVarElement &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a42e51fe336885a70673cbd4f473790b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a8e83db9b01afab0172f195f110406008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a11ad56c03b156e52ac092191a81d278e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadFromProto</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>aea590b57d46c0ca3aca92adc3ce82b3a</anchor>
      <arglist>(const IntVarAssignment &amp;int_var_assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteToProto</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>abdc5b135e3b0c58d93a2beeb6c46791b</anchor>
      <arglist>(IntVarAssignment *int_var_assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Min</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a1295db3bf37f2183eb7a466f6b1207fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a5377e53fa0dc99d944ecc88e20e5f130</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Max</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>aea2fc7d2679592fdd9e07b2ae8fb58f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>adee444dbad18f8db71cbe93e54678f85</anchor>
      <arglist>(int64 m)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a015a145792a6224c450259afe9d0b035</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a4205abd38e203b570f9ff6b49d351a06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a8d25f09aa43ef6ea5fe8dd622f6552b2</anchor>
      <arglist>(int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>ab5fde53ca39720061f5684e7d472cdd3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a9683993188d5a63cad067a6a1891aaa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a3dd7107f6d77ddb44ebf38053b72137e</anchor>
      <arglist>(const IntVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1IntVarElement.html</anchorfile>
      <anchor>a65504db21d71ae343eeb6371555a15fa</anchor>
      <arglist>(const IntVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</filename>
    <base>operations_research::DecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>IntVarFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a29ad8fa5f3cdac39af912fc685bb4f23</anchor>
      <arglist>(Solver *solver, const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntVarFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad9bb58c3bc903db60f42c88ae7870bee</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>af80ac7c7333a0515de2155c463c4344e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aca201d99227a6116c62418d28761aa9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitializeSolution</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aafbdefa5e5f84e8ca15523becd6c4ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6ae15b5268df7520ab2a6d756b72e9fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarIterator</name>
    <filename>classoperations__research_1_1IntVarIterator.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>~IntVarIterator</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a85fb1088ff1184b4cb867259ee512fc5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>ac5e717b4d80a83e797fd6f996f040f8c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Ok</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a35ab3d4e05e41e87312043b3fbb803f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a8cd71554efc9460ca2319bbe79574ffa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>a7d3ca63d1636290367162ad3fb4f5157</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1IntVarIterator.html</anchorfile>
      <anchor>afcbc1c1ac6f9230d7037807d3dbd46dc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarLocalSearchFilter</name>
    <filename>classoperations__research_1_1IntVarLocalSearchFilter.html</filename>
    <base>operations_research::LocalSearchFilter</base>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchFilter</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a33d3db6e4d679ffd068c6b2e1db24d2b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, Solver::ObjectiveWatcher objective_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchFilter</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a018a1764ca1b31a76a7afdb26a6d7d83</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntVarLocalSearchFilter</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>afb8bb79f08d6e1ebf866a635c5306fed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>af551c2cc4bd9dc8eca5c1aba2ea0cf1a</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindIndex</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a4ff8f64bad58d06ddf1e1fa16b52fefc</anchor>
      <arglist>(IntVar *const var, int64 *index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InjectObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>abeca74f43d73826093a3e288a633d7a2</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a78c80d2accf5a4506e3436081d365a34</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a29acf74cf99f603af9c73f5a994b48f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a5c85a90b191d5aae9ab29cf1e28ff878</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>afd72fb787ed7167fc9d959deb1286931</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVarSynced</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>add26b0145e2f0ba25dcda0e1565164db</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa5af8381f70af857a1a7927e3f6e695f</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a58392212e951aafc3a6ba400d8816790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa3934bba1ec84e9c9b401693b43c662a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a7a34da518a80fbaeccb2fde10f2fbd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnSynchronize</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a4cb6f372e557b64b09764d17c3006f86</anchor>
      <arglist>(const Assignment *delta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SynchronizeOnAssignment</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a6371c48182d86ebf963536f1600ed058</anchor>
      <arglist>(const Assignment *assignment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CanPropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>ab18158620c5618ea05b55ebd92817e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PropagateObjectiveValue</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a90700139ec246bb2afe40edd0afb5dd9</anchor>
      <arglist>(int64 objective_value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>injected_objective_value_</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchFilter.html</anchorfile>
      <anchor>a7b9afa3c307211ca15b6ea364f01e2a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarLocalSearchHandler</name>
    <filename>classoperations__research_1_1IntVarLocalSearchHandler.html</filename>
    <member kind="function">
      <type>void</type>
      <name>AddToAssignment</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>a391779603709ca85766ac2b5b657135c</anchor>
      <arglist>(IntVar *var, int64 value, bool active, std::vector&lt; int &gt; *assignment_indices, int64 index, Assignment *assignment) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValueFromAssignent</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>ade33ac8f982908c4a8bd12a5915566fd</anchor>
      <arglist>(const Assignment &amp;assignment, IntVar *var, int64 index, int64 *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnRevertChanges</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>ad22f3b6825860cb91f8e7d06500dce0e</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnAddVars</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchHandler.html</anchorfile>
      <anchor>afa971621f2fd9abc62706d2c7abb362e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::IntVarLocalSearchOperator</name>
    <filename>classoperations__research_1_1IntVarLocalSearchOperator.html</filename>
    <base>VarLocalSearchOperator&lt; IntVar, int64, IntVarLocalSearchHandler &gt;</base>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a1981dffba9e0458f5bd4669a5f1c15e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a350fc4d7f2ce8b649d6d2a51333614b2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>aeb4e7fbf8ef821b20e481ae46fc5b5ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a821c7457813d5411b11e6bbfce63f47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>is_proto_enum&lt; ::operations_research::FirstSolutionStrategy_Value &gt;</name>
    <filename>structis__proto__enum_3_01_1_1operations__research_1_1FirstSolutionStrategy__Value_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>is_proto_enum&lt; ::operations_research::LocalSearchMetaheuristic_Value &gt;</name>
    <filename>structis__proto__enum_3_01_1_1operations__research_1_1LocalSearchMetaheuristic__Value_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>operations_research::SimpleRevFIFO::Iterator</name>
    <filename>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>a542b5ed50647b660b9d87debcfaf5380</anchor>
      <arglist>(const SimpleRevFIFO&lt; T &gt; *l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>a5879787922a77847c50b3772435439d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator *</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>af82c38a0630f56ccc4888212bd0dd2f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO_1_1Iterator.html</anchorfile>
      <anchor>a39b457178436af1a0baf7bdda6c75c10</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::InitAndGetValues::Iterator</name>
    <filename>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</filename>
    <member kind="function">
      <type>int64</type>
      <name>operator *</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>ad89645a8a6fb3eeb636b0ae211ae0ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a6e4d3225cd724e3e121cdd74dd845d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a3122703d46de6eace75a3de40c92aba5</anchor>
      <arglist>(const Iterator &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>Begin</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a62a83485399dc0c4539d8791eb22673b</anchor>
      <arglist>(IntVarIterator *it)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>End</name>
      <anchorfile>structoperations__research_1_1InitAndGetValues_1_1Iterator.html</anchorfile>
      <anchor>a0b89b39be2a5dbfe5f830521cff2e4bf</anchor>
      <arglist>(IntVarIterator *it)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LightPairRelocateOperator</name>
    <filename>classoperations__research_1_1LightPairRelocateOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>LightPairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>ac3616bf4f782e616f0db3cf17db413c9</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LightPairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>afb5dbb221368af95c0d0c5db3e21e4ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>ab5a8f9eadcc60ebb142f301ad0206f45</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1LightPairRelocateOperator.html</anchorfile>
      <anchor>a748f7ffb28521cbf984314b0976ea88e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalCheapestInsertionFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1LocalCheapestInsertionFilteredDecisionBuilder.html</filename>
    <base>operations_research::CheapestInsertionFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>LocalCheapestInsertionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1LocalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad636e48c7b76ce858570e663dc1b07f0</anchor>
      <arglist>(RoutingModel *model, std::function&lt; int64(int64, int64, int64)&gt; evaluator, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalCheapestInsertionFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1LocalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a98d4760c6532935fef0e45b46618ef1d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1LocalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a1637389906444da0951928021b6c9a51</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1LocalCheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>af623caea58c368f9b6bd5c3c7cca4e01</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int64, int64 &gt;</type>
      <name>ValuedPosition</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a73c8cc48a3a48935344dcf67fe760d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; StartEndValue, int &gt;</type>
      <name>Seed</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aa3d22767523969477c21a15afd777ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::vector&lt; StartEndValue &gt; &gt;</type>
      <name>ComputeStartEndDistanceForVehicles</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>aefb129b85e384ae8dd93914fb86720e1</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vehicles)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializePriorityQueue</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a376f8042e03bc87789d0b0c472f9babe</anchor>
      <arglist>(std::vector&lt; std::vector&lt; StartEndValue &gt; &gt; *start_end_distances_per_node, Queue *priority_queue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InsertBetween</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3b0ce19f4831cb84532fef386f434b68</anchor>
      <arglist>(int64 node, int64 predecessor, int64 successor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AppendEvaluatedPositionsAfter</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>a98354fb58cafe2444a25feeb691191d5</anchor>
      <arglist>(int64 node_to_insert, int64 start, int64 next_after_start, int64 vehicle, std::vector&lt; ValuedPosition &gt; *valued_positions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetUnperformedValue</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>abb5c3583fb3e234773e83c3a008cac9a</anchor>
      <arglist>(int64 node_to_insert) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; int64(int64, int64, int64)&gt;</type>
      <name>evaluator_</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab35d04181a231cbc77193b2bd8101aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>penalty_evaluator_</name>
      <anchorfile>classoperations__research_1_1CheapestInsertionFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad9d981960cfd68cb2181e0072039e8fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalDimensionCumulOptimizer</name>
    <filename>classoperations__research_1_1LocalDimensionCumulOptimizer.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalDimensionCumulOptimizer</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>ac4fce7a68e479fab75cf1d5e161d75df</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeRouteCumulCost</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a61efb881f6d454c92969b636860c3ec0</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, int64 *optimal_cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeRouteCumulCostWithoutFixedTransits</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a17d5586b9cbc444067c85f3a664edc94</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, int64 *optimal_cost_without_transits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeRouteCumuls</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>aac604b6944a3226c09b8227cfcd95e41</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *optimal_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputePackedRouteCumuls</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a80bde55511799f3e2b2e3d82c92b1514</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor, std::vector&lt; int64 &gt; *packed_cumuls)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension *</type>
      <name>dimension</name>
      <anchorfile>classoperations__research_1_1LocalDimensionCumulOptimizer.html</anchorfile>
      <anchor>a9771b7daec71c086f027561e905a447e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchFilter</name>
    <filename>classoperations__research_1_1LocalSearchFilter.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa5af8381f70af857a1a7927e3f6e695f</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>ac3893c2931854f86757c29ff7e143cf2</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a58392212e951aafc3a6ba400d8816790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>aa3934bba1ec84e9c9b401693b43c662a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilter.html</anchorfile>
      <anchor>a7a34da518a80fbaeccb2fde10f2fbd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchFilterManager</name>
    <filename>classoperations__research_1_1LocalSearchFilterManager.html</filename>
    <base>operations_research::LocalSearchFilter</base>
    <member kind="function">
      <type></type>
      <name>LocalSearchFilterManager</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a24980b170291a5f2dff5d587ef7cd6de</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters, IntVar *objective)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a92e302e76f3c9a4033c390cbd2be9c48</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a15197a5499227e3f214d62689311a5c1</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Synchronize</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a4d764b8986da01084d2a72d5647f55fa</anchor>
      <arglist>(const Assignment *assignment, const Assignment *delta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a0654f6b8fd7014e71e8e8f2a7bc03a23</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetSynchronizedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>a863e8eb7f31ead91695680c40817e0be</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetAcceptedObjectiveValue</name>
      <anchorfile>classoperations__research_1_1LocalSearchFilterManager.html</anchorfile>
      <anchor>abda6fc666fdc0a5ed2c7beb64298aec8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchMetaheuristic</name>
    <filename>classoperations__research_1_1LocalSearchMetaheuristic.html</filename>
    <member kind="typedef">
      <type>LocalSearchMetaheuristic_Value</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a5d4697b27f6321581fb9c188b6030ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalSearchMetaheuristic</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a2ad92683411ff47b172dbbb2ad7990b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalSearchMetaheuristic</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a0658d095b2b9bfc00e9b62ce3c45e006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalSearchMetaheuristic</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a4b0a436069a6a1c349af65509395c7aa</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalSearchMetaheuristic</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ab852b901ede55036ed7a2939d847fb62</anchor>
      <arglist>(LocalSearchMetaheuristic &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMetaheuristic &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aaf1586b73fc2e1471ddc41c4b2b70780</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMetaheuristic &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a8a687f292c44e539486afd8558d734cc</anchor>
      <arglist>(LocalSearchMetaheuristic &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>afc40375ec1c1e88c81deaf9e7be8af37</anchor>
      <arglist>(LocalSearchMetaheuristic *other)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMetaheuristic *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa037866b3ed4fbeffc885ee78d6d5d92</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMetaheuristic *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>acbb0511179a981e4308d8488d6726c48</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a96c25b8ac9b60518dc51ae012d52417f</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a56af304d61e223827b27357aa897eb1a</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a087f089c7d7ea9224b57cee0ea909ecc</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>af14f701f5deb0304960fdee56766f0ac</anchor>
      <arglist>(const LocalSearchMetaheuristic &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a4250b5db76bd00a90377f3c05bae976a</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa4b4ac3b1a0934cdcf5c8c70fcf84bc8</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa1c430208dba52b2135f331da328c9ab</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a7876ca825c90874e60ddb26e01008448</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a29e13296b86f28d93b18de0d873997bd</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a22df175a77b885e035a27c2a264eeafd</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a8fcf45d7af42f8ac098626eb728ac229</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a7eb162d73d0902b845deb03cfd33f790</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a4e880532bf698c7d14e124ea1e986ff1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>GetDescriptor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a32b0b437e8eabbffc212f2d4e12f3c6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Reflection *</type>
      <name>GetReflection</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa29560cb8e05e3da8beccaa2adbcbab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalSearchMetaheuristic &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>af9408a6b07ab233da3d84f34b7637c38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a6b185ba9cc88b94a7e6b49b7ac9defd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalSearchMetaheuristic *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aecb02e9d1326dbcf984a413940f27e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_IsValid</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a23cf343ccf97301c98821c12f7f1fc85</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *</type>
      <name>Value_descriptor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a3eb0ee6d02104002fab0c720ba9e8229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Value_Name</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ac4385ffd8cd51378b9926e7efd1aef10</anchor>
      <arglist>(T enum_t_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value_Parse</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a336becbdfb08d3ef2dcb4868397a97ed</anchor>
      <arglist>(const std::string &amp;name, Value *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a5fa09a36f821774167496a10f3c8fa25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>UNSET</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a8060e5f2c6e2f5c10c46458d98bc88c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>AUTOMATIC</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a56d3b180808b004971e40c9dfc0d2085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>GREEDY_DESCENT</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a839adb76638f3fb36fa66f1948157658</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>GUIDED_LOCAL_SEARCH</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>af8f761170b5e74bd9c337ee1f76485f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>SIMULATED_ANNEALING</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aa6d1f00a59bac345005559e1a59ff3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>TABU_SEARCH</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ac2ed27039f87a3cfb988e73982a6feba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>GENERIC_TABU_SEARCH</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>af110c8266b5dc8d40169cad7b29b54ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>Value_MIN</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>aaf14e9678030f9a0935e275a99bde8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Value</type>
      <name>Value_MAX</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ac8c4fea5f99479cbdc4fb8b87111cd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>Value_ARRAYSIZE</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a1e35a020257671a9954df6fc8565c4c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a9b35d94da3444084fc3673b7717b6cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>ada67e3eb964f85aa7e57c01e29ea271a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1LocalSearchMetaheuristic.html</anchorfile>
      <anchor>a5ca2961ffd410bcf6d842a7aef3ea6a2</anchor>
      <arglist>(LocalSearchMetaheuristic &amp;a, LocalSearchMetaheuristic &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchMonitor</name>
    <filename>classoperations__research_1_1LocalSearchMonitor.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>LocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>aa69f2ddc0e76eecc333aa6505f7d6a8e</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a5db8616ae9665eedb10dcb10ce6398ed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>ab47cdaf51e8a28905ab0967a65138adc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginOperatorStart</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a544e3a1c71266408a15f304184cdc179</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndOperatorStart</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a9f953f2de5609fc5cac50f5c023a60b6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginMakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a4e1a9310923c4a0f554cbd4f1474c5e7</anchor>
      <arglist>(const LocalSearchOperator *op)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndMakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>ad39aa970731c1930735482b007593229</anchor>
      <arglist>(const LocalSearchOperator *op, bool neighbor_found, const Assignment *delta, const Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginFilterNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a5914f2ac46a62c31d62a34c12204ca68</anchor>
      <arglist>(const LocalSearchOperator *op)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndFilterNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a95198a0318eb4fe4821323dc1db48301</anchor>
      <arglist>(const LocalSearchOperator *op, bool neighbor_found)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginAcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a3436dabc0ea229c479f937ecb5ec2743</anchor>
      <arglist>(const LocalSearchOperator *op)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndAcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a191dd72e25ead0ee875d41efef583a4c</anchor>
      <arglist>(const LocalSearchOperator *op, bool neighbor_found)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginFiltering</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a7bf1defae00f7c23df28ebb20bf90252</anchor>
      <arglist>(const LocalSearchFilter *filter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndFiltering</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>af840411f140aa38f074efa704f3a94da</anchor>
      <arglist>(const LocalSearchFilter *filter, bool reject)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1LocalSearchMonitor.html</anchorfile>
      <anchor>a6edec376019f48002aa7e57230ceae70</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a705ae4bfa396632c23d65f37793391f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::LocalSearchOperator</name>
    <filename>classoperations__research_1_1LocalSearchOperator.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>LocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>af23505cc80b48f7de0c2e6a8d8424c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a82deb7603d974196eaeee831422b105c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a832fd07f7355d16895841a4735e544c1</anchor>
      <arglist>(const Assignment *assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2288c9bfc7b3d9ad8e06c346c675b2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MakePairActiveOperator</name>
    <filename>classoperations__research_1_1MakePairActiveOperator.html</filename>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>MakePairActiveOperator</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a7eb2cc10b88cc541d4354f95ed5b7f8a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MakePairActiveOperator</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>ad437f158c83867d508073095ec2a0626</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>adf56eeee1f33c11ce6f80d4a881ada31</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a6cdf2d6cd73f281d1d0aff368e551d99</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a0b374cf2ad00b0ae1249ae3f40748c9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a723d92c5b664592897a42cb2d2478e0f</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a54d05bb6495074bd795eeece6f7466a6</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1MakePairActiveOperator.html</anchorfile>
      <anchor>a77e9aa9f4c619b386919b734d6cbda90</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MakePairInactiveOperator</name>
    <filename>classoperations__research_1_1MakePairInactiveOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>MakePairInactiveOperator</name>
      <anchorfile>classoperations__research_1_1MakePairInactiveOperator.html</anchorfile>
      <anchor>af877ae93fa7bf552fdf10703fa74f158</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1MakePairInactiveOperator.html</anchorfile>
      <anchor>a772a3dc510a540342e0e010d7fa6f7ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1MakePairInactiveOperator.html</anchorfile>
      <anchor>aad7e91452b315d47ff25a9873f438316</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::MakeRelocateNeighborsOperator</name>
    <filename>classoperations__research_1_1MakeRelocateNeighborsOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>MakeRelocateNeighborsOperator</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>ad6611b61f8fdb09c8c8f1b14385a667e</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, RoutingTransitCallback2 arc_evaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MakeRelocateNeighborsOperator</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>ae49dc60789eb70b93409c83e13f234ab</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>a68fcef23cc239d8bc9f7864595a05d5e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1MakeRelocateNeighborsOperator.html</anchorfile>
      <anchor>a5e5d6f27a9a11ec5ff0d88fe0e83a003</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ModelCache</name>
    <filename>classoperations__research_1_1ModelCache.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>VoidConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_FALSE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eadb6a8e793cd360bdac363c2cc28eff3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_TRUE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553ea82427a99c279490b35177f9a537031d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eace922fdfd68186ce433188283e779260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a070768a658f3ff974ca3928ba74ead31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a1325f8dfb1c122fad75157edf76fdd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436af1e19fb208252121d68b5a06f1c8dde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a2f285cddde6149d7f54bf5ceb42a1507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a6a27c16438750d35626d77e0b2588308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantConstantConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_BETWEEN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a8f03b508da54bc2d68f497c4c9d95426</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a6c0061e4b925cf5a3de722fc1b91be9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExprConstraintType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3594f5372aa02134e8060cdd91c99673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67aef4ab31c8207abf767182ef91663b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3721dc4e05093d3e1e802ddbdb101701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67ad76121125473074740a1e61a27aa6af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a914126bf00e791e3384e8d5813785346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a6c623439986a9cea3e80432460c0c389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a99f0e2e7864430b3fec6c13d53b637c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_OPPOSITE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a8cd95ada6797e62cf04511d4219385cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_ABS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a7782b9fca0d799fa5e4125772b224dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_SQUARE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a55c17e6da44e8b4a9b46e7a4b5087763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a5c9a61a1c3f6cf314eb068d200e81886</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExprExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aac41f9bc0040a6eff73894bd82bda2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a6e303e884ec01ec1b84089fd41fd22a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIV</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182af8176ab1bd0b50ca74d9f53104e98893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aa825ff62458a4531d5479efa4b7bfb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a2aaf59f9f3047b1e04fc728ea5817ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ae83817b1c367a57ff2cb0aa9e9ca6b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad6df22a4d3d0aec5040f49af2caad49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad0d903e75f8d2b7f0c292cd2c604360f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a55a9764f4b50b1ad6ace9dc27d277abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a7adfc7fcad074742a36a237a0e41d90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a5980bc1e0233fd4590501537964b1ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprExprConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_CONDITIONAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86cca59c45445a5385e9a060da304ed035c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86ccab04c37bc07fbd435e469b329ee258391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExprConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97ac9aed89951381b121380fd1c0d67de2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIVIDE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5b41d2961c84f20eacbdd8ad02a0c209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97afc2095200b81c7b5aacef633ed6b02b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a987387e656e1a5b9759eeeaa7cc6f5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a80274f3b6bedc48f6511ed67204d5830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a132a2efb64d6fb7d9a526ccb38e604be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8fba3e84e405547f4595961b967afa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5bd26b88fc899bf6708f408cef7ff1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8b36e6f0dee5edf71f580d7ce9a1b40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97abfbdd7755935b5fa09c1128522d71bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97af22eb71d40dde50c28f9115078ae76ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eadced5a0895a2cb90a4594fb36fe61849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eaa75358eb802072d41de32a9e809045ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarConstantArrayExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_ELEMENT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cbad208c87e11c0e31e89b56d46820a3854</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cba07c534a9ebc42ee4cc89310f68a508dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarArrayConstantArrayExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea8badb2c8850e8b40e03e6bb6603be49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea400c369e52a35c4f713b334636fdf8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarArrayExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da72be218b7d632156bc7d6925b98f2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da3e0c4c80f4eeb88925a067061ec8fb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da670852bc71348c6af0d026914ad8f925</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185daf8fe9d386f02fb2d2f9137c6ab4d983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarArrayConstantExpressionType</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_INDEX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa5d526900675fe988dd7b32b4adc8655b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa9fbb20e9fd7918d2e660f014abe6521c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_FALSE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eadb6a8e793cd360bdac363c2cc28eff3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_TRUE_CONSTRAINT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553ea82427a99c279490b35177f9a537031d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0a1063da2274711663b4fabdd552553eace922fdfd68186ce433188283e779260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a070768a658f3ff974ca3928ba74ead31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a1325f8dfb1c122fad75157edf76fdd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436af1e19fb208252121d68b5a06f1c8dde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a2f285cddde6149d7f54bf5ceb42a1507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3ee5925e5b7f8d35a24c9586784b7436a6a27c16438750d35626d77e0b2588308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_BETWEEN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a8f03b508da54bc2d68f497c4c9d95426</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aedb48d5de6af18fc63065f7024356d45a6c0061e4b925cf5a3de722fc1b91be9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3594f5372aa02134e8060cdd91c99673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67aef4ab31c8207abf767182ef91663b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a3721dc4e05093d3e1e802ddbdb101701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67ad76121125473074740a1e61a27aa6af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a914126bf00e791e3384e8d5813785346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_NON_EQUALITY</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a6c623439986a9cea3e80432460c0c389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTRAINT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ac168b898c15bec5026e928cd41ac1c67a99f0e2e7864430b3fec6c13d53b637c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_OPPOSITE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a8cd95ada6797e62cf04511d4219385cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_ABS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a7782b9fca0d799fa5e4125772b224dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_SQUARE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a55c17e6da44e8b4a9b46e7a4b5087763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a15204d747e3d82118005702bd713e0f9a5c9a61a1c3f6cf314eb068d200e81886</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aac41f9bc0040a6eff73894bd82bda2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a6e303e884ec01ec1b84089fd41fd22a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_DIV</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182af8176ab1bd0b50ca74d9f53104e98893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182aa825ff62458a4531d5479efa4b7bfb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a2aaf59f9f3047b1e04fc728ea5817ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ae83817b1c367a57ff2cb0aa9e9ca6b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad6df22a4d3d0aec5040f49af2caad49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182ad0d903e75f8d2b7f0c292cd2c604360f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a55a9764f4b50b1ad6ace9dc27d277abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a7adfc7fcad074742a36a237a0e41d90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6058cd47a38c4b7c41bd92ec57be0182a5980bc1e0233fd4590501537964b1ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_CONDITIONAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86cca59c45445a5385e9a060da304ed035c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a92950332708fd69026ae1e91bc3d86ccab04c37bc07fbd435e469b329ee258391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIFFERENCE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97ac9aed89951381b121380fd1c0d67de2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_DIVIDE</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5b41d2961c84f20eacbdd8ad02a0c209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97afc2095200b81c7b5aacef633ed6b02b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a987387e656e1a5b9759eeeaa7cc6f5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a80274f3b6bedc48f6511ed67204d5830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a132a2efb64d6fb7d9a526ccb38e604be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8fba3e84e405547f4595961b967afa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_NOT_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a5bd26b88fc899bf6708f408cef7ff1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_GREATER_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97a8b36e6f0dee5edf71f580d7ce9a1b40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_IS_LESS_OR_EQUAL</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97abfbdd7755935b5fa09c1128522d71bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPR_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a3f36ef73d0d1daeed0f2b1c4d701ae97af22eb71d40dde50c28f9115078ae76ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eadced5a0895a2cb90a4594fb36fe61849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a17dda7bae65e0e00a13db20c40a80eaa75358eb802072d41de32a9e809045ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_ELEMENT</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cbad208c87e11c0e31e89b56d46820a3854</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a477f02e25c227dc746912bc19d1156cba07c534a9ebc42ee4cc89310f68a508dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea8badb2c8850e8b40e03e6bb6603be49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a110dc5d522d143f90b07c31a23feb82ea400c369e52a35c4f713b334636fdf8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da72be218b7d632156bc7d6925b98f2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_MIN</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da3e0c4c80f4eeb88925a067061ec8fb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_SUM</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185da670852bc71348c6af0d026914ad8f925</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ab4833fcc71b2e79ee4de980b6d70185daf8fe9d386f02fb2d2f9137c6ab4d983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_INDEX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa5d526900675fe988dd7b32b4adc8655b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ARRAY_CONSTANT_EXPRESSION_MAX</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a0ef8d6a215e52ddcdde251a0d640d57fa9fbb20e9fd7918d2e660f014abe6521c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelCache</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a4399a6572d2936dc302589591be6dd9f</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModelCache</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>afa4464928a35f8184bab2b253159d213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad5151158c58b19d05ddcaba5cfbf109c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindVoidConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a2916776e5f69abac8f9637c3532d25f3</anchor>
      <arglist>(VoidConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVoidConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad00d773f68ef4113560d76233ddbdb67</anchor>
      <arglist>(Constraint *const ct, VoidConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindVarConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a47726b101345465f4a5909bee5bbda5d</anchor>
      <arglist>(IntVar *const var, int64 value, VarConstantConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6add626f74107d891672762f2813da2a</anchor>
      <arglist>(Constraint *const ct, IntVar *const var, int64 value, VarConstantConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindVarConstantConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a59c55441490d9bf17651f638c7b00e94</anchor>
      <arglist>(IntVar *const var, int64 value1, int64 value2, VarConstantConstantConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantConstantConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>abe73e77151aa268e2cc89d0ca2ba35c8</anchor>
      <arglist>(Constraint *const ct, IntVar *const var, int64 value1, int64 value2, VarConstantConstantConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Constraint *</type>
      <name>FindExprExprConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a2f7f8ae4cb4975e09629cc11d6b7ee8b</anchor>
      <arglist>(IntExpr *const expr1, IntExpr *const expr2, ExprExprConstraintType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExprConstraint</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a234f506aa8a7f48655fb86599e34b8cc</anchor>
      <arglist>(Constraint *const ct, IntExpr *const expr1, IntExpr *const expr2, ExprExprConstraintType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aff495bdda6532c4fade10ab7e49dd758</anchor>
      <arglist>(IntExpr *const expr, ExprExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a351824b859e343a4a65848aebab95509</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const expr, ExprExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>aeae05bb37ae8f31b2dbc9f16ddf2f365</anchor>
      <arglist>(IntExpr *const expr, int64 value, ExprConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a5f947ec356f999e06a3c33de73a16569</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const var, int64 value, ExprConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a9d7f94b31195c0266ec96f8b4b846445</anchor>
      <arglist>(IntExpr *const var1, IntExpr *const var2, ExprExprExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExprExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a04f7759da06c20ac161dfa2a4cc58499</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const var1, IntExpr *const var2, ExprExprExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindExprExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad75cf00bd67171ae8098c0fd1ed9757e</anchor>
      <arglist>(IntExpr *const var1, IntExpr *const var2, int64 constant, ExprExprConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertExprExprConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad5fd4370ec51f7bf4408c5ffbd38ea9a</anchor>
      <arglist>(IntExpr *const expression, IntExpr *const var1, IntExpr *const var2, int64 constant, ExprExprConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarConstantConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a4b4250955e796f1941a60543a2ba346b</anchor>
      <arglist>(IntVar *const var, int64 value1, int64 value2, VarConstantConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6cea309d14ae33d647d738770da53ebe</anchor>
      <arglist>(IntExpr *const expression, IntVar *const var, int64 value1, int64 value2, VarConstantConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ae4d8ca405c3b0ef30f742e24fb8bfcf6</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; int64 &gt; &amp;values, VarConstantArrayExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a72570f0cce0d75f5f4fe636347dc6f87</anchor>
      <arglist>(IntExpr *const expression, IntVar *const var, const std::vector&lt; int64 &gt; &amp;values, VarConstantArrayExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a716534b093f8c3ba99a9a4b0caca04ee</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, VarArrayExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a6a55fc37432c0ebc0760619b072aecd5</anchor>
      <arglist>(IntExpr *const expression, const std::vector&lt; IntVar * &gt; &amp;vars, VarArrayExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarArrayConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a19fda3a7f1f61e44f72103c5263611a4</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values, VarArrayConstantArrayExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarArrayConstantArrayExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a41a3633aed27275865ad997b3261eac8</anchor>
      <arglist>(IntExpr *const expression, const std::vector&lt; IntVar * &gt; &amp;var, const std::vector&lt; int64 &gt; &amp;values, VarArrayConstantArrayExpressionType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntExpr *</type>
      <name>FindVarArrayConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a175288f7b7884ce27004f3281f8dd061</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value, VarArrayConstantExpressionType type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InsertVarArrayConstantExpression</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>a27dc76658051540fec068cfa7528da91</anchor>
      <arglist>(IntExpr *const expression, const std::vector&lt; IntVar * &gt; &amp;var, int64 value, VarArrayConstantExpressionType type)=0</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1ModelCache.html</anchorfile>
      <anchor>ad1bf7cb63fc1defa06c7095dbf9969e8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ModelParser</name>
    <filename>classoperations__research_1_1ModelParser.html</filename>
    <base>operations_research::ModelVisitor</base>
    <member kind="function">
      <type></type>
      <name>ModelParser</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a7007976d224900371bc188833f97dd98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelParser</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a6d3686f475dc7b8748c5a911a4bbf7de</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a7fd9f1b45ac2f37a2855f1b7b57fc21d</anchor>
      <arglist>(const std::string &amp;solver_name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>aefe46d6637515c507d0228c03ab57cb8</anchor>
      <arglist>(const std::string &amp;solver_name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a8669aa0e9855472f3dfc3aa55a560829</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ab0cf1f07e1a232bd3c904028ba7e5fa8</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a2a92cdf4c38b9235218693f5400f25d6</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ac4428747c64cc45d6492c7eecd7a0d28</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a9b3cadca71680a3c196e19549836bc5e</anchor>
      <arglist>(const IntVar *const variable, IntExpr *const delegate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a78fcd3e3c37175f7ef047d612c89fbd2</anchor>
      <arglist>(const IntVar *const variable, const std::string &amp;operation, int64 value, IntVar *const delegate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ab500160d9ab98a7e20b9bc2c24629f43</anchor>
      <arglist>(const IntervalVar *const variable, const std::string &amp;operation, int64 value, IntervalVar *const delegate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a5c7081cb5b4fa649ab9a3b4ae8d9d073</anchor>
      <arglist>(const SequenceVar *const variable) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>acdfb63072d9e4b6af141207ee9c60be6</anchor>
      <arglist>(const std::string &amp;arg_name, int64 value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>af0ff42dac9badb43169d1739814ad433</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; int64 &gt; &amp;values) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerMatrixArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>acb4cbe466a8816b4f411bbaaf79bb643</anchor>
      <arglist>(const std::string &amp;arg_name, const IntTupleSet &amp;values) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>af9505c6728dc3ba558313b1b03b27c99</anchor>
      <arglist>(const std::string &amp;arg_name, IntExpr *const argument) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a6f5236dbadb59c34fc95e823d0ee3906</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntVar * &gt; &amp;arguments) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>af4c54b533b82f291475e6806f3d81e06</anchor>
      <arglist>(const std::string &amp;arg_name, IntervalVar *const argument) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitIntervalArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a0c5a72a96d244ab227ebc164f1a94322</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntervalVar * &gt; &amp;arguments) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a71420b48f234f195aa73823402883ba4</anchor>
      <arglist>(const std::string &amp;arg_name, SequenceVar *const argument) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitSequenceArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a668b09caeb98d6e0bceb1793b655abf4</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; SequenceVar * &gt; &amp;arguments) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0a054848f96f9043dac24dccecb2a47e</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a054bb0ce517052aa4d701536cce06748</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariableEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4b851543c86a8505832575e0502a3a43</anchor>
      <arglist>(const std::string &amp;arg_name, const Solver::Int64ToIntVar &amp;arguments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a526f8541539c9560e826469dc13ddfaf</anchor>
      <arglist>(Solver::IndexFilter1 filter, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2033f7591e7809c9f3abbbe618a484c7</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64AsArray</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ae5d743b7bc3e49c8b8dbc4f105a4cd</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, const std::string &amp;arg_name, int64 index_max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbs</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a124e348117110332cb3e5d460f455e4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a253eae82dd0e365d9c49f7e31d0f5f7a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac050b2f234e7b4deaa197572c1b4cc69</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllowedAssignments</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af3f5c65aeb337203e6b0bf80ce2dd09c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAtMost</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a18f81802469559a0e7625b4061b1035b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexOf</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5dfe92f44918889831f51375e91ffa01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a19bcba10f75045499952148742a3cf6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConditionalExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7353be5c838dbb88fda3b98d378269c3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCircuit</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e627ed6e6400a344f3191a717b3efe0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConvexPiecewise</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afacadb82186afef92a407c4e39ca0d64</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a09fdd4ae9e13607b278e9d472b673c1e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCover</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a096d24d789eb823876f2288bf15f282e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulative</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68cd7b641db22e66b78e7ff0c059e951</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDeviation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a956f49ec11b9f98f42ecbfb2c2af1224</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifference</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2e3fd9d97bd872ae2dd5f1f9f7e45014</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDisjunctive</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad8e6fc060fea392c9ae52b3102b19bb5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDistribute</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae6c54c4443407469494ea7b5eaa7ebfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDivide</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68d0ff1edb8a26a4e9ecb7794313298c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1519f3e29373c86a62a2e946cd699c49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElement</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1905d71fcbbce31fb70a5457049f1e5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElementEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a23c2fd1ac75c76dff862c8e91572df76</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0abcf853d7688095b9280f0797bbb3d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEquality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa26e4339dae784c7f42929a0a7221b9e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFalseConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adb508b94e5443a1b074937377dec783e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGlobalCardinality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adbf679024d2686e8f5c750d13b8b58ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad714215e3927f1e0f74381f51af18968</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4743a337c35039947c1058086fddf5fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2455aa3a43fa34beadef296168d5c20e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalBinaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a740a8d0fd961f1d6999e8fff910b1cbb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalDisjunction</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7cc767e828c3681fc2ff98ba83c6919c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalUnaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1d424057a9bb254b68f4462b5ca2affe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a42aa572d3afd9564a4b642872b672bcf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInversePermutation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e3a54c23e49210c0bd3e0f4d99d19c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abc81aee53f65168867b3fcff003fd584</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e302cc44d8ba521da50c0a320a83608</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a80075457db431f10ac45ec9d700fa763</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2b490050360819abe7bb697033db6561</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>accdea325f60eb495ff2ea282aa45376c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2a7061ff47d238c40664f5501b3878b8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8a16cc4af57936ccb4aff6c3a29adcfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8abd1a6ee2a78ee78c5ee55faaa3d4c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa8c4a089360326fa1ca2a31351f52ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a598796842a46e4c0e2a6d6f55ad7f999</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLexLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1137b3c7b1a1322229ffb6fd6b1ea24c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLinkExprVar</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26698013ea5b05f99adfa8940c3e9652</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMapDomain</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afeade782088a114d35356067be755a3d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMax</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4f8fbcca399411ad28b7d2130072ee77</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9812ac2275793bcdd987daae9e0551ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8ac9667afec105d8f4ca359160d7245c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMin</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a51c8f21edb373fbfd068b80a6786dd27</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4808668be13f3c213c5494417b5a1b3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModulo</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a915de6b5bab0757bd033699387a486e2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNoCycle</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a528ef45e21c77f33dc2670278f7a4615</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNonEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1db3e601f221c9db91c5b47dc9028fd5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afbe02152a0dfa9e9b5bdc60024486bec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5cedf602d46e984da78cb8862d9e9737</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNullIntersect</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9d0e42e2529aa2689695532c52b3c588</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOpposite</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7b5480d7ce4e02a3d924c1c07544eb7d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPack</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adf81a3dd11195fbf357fe5c9f0f9dc2c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1724ad5bbac74b4c99cfc18968debcba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDelayedPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa820a5c3a3f05b8a3873b752429e559a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPerformedExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae7ca6eb46e7d8d939a22aec0ee528234</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPower</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7af7d40f7324b60dae150e11aaef3b6b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProduct</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6008fca0fdf3f753369e587d933fab59</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProd</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1539aca7b4ada550fd75077f060b8d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a81bf76a202ed41b7bdcb695fde2d5536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a231e2a22e5b9902b3d659f5cc406eb13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab9a4c7d3a86c8bf0d11448239aeb09ca</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSemiContinuous</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abf9e5fc7b45242477e71e8e69e13129a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad177c9835c56cfb2472c1834ce468c12</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSortingConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aab3f00f122b9cf7651d696d78fe36543</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSquare</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d3901dd55a861cbe149a179469cbb46</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56a60af43da7618e524355e6b7dcfa18</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSum</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6ea132b8530a5b9146a4b0ff6b478163</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab5cacd4ab0f8a7b5bbedc3eb757281fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af68303d9fbd37f5bca241917e84d1b85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a48fe0b1746eada44912edfc24cb343ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrace</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad13e04b607579ab1edded8f7bc558da4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransition</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3cd17736ebef01ece7f1c8acc970819b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrueConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8cb920443f8846ec2aa7599e61864530</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarBoundWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56f29d4d46c50ac1dc77475c5718175b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarValueWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1066ef518e2ca9b1c2608a86c7ea32eb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountAssignedItemsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1eda61c28ecb4c870c47793d708e812</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountUsedBinsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5230c251f02f05d4f641e7f159512ae7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ea28ee541988d173f0cb43eb8eed02a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6f83fe983be47faffe412c1d3ba85877</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kObjectiveExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7f5ddcad7db239c13bab38ca5f3614bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSearchLimitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e8bb409ff7303de27d92e7452ff4745</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a866bf5f6b036757bcdd337ddf5c993d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adc38e544150243bf19864bfe3119d521</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableGroupExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a75c6576ece0c576b350705166f6268ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1f609953aff475abe227d57735209ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kWeightedSumOfAssignedEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a65d5353da6e7922032fa3dbd6e4d7ba8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kActiveArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3370251672e86a31b98bc2b4f5e483e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAssumePathsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a584222a6b5e247a6982b99c2b4986536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBranchesLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1906ebb0da0bb2cb8d134e280ae5d1aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCapacityArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac2f6eb8ce25d5e485ef02c13490a0465</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCardsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9bdd4a47b226bebc9f27469b567e0026</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCoefficientsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad7801044121f6bd969c646fa17721eef</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a74b062753c96d5652f1f0fe4faa2d3a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulativeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16d65c01260397f78e7df69dc3c2b867</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16f77fba967e59bc3327b4dc2a4460f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDemandsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36d90b47d30362df401823c21106132a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a205a1ceec0a84172f184a0e5c09439ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a707803108150b1bd31cb496ac5ce42f2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8384251179632a80fdb736377043e829</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1113636f0ceefbf79a1c1ed0962266</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d079adf02e0acbbe26691e8c2e2d26f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9da8bd50488b7bfaf29dafeac488c24e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abe82078ee45c0cb3976f9a648e7e8389</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7e316e2c0042d52af11be86b82287718</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFailuresLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a08c349b1aa12d68304581cfea2ad1fae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFinalStatesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a62948d17defdef3995eedcf87cefe92b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFixedChargeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a59d3fe79f6b850edef2a003af69c8c1c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndex2Argument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af05577d9a8dceaf2f97e3012ce426225</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5d5ce8cfe4c9243c9b78d8492668b800</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInitialState</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2878986c75516e14680711d3c1e873af</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ab1cbff58c24dc5017097b6a0a838e7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aed73378373382879db4cc4f42db38784</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abb90fd1d87eea297afe95bca09e9235e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0f276220863e52aa5b4310e09bca80f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLeftArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8bef2058a71de8dc9d979cdfee244613</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad0c35762f9cd7d79b51e6d9ca568f6ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaximizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>acb394e7169662d9ca957a0affde6220b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36ed7ed8253a439625cec250d3adc514</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModuloArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa86204c8336f1b6dc14ae954a361b81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNextsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a76e55486b1fb81a4860bd6a2321648d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOptionalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab1f538f44b7fff25ae4761c06301cc9a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPartialArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26ba71cb46871a942d7da294eb72df85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a698bcc5222b25fdb9b3351b14fa2c94b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6781e6ac22e67a344416110b35252493</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRangeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a290a9b9301de6b92f2e0a1f189cf1cd7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelationArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af255bb789297ed05a80419f46621fcf7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRightArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1c080372fc528d4951e2411c76696d3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac9845229df3d0b0afc7d58f5a37432e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequencesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a58a13c5ddb389b3d3ad063013ce18191</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a60d008087cac0b0ed36381ffbe5bdbeb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae649b9555f2b5c6fdad39d5b3adbf1a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac91fa31e47cb779cb431dea57017983f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSmartTimeCheckArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae4f29693e71a4fbed4ad28b041b5c18a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSolutionLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aae7b2191ec7433b273e1f825213d71a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a079c0703e63776a4ad3e53864b486222</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7563a86f8f366a85c8f48431c9f982ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab793c03904c4ab40135010471187577e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStepArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9b0ec9bf06a8b303a2402cd55242236d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTargetArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1606c56bdbb336ea2fe5b65ba4162d07</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTimeLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a916b0c8011c6d73e0da63c0de5811735</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransitsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad5d3ccac1c12901e24a9861010c139a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTuplesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a77c667f3158b3cb5eb2a06ff4292e00d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValueArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af9bcfa03b17bfc77afa707f3775ed1fc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValuesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae3e8e37ef2baa38aa0759ce4c8c34924</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af63d71fcac04c98d5e774bf36968b8c7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a85f7ae79e747c46b1bb248990403ffd2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac5753868fd49c8d832df129de33814f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMirrorOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af598e870cb075900bb601fdbbdca4825</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMaxOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a92a4c3f41d240eae8b123abb2b0360b2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMinOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8f3e3b37dc7487ff51107da6c9d36776</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a326a1e8421f974dc3f48401639313298</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifferenceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aee6505d2effca79a716ca26c203f97ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProductOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a444350f74c54195a017c663fe2b2ca44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnStartOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a07ac46ef4c52623df078eb57daf07070</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnEndOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad2532beeeeaf7018cab5f3946e604af3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTraceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a962d1e2e70b0085fe22e4dc424b27c97</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushArgumentHolder</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a8ff6f1e1b93fbfe2455a49bcfaddf2f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PopArgumentHolder</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>ab9d871dfdb5820f82b801ea494af2310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ArgumentHolder *</type>
      <name>Top</name>
      <anchorfile>classoperations__research_1_1ModelParser.html</anchorfile>
      <anchor>a3d802b3943f4ecbbfabb880db3089cc8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ModelVisitor</name>
    <filename>classoperations__research_1_1ModelVisitor.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>~ModelVisitor</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a651208f79a13e7e47feef0b4d95a8168</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a71cef740cd200067eadf66d0a9276d69</anchor>
      <arglist>(const std::string &amp;solver_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitModel</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7640173386e395605d573c94aa5110bc</anchor>
      <arglist>(const std::string &amp;solver_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa9ee3a1781e9969518c2f838f16c1552</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e80c7cc39381ccbf5457c83dc75cbb5</anchor>
      <arglist>(const std::string &amp;type_name, const Constraint *const constraint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0a054848f96f9043dac24dccecb2a47e</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a054bb0ce517052aa4d701536cce06748</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aac9032d088ad5a8555155a9fbc03d886</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndVisitIntegerExpression</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaeb891b509e11395b17691fc257f8430</anchor>
      <arglist>(const std::string &amp;type_name, const IntExpr *const expr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad19c386bb59eb247ae45f5a55c148c98</anchor>
      <arglist>(const IntVar *const variable, IntExpr *const delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a92614f304abec2c34601bfff6534db70</anchor>
      <arglist>(const IntVar *const variable, const std::string &amp;operation, int64 value, IntVar *const delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a008474e94c0f17a270b7e0830758605e</anchor>
      <arglist>(const IntervalVar *const variable, const std::string &amp;operation, int64 value, IntervalVar *const delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa873231c27c0bfa5e9689d3e7d74521d</anchor>
      <arglist>(const SequenceVar *const variable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad60683aaee8e4a19043476a2bd899d50</anchor>
      <arglist>(const std::string &amp;arg_name, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>acdde99f804b915fc54e00c182f77d84c</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerMatrixArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a10322a6adaa9c514e927c50ebbf15f4a</anchor>
      <arglist>(const std::string &amp;arg_name, const IntTupleSet &amp;tuples)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa3aadae79e53e0d0237126ab4e62b6bd</anchor>
      <arglist>(const std::string &amp;arg_name, IntExpr *const argument)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariableArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa32f0bc3ea5eea881da14daadaa817fc</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntVar * &gt; &amp;arguments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa136071473c98731ced9ccf73e9b1f9d</anchor>
      <arglist>(const std::string &amp;arg_name, IntervalVar *const argument)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntervalArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2b17a924fed9dff78cbd365ccdb5c597</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; IntervalVar * &gt; &amp;arguments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a95a765a9db2856a8f35b0f3b122a4b2c</anchor>
      <arglist>(const std::string &amp;arg_name, SequenceVar *const argument)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSequenceArrayArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2d319e77b0403d9ad50fc0aacf8b3d71</anchor>
      <arglist>(const std::string &amp;arg_name, const std::vector&lt; SequenceVar * &gt; &amp;arguments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitIntegerVariableEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4b851543c86a8505832575e0502a3a43</anchor>
      <arglist>(const std::string &amp;arg_name, const Solver::Int64ToIntVar &amp;arguments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a526f8541539c9560e826469dc13ddfaf</anchor>
      <arglist>(Solver::IndexFilter1 filter, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2033f7591e7809c9f3abbbe618a484c7</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, int64 index_min, int64 index_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VisitInt64ToInt64AsArray</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ae5d743b7bc3e49c8b8dbc4f105a4cd</anchor>
      <arglist>(const Solver::IndexEvaluator1 &amp;eval, const std::string &amp;arg_name, int64 index_max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbs</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a124e348117110332cb3e5d460f455e4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAbsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a253eae82dd0e365d9c49f7e31d0f5f7a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac050b2f234e7b4deaa197572c1b4cc69</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAllowedAssignments</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af3f5c65aeb337203e6b0bf80ce2dd09c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAtMost</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a18f81802469559a0e7625b4061b1035b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexOf</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5dfe92f44918889831f51375e91ffa01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a19bcba10f75045499952148742a3cf6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConditionalExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7353be5c838dbb88fda3b98d378269c3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCircuit</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e627ed6e6400a344f3191a717b3efe0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kConvexPiecewise</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afacadb82186afef92a407c4e39ca0d64</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a09fdd4ae9e13607b278e9d472b673c1e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCover</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a096d24d789eb823876f2288bf15f282e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulative</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68cd7b641db22e66b78e7ff0c059e951</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDeviation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a956f49ec11b9f98f42ecbfb2c2af1224</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifference</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2e3fd9d97bd872ae2dd5f1f9f7e45014</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDisjunctive</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad8e6fc060fea392c9ae52b3102b19bb5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDistribute</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae6c54c4443407469494ea7b5eaa7ebfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDivide</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a68d0ff1edb8a26a4e9ecb7794313298c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1519f3e29373c86a62a2e946cd699c49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElement</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1905d71fcbbce31fb70a5457049f1e5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kElementEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a23c2fd1ac75c76dff862c8e91572df76</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0abcf853d7688095b9280f0797bbb3d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEquality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa26e4339dae784c7f42929a0a7221b9e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFalseConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adb508b94e5443a1b074937377dec783e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGlobalCardinality</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adbf679024d2686e8f5c750d13b8b58ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad714215e3927f1e0f74381f51af18968</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4743a337c35039947c1058086fddf5fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntegerVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2455aa3a43fa34beadef296168d5c20e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalBinaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a740a8d0fd961f1d6999e8fff910b1cbb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalDisjunction</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7cc767e828c3681fc2ff98ba83c6919c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalUnaryRelation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1d424057a9bb254b68f4462b5ca2affe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a42aa572d3afd9564a4b642872b672bcf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInversePermutation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e3a54c23e49210c0bd3e0f4d99d19c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abc81aee53f65168867b3fcff003fd584</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsDifferent</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5e302cc44d8ba521da50c0a320a83608</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a80075457db431f10ac45ec9d700fa763</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreater</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2b490050360819abe7bb697033db6561</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>accdea325f60eb495ff2ea282aa45376c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2a7061ff47d238c40664f5501b3878b8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8a16cc4af57936ccb4aff6c3a29adcfc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIsMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8abd1a6ee2a78ee78c5ee55faaa3d4c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa8c4a089360326fa1ca2a31351f52ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a598796842a46e4c0e2a6d6f55ad7f999</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLexLess</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1137b3c7b1a1322229ffb6fd6b1ea24c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLinkExprVar</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26698013ea5b05f99adfa8940c3e9652</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMapDomain</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afeade782088a114d35356067be755a3d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMax</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4f8fbcca399411ad28b7d2130072ee77</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9812ac2275793bcdd987daae9e0551ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8ac9667afec105d8f4ca359160d7245c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMin</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a51c8f21edb373fbfd068b80a6786dd27</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4808668be13f3c213c5494417b5a1b3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModulo</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a915de6b5bab0757bd033699387a486e2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNoCycle</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a528ef45e21c77f33dc2670278f7a4615</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNonEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1db3e601f221c9db91c5b47dc9028fd5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotBetween</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>afbe02152a0dfa9e9b5bdc60024486bec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNotMember</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5cedf602d46e984da78cb8862d9e9737</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNullIntersect</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9d0e42e2529aa2689695532c52b3c588</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOpposite</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7b5480d7ce4e02a3d924c1c07544eb7d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPack</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adf81a3dd11195fbf357fe5c9f0f9dc2c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1724ad5bbac74b4c99cfc18968debcba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDelayedPathCumul</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aa820a5c3a3f05b8a3873b752429e559a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPerformedExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae7ca6eb46e7d8d939a22aec0ee528234</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPower</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7af7d40f7324b60dae150e11aaef3b6b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProduct</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6008fca0fdf3f753369e587d933fab59</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProd</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1539aca7b4ada550fd75077f060b8d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a81bf76a202ed41b7bdcb695fde2d5536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a231e2a22e5b9902b3d659f5cc406eb13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab9a4c7d3a86c8bf0d11448239aeb09ca</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSemiContinuous</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abf9e5fc7b45242477e71e8e69e13129a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceVariable</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad177c9835c56cfb2472c1834ce468c12</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSortingConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aab3f00f122b9cf7651d696d78fe36543</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSquare</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d3901dd55a861cbe149a179469cbb46</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartExpr</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56a60af43da7618e524355e6b7dcfa18</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSum</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6ea132b8530a5b9146a4b0ff6b478163</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab5cacd4ab0f8a7b5bbedc3eb757281fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af68303d9fbd37f5bca241917e84d1b85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumLessOrEqual</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a48fe0b1746eada44912edfc24cb343ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrace</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad13e04b607579ab1edded8f7bc558da4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransition</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3cd17736ebef01ece7f1c8acc970819b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTrueConstraint</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8cb920443f8846ec2aa7599e61864530</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarBoundWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a56f29d4d46c50ac1dc77475c5718175b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarValueWatcher</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1066ef518e2ca9b1c2608a86c7ea32eb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountAssignedItemsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1eda61c28ecb4c870c47793d708e812</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountUsedBinsExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5230c251f02f05d4f641e7f159512ae7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToBoolExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ea28ee541988d173f0cb43eb8eed02a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInt64ToInt64Extension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6f83fe983be47faffe412c1d3ba85877</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kObjectiveExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7f5ddcad7db239c13bab38ca5f3614bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSearchLimitExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a4e8bb409ff7303de27d92e7452ff4745</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a866bf5f6b036757bcdd337ddf5c993d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>adc38e544150243bf19864bfe3119d521</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableGroupExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a75c6576ece0c576b350705166f6268ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableUsageLessConstantExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af1f609953aff475abe227d57735209ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kWeightedSumOfAssignedEqualVariableExtension</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a65d5353da6e7922032fa3dbd6e4d7ba8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kActiveArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a3370251672e86a31b98bc2b4f5e483e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kAssumePathsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a584222a6b5e247a6982b99c2b4986536</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kBranchesLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1906ebb0da0bb2cb8d134e280ae5d1aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCapacityArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac2f6eb8ce25d5e485ef02c13490a0465</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCardsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9bdd4a47b226bebc9f27469b567e0026</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCoefficientsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad7801044121f6bd969c646fa17721eef</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCountArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a74b062753c96d5652f1f0fe4faa2d3a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulativeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16d65c01260397f78e7df69dc3c2b867</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kCumulsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a16f77fba967e59bc3327b4dc2a4460f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDemandsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36d90b47d30362df401823c21106132a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a205a1ceec0a84172f184a0e5c09439ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDurationMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a707803108150b1bd31cb496ac5ce42f2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8384251179632a80fdb736377043e829</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEarlyDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aad1113636f0ceefbf79a1c1ed0962266</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7d079adf02e0acbbe26691e8c2e2d26f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9da8bd50488b7bfaf29dafeac488c24e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEndsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abe82078ee45c0cb3976f9a648e7e8389</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kExpressionArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7e316e2c0042d52af11be86b82287718</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFailuresLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a08c349b1aa12d68304581cfea2ad1fae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFinalStatesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a62948d17defdef3995eedcf87cefe92b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kFixedChargeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a59d3fe79f6b850edef2a003af69c8c1c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndex2Argument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af05577d9a8dceaf2f97e3012ce426225</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIndexArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a5d5ce8cfe4c9243c9b78d8492668b800</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kInitialState</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2878986c75516e14680711d3c1e873af</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a2ab1cbff58c24dc5017097b6a0a838e7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kIntervalsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aed73378373382879db4cc4f42db38784</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateCostArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>abb90fd1d87eea297afe95bca09e9235e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLateDateArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a0f276220863e52aa5b4310e09bca80f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLeftArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8bef2058a71de8dc9d979cdfee244613</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad0c35762f9cd7d79b51e6d9ca568f6ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMaximizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>acb394e7169662d9ca957a0affde6220b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a36ed7ed8253a439625cec250d3adc514</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kModuloArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aaa86204c8336f1b6dc14ae954a361b81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kNextsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a76e55486b1fb81a4860bd6a2321648d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kOptionalArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab1f538f44b7fff25ae4761c06301cc9a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPartialArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a26ba71cb46871a942d7da294eb72df85</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a698bcc5222b25fdb9b3351b14fa2c94b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kPositionYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a6781e6ac22e67a344416110b35252493</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRangeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a290a9b9301de6b92f2e0a1f189cf1cd7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelationArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af255bb789297ed05a80419f46621fcf7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRightArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1c080372fc528d4951e2411c76696d3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequenceArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac9845229df3d0b0afc7d58f5a37432e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSequencesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a58a13c5ddb389b3d3ad063013ce18191</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a60d008087cac0b0ed36381ffbe5bdbeb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeXArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae649b9555f2b5c6fdad39d5b3adbf1a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSizeYArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac91fa31e47cb779cb431dea57017983f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSmartTimeCheckArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae4f29693e71a4fbed4ad28b041b5c18a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSolutionLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aae7b2191ec7433b273e1f825213d71a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMaxArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a079c0703e63776a4ad3e53864b486222</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartMinArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a7563a86f8f366a85c8f48431c9f982ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ab793c03904c4ab40135010471187577e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStepArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a9b0ec9bf06a8b303a2402cd55242236d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTargetArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a1606c56bdbb336ea2fe5b65ba4162d07</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTimeLimitArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a916b0c8011c6d73e0da63c0de5811735</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTransitsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad5d3ccac1c12901e24a9861010c139a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTuplesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a77c667f3158b3cb5eb2a06ff4292e00d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValueArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af9bcfa03b17bfc77afa707f3775ed1fc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kValuesArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ae3e8e37ef2baa38aa0759ce4c8c34924</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVariableArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af63d71fcac04c98d5e774bf36968b8c7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kVarsArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a85f7ae79e747c46b1bb248990403ffd2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kEvaluatorArgument</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ac5753868fd49c8d832df129de33814f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kMirrorOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>af598e870cb075900bb601fdbbdca4825</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMaxOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a92a4c3f41d240eae8b123abb2b0360b2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRelaxedMinOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a8f3e3b37dc7487ff51107da6c9d36776</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kSumOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a326a1e8421f974dc3f48401639313298</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kDifferenceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>aee6505d2effca79a716ca26c203f97ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kProductOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a444350f74c54195a017c663fe2b2ca44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnStartOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a07ac46ef4c52623df078eb57daf07070</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kStartSyncOnEndOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>ad2532beeeeaf7018cab5f3946e604af3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kTraceOperation</name>
      <anchorfile>classoperations__research_1_1ModelVisitor.html</anchorfile>
      <anchor>a962d1e2e70b0085fe22e4dc424b27c97</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::TypeRegulationsChecker::NodeCount</name>
    <filename>structoperations__research_1_1TypeRegulationsChecker_1_1NodeCount.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>non_pickup_delivery</name>
      <anchorfile>structoperations__research_1_1TypeRegulationsChecker_1_1NodeCount.html</anchorfile>
      <anchor>a9cd892985a0b99066ccd3e3bb311c3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pickup</name>
      <anchorfile>structoperations__research_1_1TypeRegulationsChecker_1_1NodeCount.html</anchorfile>
      <anchor>a38c5cc1dd4ef3f9a7d23d67c2aa21947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>delivery</name>
      <anchorfile>structoperations__research_1_1TypeRegulationsChecker_1_1NodeCount.html</anchorfile>
      <anchor>ac62297cf026bc33e1f90ba7624be9079</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::RoutingDimension::NodePrecedence</name>
    <filename>structoperations__research_1_1RoutingDimension_1_1NodePrecedence.html</filename>
    <member kind="variable">
      <type>int64</type>
      <name>first_node</name>
      <anchorfile>structoperations__research_1_1RoutingDimension_1_1NodePrecedence.html</anchorfile>
      <anchor>a0c094638ebc4fdb96e9d4dcf00698c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>second_node</name>
      <anchorfile>structoperations__research_1_1RoutingDimension_1_1NodePrecedence.html</anchorfile>
      <anchor>adc95d1896d42e4ced2f163e9dc6756a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>offset</name>
      <anchorfile>structoperations__research_1_1RoutingDimension_1_1NodePrecedence.html</anchorfile>
      <anchor>a280370f73ee5987cf8f4fe4fd0cf5c33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::NumericalRev</name>
    <filename>classoperations__research_1_1NumericalRev.html</filename>
    <templarg>T</templarg>
    <base>operations_research::Rev</base>
    <member kind="function">
      <type></type>
      <name>NumericalRev</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a349aea96aef9e96ecdb1c001e931f75b</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>ac5b1f44217bbe9914ab5f3bfd8a2c71f</anchor>
      <arglist>(Solver *const s, const T &amp;to_add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Incr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a5cb75653696c123cfc8dbc5a9e916084</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Decr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a9f28c0cf038c1f5f46a5d823c68b887e</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericalRev&lt; int &gt;</name>
    <filename>classoperations__research_1_1NumericalRev.html</filename>
    <base>Rev&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>NumericalRev</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a349aea96aef9e96ecdb1c001e931f75b</anchor>
      <arglist>(const int &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>ac5b1f44217bbe9914ab5f3bfd8a2c71f</anchor>
      <arglist>(Solver *const s, const int &amp;to_add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Incr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a5cb75653696c123cfc8dbc5a9e916084</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Decr</name>
      <anchorfile>classoperations__research_1_1NumericalRev.html</anchorfile>
      <anchor>a9f28c0cf038c1f5f46a5d823c68b887e</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const int &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::NumericalRevArray</name>
    <filename>classoperations__research_1_1NumericalRevArray.html</filename>
    <templarg></templarg>
    <base>operations_research::RevArray</base>
    <member kind="function">
      <type></type>
      <name>NumericalRevArray</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>a837710ab5c022c6ad8d0569847b40f84</anchor>
      <arglist>(int size, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>ab4b135d5d6cfb30dbba7df17f1affd32</anchor>
      <arglist>(Solver *const s, int index, const T &amp;to_add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Incr</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>ad69b795e0a7110fe1483711154e74d00</anchor>
      <arglist>(Solver *const s, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Decr</name>
      <anchorfile>classoperations__research_1_1NumericalRevArray.html</anchorfile>
      <anchor>a394cdf85b4442ebcb0b4ea7f29697b5d</anchor>
      <arglist>(Solver *const s, int index)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a0c7349d7ede9ab1e16cff1096d6afe8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abad018c5f8a0e44bdfd6e17ab59612c7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abb88b59866cff9f26ebb6f29e82b777a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a6516d4adeaf28338dbc7ba2584d76919</anchor>
      <arglist>(Solver *const s, int index, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::OptimizeVar</name>
    <filename>classoperations__research_1_1OptimizeVar.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>OptimizeVar</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a869a6765e20963972d8bc3dd11645f33</anchor>
      <arglist>(Solver *const s, bool maximize, IntVar *const a, int64 step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptimizeVar</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a5f4f2dec1c3aaaac9f795c2b90023dcc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>best</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>aecf2e4a608fd1836c0ebac6d7ee0d0ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ac567620867f5e875168966d1c5abde7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a964aef312aae5df04e7d0fe12060e614</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ad003866ff381968298a0ebf83f1b18f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a046594f08d57c33248ac77101184e66c</anchor>
      <arglist>(DecisionBuilder *const db) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a56122e1a51788c21cba4fd3211e93084</anchor>
      <arglist>(Decision *const d) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ab50cd48d312f0e20afcd77b1bf1e94cb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>aed1aff1da93b7d6ef67c9433a56e311a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>Print</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a6efc7277ebe0c6a15dd35687d9863017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ae2a7ca2a1d7ffb879e2d7794aa3875dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>adcfad0327a52f24042b49aadb09f1b4d</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyBound</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a0a7e487cd5bdc3fa3a515765bb007fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVar *const</type>
      <name>var_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a229d2a4ba25ff904b6504ba41161721a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>step_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a0f1b41f6ab20eaf58d9c44340620b04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>best_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>ac7b6348e2752a940f527c428636a977b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>maximize_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>a7a8a943a24864d59725e423490e86dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>found_initial_solution_</name>
      <anchorfile>classoperations__research_1_1OptimizeVar.html</anchorfile>
      <anchor>abc92b023a2273899160c0997007c6ca8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Pack</name>
    <filename>classoperations__research_1_1Pack.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>Pack</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a94969a5d7e604ccba7e5b515424a246e</anchor>
      <arglist>(Solver *const s, const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_bins)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pack</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ac41b9dfede7920f5baadea90cddc72ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>af69fc8b35affb174b5e47fbee6de9772</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;weights, const std::vector&lt; int64 &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>aee734afb685c74deb94817b754b9e518</anchor>
      <arglist>(Solver::IndexEvaluator1 weights, const std::vector&lt; int64 &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a7a66d1abf3e8584e7c5ced64fdbd4cd8</anchor>
      <arglist>(Solver::IndexEvaluator2 weights, const std::vector&lt; int64 &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumEqualVarDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ae82f80cca2acf98982b3c0eb5cc96d03</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;weights, const std::vector&lt; IntVar * &gt; &amp;loads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumEqualVarDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a42267aa342941682b197ebef1a9fd6bc</anchor>
      <arglist>(Solver::IndexEvaluator2 weights, const std::vector&lt; IntVar * &gt; &amp;loads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSumVariableWeightsLessOrEqualConstantDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a92da0e27853c3c611f0384457e1fcdb2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;usage, const std::vector&lt; int64 &gt; &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedSumOfAssignedDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>acbb9380640b30f024e9986f96d5fe582</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;weights, IntVar *const cost_var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCountUsedBinDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a3030c379670033531aab20df788376ed</anchor>
      <arglist>(IntVar *const count_var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCountAssignedItemsDimension</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>aa8c9281df8ab547dbed84de1364267d4</anchor>
      <arglist>(IntVar *const count_var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a22f97f40518e3d2f565d78f7ef6f3b56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAll</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>af10aa93a14a72df0bd8b5c7143c6648e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PropagateDelayed</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ac2a200cf86dc0fa3b6a7905971ad88e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>adac62b65b527aa23434dd7d1fdba3b14</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Propagate</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a29f65d45d0fefbab371c7265572d54f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OneDomain</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>af13898c8553d217fa3d52c6e2b504f8d</anchor>
      <arglist>(int var_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a494cf6256ff568544390e507a6943112</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUndecided</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>afc53068cf76b2865a10fafd410da228e</anchor>
      <arglist>(int var_index, int bin_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpossible</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ae7875687d4d252d247a0c4c7b78a0326</anchor>
      <arglist>(int var_index, int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a15e81047afe54184915345326a7cdaa6</anchor>
      <arglist>(int var_index, int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAssignedStatusKnown</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a6dc7ba8d99e3f6cc958125cbfaf22293</anchor>
      <arglist>(int var_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPossible</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a21511d7769c6d0d590e3e8a02892052f</anchor>
      <arglist>(int var_index, int bin_index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>AssignVar</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ae7c46b011db8d3382e6b370bbdeaca4f</anchor>
      <arglist>(int var_index, int bin_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssigned</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a104bd60ce9672f53c0539dac7daec58f</anchor>
      <arglist>(int var_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnassigned</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a0c9c26b5eef0f2a6bc5c29a6cd193cac</anchor>
      <arglist>(int var_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveAllPossibleFromBin</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ab4e8efc23e9db0d7d793ca7697e89e05</anchor>
      <arglist>(int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignAllPossibleToBin</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a4c3227b06d52ecdb2f09dccc01baa347</anchor>
      <arglist>(int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignFirstPossibleToBin</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a7406f484f98fd83e408ffae60895905c</anchor>
      <arglist>(int bin_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignAllRemainingItems</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a48b59d1fd372a5f0657774bf83acf847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnassignAllRemainingItems</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>a43b6922981e5f524b4cd259cc4538336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Pack.html</anchorfile>
      <anchor>ad7fda9d44f000fcb907d2bdeec845423</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairExchangeOperator</name>
    <filename>classoperations__research_1_1PairExchangeOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>PairExchangeOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>aa13dd1c660bcff1269b4341210105528</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairExchangeOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>a55d97dc7dc1fab0b040c42e1cc04b940</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>abe5bdb5b47972a06326d2e9ab802faf4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairExchangeOperator.html</anchorfile>
      <anchor>a78bebf852bbc0d9666c0a2626ea10564</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairExchangeRelocateOperator</name>
    <filename>classoperations__research_1_1PairExchangeRelocateOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>PairExchangeRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a9b2579de83be05766d62ec2e518df6c1</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairExchangeRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a395197889dcef9f5e2ac025c4e30ffa4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>af5f3f6aa4e76d51ee677bbc277da242a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a4e68060927f617c04e2def41e9f1fd2a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a3beb65eed738c57a613b70cab4e89b9a</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PairExchangeRelocateOperator.html</anchorfile>
      <anchor>a03a0c86a9d849961094e427a573bb826</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairNodeSwapActiveOperator</name>
    <filename>classoperations__research_1_1PairNodeSwapActiveOperator.html</filename>
    <templarg>swap_first</templarg>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>PairNodeSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>aba6ffe795d429f58c50d1a14ba282875</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairNodeSwapActiveOperator</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a9ba5851f147e1cf1cafca2efc2686552</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a0980c455528f5b1ba4ecd1137d412403</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>aa1d1ae60a42228a1ed1363362006f05e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>ab62649ea792c88c3e39f90f40da4434a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a3930be7f9d8aa73d847eaaaca0ee1180</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a8023edd3bb68723e1be72fbdef1e3313</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PairNodeSwapActiveOperator.html</anchorfile>
      <anchor>a0501b7d5bc01026d24c1e942432593ad</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PairRelocateOperator</name>
    <filename>classoperations__research_1_1PairRelocateOperator.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>PairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>adf5eb2e1c8800a7abfd5a4ce8edc2c6d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairRelocateOperator</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>a955f1dd41dfda0eabcecf4733da4aea5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>ada4c573d55306bbad08fec943e279ba2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>adf487da3f24592d0f7ab321358b47385</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>a498abb2b2994fe5fcf8abb6a731b4418</anchor>
      <arglist>(int64 base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PairRelocateOperator.html</anchorfile>
      <anchor>a07839e54aa42e5040ba1d04729a53ebc</anchor>
      <arglist>(int base_index) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::ParallelSavingsFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1ParallelSavingsFilteredDecisionBuilder.html</filename>
    <base>operations_research::SavingsFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>ParallelSavingsFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1ParallelSavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a867c54dad2ba58a6d40a0565e664abcf</anchor>
      <arglist>(RoutingModel *model, RoutingIndexManager *manager, SavingsParameters parameters, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParallelSavingsFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1ParallelSavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad6dd9b77f3ab9b69aa8a43a36b6818ab</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1ParallelSavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>ad81f687a2b8b7f06fbe387c2a9159163</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9c4a14a25e1129acbd541c76c7822c05</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int64, int64 &gt;</type>
      <name>Saving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a596ce0cfecc75e1a45cbe815e9c5de18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetVehicleTypeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a4e87652a0defe5e88e5ee40f9747e8e4</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBeforeNodeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>af8dfaa8561042682ba1e695a9cf8e485</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetAfterNodeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9e4db1eb4f2bca5ca9eaec95324ae691</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetSavingValue</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a2d95b0c5e4e1261ae146ea37744e164e</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>StartNewRouteWithBestVehicleOfType</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a79f476b7736fd94c99a5a3b19af51144</anchor>
      <arglist>(int type, int64 before_node, int64 after_node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>type_index_of_vehicle_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a95726fed5ab591f1934d5f427d58f5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::set&lt; VehicleClassEntry &gt; &gt;</type>
      <name>sorted_vehicle_classes_per_type_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>aa8b26c3fe240f025e6af46a2772503cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::deque&lt; int &gt; &gt;</type>
      <name>vehicles_per_vehicle_class_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a34732976d70ea1b9bd96bbed44970007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; SavingsContainer&lt; Saving &gt; &gt;</type>
      <name>savings_container_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a37e4260ae243381402603fe3c3bca94d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PathOperator</name>
    <filename>classoperations__research_1_1PathOperator.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>PathOperator</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aefe922e3f6a2233cf3c2a6bbc079181d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;next_vars, const std::vector&lt; IntVar * &gt; &amp;path_vars, int number_of_base_nodes, bool skip_locally_optimal_paths, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathOperator</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a192caff70f4f12fd43df88bf8053e50d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abf884d7efc40fbf9932b64623604c23a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PathWithPreviousNodesOperator</name>
    <filename>classoperations__research_1_1PathWithPreviousNodesOperator.html</filename>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>PathWithPreviousNodesOperator</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6adb77fcc1b9b42ec22def88f061aae5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, int number_of_base_nodes, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PathWithPreviousNodesOperator</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a82de90bb304fb2963d26c04396d9c720</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3dd1fd60d3ebe3777a8369787f78275</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abf884d7efc40fbf9932b64623604c23a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PropagationBaseObject</name>
    <filename>classoperations__research_1_1PropagationBaseObject.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>PropagationBaseObject</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>afa9385e35090e310e58fc4cb6fd5d606</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropagationBaseObject</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a767a917fc7d9232d121994ae1e124875</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ae5b6f8cb73c1b76da152ad612f91c4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::PropagationMonitor</name>
    <filename>classoperations__research_1_1PropagationMonitor.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>PropagationMonitor</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a6f1cf978d88b617fb5dc10faf30603c0</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropagationMonitor</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aef9d187812f7bbf6d51265a5d70637fd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a303fb6b35a71fdbcba21088d88a222ac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a149c421b477f87ac2c8753accd9fe930</anchor>
      <arglist>(Constraint *const constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aca3f05d6c4bf98133efa74475ad2a100</anchor>
      <arglist>(Constraint *const constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginNestedConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aae95f0bd165da0cba8a733e2487bd0b0</anchor>
      <arglist>(Constraint *const parent, Constraint *const nested)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndNestedConstraintInitialPropagation</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a9c8e0c8cfa58868d72102ba9466c544c</anchor>
      <arglist>(Constraint *const parent, Constraint *const nested)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RegisterDemon</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a09532587cbcdf89f02890450801fced2</anchor>
      <arglist>(Demon *const demon)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginDemonRun</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a5f993d96e8b8c9e854e2de6210817a10</anchor>
      <arglist>(Demon *const demon)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndDemonRun</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a46922ebd346ff7b714f1838ad428207a</anchor>
      <arglist>(Demon *const demon)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>StartProcessingIntegerVariable</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a14028ab54d3a5879bf5d6eefcb66fe22</anchor>
      <arglist>(IntVar *const var)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndProcessingIntegerVariable</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a52230d0d9a55964894cf867fab2e5093</anchor>
      <arglist>(IntVar *const var)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PushContext</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a40b7f88bee1206b3615d06dbdaed1459</anchor>
      <arglist>(const std::string &amp;context)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PopContext</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a17029f3eaabf4633ca85802e787df736</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a2078e48240cee78626eb5674be918557</anchor>
      <arglist>(IntExpr *const expr, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a48f6da00d4781ef0f5b59c78d56ff3b0</anchor>
      <arglist>(IntExpr *const expr, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ae230d5e381f782bd3b600c0d0e12fc83</anchor>
      <arglist>(IntExpr *const expr, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ab4b57c1d6ca1e3b1f066f8a0748361e1</anchor>
      <arglist>(IntVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aa10e89f2c4912fa745951a03c0daf362</anchor>
      <arglist>(IntVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a7226a39a15681662920f91a423de6b61</anchor>
      <arglist>(IntVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveValue</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ac8e4c7b0c60cd50d9870f3949e47828e</anchor>
      <arglist>(IntVar *const var, int64 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aea14a7436f45e5ed69bc1d2d3c67fe1b</anchor>
      <arglist>(IntVar *const var, int64 value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveInterval</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ad320aa7441456e36b2612908ce5cf304</anchor>
      <arglist>(IntVar *const var, int64 imin, int64 imax)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetValues</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a243163480f0b3877d15a30cd01b9fd45</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; int64 &gt; &amp;values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveValues</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a71ad95706fde5ba3c076f1125177cf3e</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; int64 &gt; &amp;values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a201f353378ceaff27cc9a8861a4734d5</anchor>
      <arglist>(IntervalVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ac2c1c0b6d89eb9ee53c320509eeb9c9b</anchor>
      <arglist>(IntervalVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetStartRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a2c7679571947898865bcf04abf49fc81</anchor>
      <arglist>(IntervalVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a045c6ca9847feb586ad5c4de1808829e</anchor>
      <arglist>(IntervalVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a771f782aca6d12a464d660bbd023703b</anchor>
      <arglist>(IntervalVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aff9acdea68b68555cb1900ff7428266a</anchor>
      <arglist>(IntervalVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMin</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a39ddbd6b9a80e5c7c5b8cca42882294d</anchor>
      <arglist>(IntervalVar *const var, int64 new_min)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationMax</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a07665062e623a550433c5845111910e3</anchor>
      <arglist>(IntervalVar *const var, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDurationRange</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>aa4bf4e7847c485be003287bc07978317</anchor>
      <arglist>(IntervalVar *const var, int64 new_min, int64 new_max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPerformed</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a472d5349fbf47bcfa74c24e92c738402</anchor>
      <arglist>(IntervalVar *const var, bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankFirst</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>afb22c7f645f8813c32fa34dc200a5753</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankNotFirst</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a9ed062f89410e8ce29e59d78e1437317</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankLast</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a1a8db8e232b8e87f8e663aaf2f484618</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankNotLast</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a2b256262632e819ceeb0cf04be0e53ad</anchor>
      <arglist>(SequenceVar *const var, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RankSequence</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>a07763e428da44d08eab94f5a88348777</anchor>
      <arglist>(SequenceVar *const var, const std::vector&lt; int &gt; &amp;rank_first, const std::vector&lt; int &gt; &amp;rank_last, const std::vector&lt; int &gt; &amp;unperformed)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1PropagationMonitor.html</anchorfile>
      <anchor>ae220d84f70fbc4b4300c11fde784489a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a705ae4bfa396632c23d65f37793391f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RegularLimit</name>
    <filename>classoperations__research_1_1RegularLimit.html</filename>
    <base>operations_research::SearchLimit</base>
    <member kind="function">
      <type></type>
      <name>RegularLimit</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>ab40802726cee8567662a01a9ca06af97</anchor>
      <arglist>(Solver *const s, int64 time, int64 branches, int64 failures, int64 solutions, bool smart_time_check, bool cumulative)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegularLimit</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a549c9e71214a87f6a4ab59b113933721</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a255302e173fe3765a12bdac8cc893d89</anchor>
      <arglist>(const SearchLimit *const limit) override</arglist>
    </member>
    <member kind="function">
      <type>SearchLimit *</type>
      <name>MakeClone</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a5c46712d4c0f5a5259111c343a084313</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeIdenticalClone</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a8d79675478e6f3bc3536e278f71ab507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Check</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a19509391e38443b1bc38c5847125ff3d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a57e044adfe2b59e031d3772fc218eef7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a895d84c05da5c98c72e3662bf83ecc86</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateLimits</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>ae4077e4ee25c40a40eb2c320d916250d</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions)</arglist>
    </member>
    <member kind="function">
      <type>absl::Duration</type>
      <name>duration_limit</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a034b9632ef4574d05aa150cd7a0c613c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>wall_time</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a0ece3bd1f5a6a419a1c30fba713c6c8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a7c7b7fcaac46d6e0677703e92bf53bb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a742f9399433cea90ac80e40b7a7cbf4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>solutions</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a96a95361f128c6725b5d76ba09239293</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a370e4934f9963fa9a440d0f8086a66a8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a71e06768288b2fd36acf28a435744d51</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a7a6e185350eade19733138b3d054bba9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>absl::Time</type>
      <name>AbsoluteSolverDeadline</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>ab78472fc60e6e9f3a7920cba49f6cc72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1RegularLimit.html</anchorfile>
      <anchor>a5971e2a299e94cd43e5aaf6675cf9dc7</anchor>
      <arglist>(ModelVisitor *const visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>crossed</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5fce652e4e80c2ac089bdd70281feeb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>aa184196d0761829d7df21643bc498a01</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a4d58c37975405a86ef02fd0fdd7ed34f</anchor>
      <arglist>(DecisionBuilder *const b) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5e78de48144b2c4446fb2847a525a061</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a3ce36720ef2cd8490199ac815d07a1d1</anchor>
      <arglist>(Decision *const d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RelocateExpensiveChain</name>
    <filename>classoperations__research_1_1RelocateExpensiveChain.html</filename>
    <base>operations_research::PathOperator</base>
    <member kind="function">
      <type></type>
      <name>RelocateExpensiveChain</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>ad0e60e3542bae5a5d5cd547e437b9e7a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, int num_arcs_to_consider, std::function&lt; int64(int64, int64, int64)&gt; arc_cost_for_path_start)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RelocateExpensiveChain</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>a15512a6333382cccdab57fb7af68e926</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>a9a88f045cd2761bbe4894bf5764e6078</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>ac22e01aeaac3d0cafcb8b2d0ebf59bcf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RelocateExpensiveChain.html</anchorfile>
      <anchor>a99cdd3acd4fd444399b6a70ee546e77b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RelocateSubtrip</name>
    <filename>classoperations__research_1_1RelocateSubtrip.html</filename>
    <base>operations_research::PathWithPreviousNodesOperator</base>
    <member kind="function">
      <type></type>
      <name>RelocateSubtrip</name>
      <anchorfile>classoperations__research_1_1RelocateSubtrip.html</anchorfile>
      <anchor>a9cf5847433a2b90f585df98199cbc42c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class, const RoutingIndexPairs &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RelocateSubtrip.html</anchorfile>
      <anchor>aa9aa7e51c3ae2c7943a0c9700ebc3ea5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNeighbor</name>
      <anchorfile>classoperations__research_1_1RelocateSubtrip.html</anchorfile>
      <anchor>a3ff200c1f4b1e64074225d838aa3789b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPathStart</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a6b3350e5a99866a266cb05c8283a5d06</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Prev</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>ac3e67d1a8286b8dc4a1d8fba49642910</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>afd31bd01947ecfcfcaf0871f1268d54d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a13fc3f3cb8f8de7198d1b16338df06ad</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af916e434b85cddbe48e0378242a04aca</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Path</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2b158942b0eb2b77f96560f34dab5105</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>number_of_nexts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1b11142fde9a99967d442953603afb19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a5bc78fdde6b4e5a6ad9c3b00a6d47d65</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OnNodeInitialization</name>
      <anchorfile>classoperations__research_1_1PathWithPreviousNodesOperator.html</anchorfile>
      <anchor>a92762a593f0814f74b5a83cfc7406bfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a91972b2afa1739b2e93e320323b157d1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>BaseNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>af3e9d2e2469efd77e345b11b6d04e60a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>StartNode</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>abbf3cfe992573dff00462e8e616cd1ea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>path_starts</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a864082b71a99ae929d97a3eafbf9fc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PathClass</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6d45b94ec6f26f51e95bb651f56f5a59</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RestartAtPathStartOnSynchronize</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a6580d6cdf003656019a25f7e9f2d8496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>OnSamePathAsPreviousBase</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a661ecee1a13c036a57c5c75b97882462</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int64</type>
      <name>GetBaseNodeRestartPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2c309dfacbd1dc10373408446e46f118</anchor>
      <arglist>(int base_index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetNextBaseToIncrement</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad25e64910b5848f1ce0669fb00ae2270</anchor>
      <arglist>(int64 base_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a28790409d066cdf5e1aabe7346bdd8f1</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>OldPath</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a1c170be7bcefce3b86ed107bab998b23</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MoveChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aa6d431b31dc1fce0520698179e165817</anchor>
      <arglist>(int64 before_chain, int64 chain_end, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ReverseChain</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ad819515eabc14b84e8e31b574a59d2fb</anchor>
      <arglist>(int64 before_chain, int64 after_chain, int64 *chain_last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeActive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>acb067b917027c878de5284d3ee191528</anchor>
      <arglist>(int64 node, int64 destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MakeChainInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a12698134e7a71ccbe52c4ce36213f0f1</anchor>
      <arglist>(int64 before_chain, int64 chain_end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNext</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2f05e5dce708fd86775e612d08ffc08e</anchor>
      <arglist>(int64 from, int64 to, int64 path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsPathEnd</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a31f03e7418e4d1bd53d8d1212cdba731</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInactive</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aec53f03b1e4951950f970a0da7d78fc8</anchor>
      <arglist>(int64 i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>InitPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a7ae387b900a7fd695061874269c46509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetPosition</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a2a1cf2f93320e83de87b6c302f27e00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>number_of_nexts_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae108cf2f383928202b506cba66e911ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>ignore_path_vars_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a46728a21c28eaf507a20bba345d9df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_base_to_increment_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>a10f2c4277993608f09fea9244df0a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_paths_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>aadab60adab155e9fe9da3f550643d671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_to_path_</name>
      <anchorfile>classoperations__research_1_1PathOperator.html</anchorfile>
      <anchor>ae805be99530c66f840c6d99a2987c3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Rev</name>
    <filename>classoperations__research_1_1Rev.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Rev</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a49f4bb1d930408358e5678b01bc5e0c6</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rev&lt; int &gt;</name>
    <filename>classoperations__research_1_1Rev.html</filename>
    <member kind="function">
      <type></type>
      <name>Rev</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a49f4bb1d930408358e5678b01bc5e0c6</anchor>
      <arglist>(const int &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const int &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rev&lt; uint64 &gt;</name>
    <filename>classoperations__research_1_1Rev.html</filename>
    <member kind="function">
      <type></type>
      <name>Rev</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a49f4bb1d930408358e5678b01bc5e0c6</anchor>
      <arglist>(const uint64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const uint64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a612718f3f1f56d8ecce47fae4bc3592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1Rev.html</anchorfile>
      <anchor>a614fdcd3e96dc71b0c580f29026380ec</anchor>
      <arglist>(Solver *const s, const uint64 &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevArray</name>
    <filename>classoperations__research_1_1RevArray.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a361b6a1085ee10fb94ea8105dbb180a9</anchor>
      <arglist>(int size, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>ae2f2143174e00f93980d5804d3ff262e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a0c7349d7ede9ab1e16cff1096d6afe8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abad018c5f8a0e44bdfd6e17ab59612c7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abb88b59866cff9f26ebb6f29e82b777a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a6516d4adeaf28338dbc7ba2584d76919</anchor>
      <arglist>(Solver *const s, int index, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RevArray&lt; uint64 &gt;</name>
    <filename>classoperations__research_1_1RevArray.html</filename>
    <member kind="function">
      <type></type>
      <name>RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a361b6a1085ee10fb94ea8105dbb180a9</anchor>
      <arglist>(int size, const uint64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevArray</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>ae2f2143174e00f93980d5804d3ff262e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a0c7349d7ede9ab1e16cff1096d6afe8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const uint64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abad018c5f8a0e44bdfd6e17ab59612c7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const uint64 &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>abb88b59866cff9f26ebb6f29e82b777a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1RevArray.html</anchorfile>
      <anchor>a6516d4adeaf28338dbc7ba2584d76919</anchor>
      <arglist>(Solver *const s, int index, const uint64 &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevBitMatrix</name>
    <filename>classoperations__research_1_1RevBitMatrix.html</filename>
    <base protection="private">operations_research::RevBitSet</base>
    <member kind="function">
      <type></type>
      <name>RevBitMatrix</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a19ec53631a03b21642ff92537e324709</anchor>
      <arglist>(int64 rows, int64 columns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevBitMatrix</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a087c4a97694ce2632a52edea72f51390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a0460e124e790229cb2d65f74491048b4</anchor>
      <arglist>(Solver *const solver, int64 row, int64 column)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a0687c0f2721ff132b707569b69020c1d</anchor>
      <arglist>(Solver *const solver, int64 row, int64 column)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSet</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a0ef4faa41e12f5ba5d67be059eadc932</anchor>
      <arglist>(int64 row, int64 column) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a9c339ee66fb784b02d58e8b0ac2ea782</anchor>
      <arglist>(int row) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a8a660416849e9acc0f0872e61daeb3ce</anchor>
      <arglist>(int row) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>ae2bcb32bc27553f598733168bbc46fd2</anchor>
      <arglist>(int row) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstBit</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a479bd81cf7efe3194a3fcc8436334800</anchor>
      <arglist>(int row, int start) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAll</name>
      <anchorfile>classoperations__research_1_1RevBitMatrix.html</anchorfile>
      <anchor>a3389f1e156b74cfc031d8ae2edd0cf60</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adfc5252facf16d1c14409cb9a148ba74</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a2b98b0fa690a28664a4a00212833a9c0</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a6ebf10b8965ac7f2e21a3c24ab71da51</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a3ddbaa8d39c2a6861fad88aacb240bbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adebeb9934a1a83cc6819db9b36ff7d3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a78fb408f50908d312ecbd9d50aefb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstBit</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>ae4b4610d76f45afc09f6ad9590062132</anchor>
      <arglist>(int start) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevBitSet</name>
    <filename>classoperations__research_1_1RevBitSet.html</filename>
    <member kind="function">
      <type></type>
      <name>RevBitSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a7369d4e2ea1843501af11edd89199b8c</anchor>
      <arglist>(int64 size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevBitSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a72aaa0163218aec6e1ca39a8118fa584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adfc5252facf16d1c14409cb9a148ba74</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a2b98b0fa690a28664a4a00212833a9c0</anchor>
      <arglist>(Solver *const solver, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSet</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a6ebf10b8965ac7f2e21a3c24ab71da51</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a3ddbaa8d39c2a6861fad88aacb240bbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>adebeb9934a1a83cc6819db9b36ff7d3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a78fb408f50908d312ecbd9d50aefb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstBit</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>ae4b4610d76f45afc09f6ad9590062132</anchor>
      <arglist>(int start) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAll</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>a20fc5ddbc3ee9a1da7d04386f1182738</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RevBitMatrix</name>
      <anchorfile>classoperations__research_1_1RevBitSet.html</anchorfile>
      <anchor>ac9da3e5301f8c4c0ed8a261d0a0b2cbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevGrowingArray</name>
    <filename>classoperations__research_1_1RevGrowingArray.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RevGrowingArray</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>a2140cdbff14a28d0fb0d30363255f075</anchor>
      <arglist>(int64 block_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevGrowingArray</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>a3e0d45ffcf2c17ae2c7f6ec631fea636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>At</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>a1dfca41dc5907bcf0fde8b5c37c4c8c2</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevInsert</name>
      <anchorfile>classoperations__research_1_1RevGrowingArray.html</anchorfile>
      <anchor>aa66c900368ad9fa24d3a256493792330</anchor>
      <arglist>(Solver *const solver, int64 index, T value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevImmutableMultiMap</name>
    <filename>classoperations__research_1_1RevImmutableMultiMap.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RevImmutableMultiMap</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>afbd7546d603df82059ed3b8a13a3241a</anchor>
      <arglist>(Solver *const solver, int initial_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevImmutableMultiMap</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>af8f8619f77a20868de764b036066dc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_items</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>ae509969cf05f560f829ce4e0ed3aab1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ContainsKey</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>a55a49c7e6673d8ec5a30b3255899a23a</anchor>
      <arglist>(const K &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>FindWithDefault</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>a84ccc9de1e12d064f1ccf77e344dd86b</anchor>
      <arglist>(const K &amp;key, const V &amp;default_value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert</name>
      <anchorfile>classoperations__research_1_1RevImmutableMultiMap.html</anchorfile>
      <anchor>a00d0083447f546e8a43744ed5063e98d</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevIntSet</name>
    <filename>classoperations__research_1_1RevIntSet.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_iterator</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5608be2b7716304454f31dda7b3d80e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a256503b400735b79534bf87a3a433296</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>aa332f108f9a442e8765e460e7f53c496</anchor>
      <arglist>(int capacity, int *shared_positions, int shared_positions_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab7b2ae30393111b4904bc1732ea5ae91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7e1746bc4ae813f8109cffed9c227664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a2cc5cf695691d208027e25fa2483db5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>af0d0ba3d28661d12114afbb50dccfa45</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>RemovedElement</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a6ded4dd9cceb7eeffb2412df5b5187a4</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5cf1d68f60f01b5e545fa23d74386a46</anchor>
      <arglist>(Solver *const solver, const T &amp;elt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a381f8a2a726c51ac8dca0690dc94145d</anchor>
      <arglist>(Solver *const solver, const T &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7f8643d2a1bec62b4b1d4d0ac99a3cb5</anchor>
      <arglist>(Solver *const solver, const T &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a593b6d59b93e2284bbc16af121a67a98</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab40a309276a1d22ec7fe932c120934a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a87f5328273f94c5294fdbd9f3e46201b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoInserted</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a249b8be47f098c8b42b61876ed5c300f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RevIntSet&lt; int &gt;</name>
    <filename>classoperations__research_1_1RevIntSet.html</filename>
    <member kind="typedef">
      <type>const int *</type>
      <name>const_iterator</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5608be2b7716304454f31dda7b3d80e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a256503b400735b79534bf87a3a433296</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>aa332f108f9a442e8765e460e7f53c496</anchor>
      <arglist>(int capacity, int *shared_positions, int shared_positions_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevIntSet</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab7b2ae30393111b4904bc1732ea5ae91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7e1746bc4ae813f8109cffed9c227664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Capacity</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a2cc5cf695691d208027e25fa2483db5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Element</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>af0d0ba3d28661d12114afbb50dccfa45</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemovedElement</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a6ded4dd9cceb7eeffb2412df5b5187a4</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a5cf1d68f60f01b5e545fa23d74386a46</anchor>
      <arglist>(Solver *const solver, const int &amp;elt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a381f8a2a726c51ac8dca0690dc94145d</anchor>
      <arglist>(Solver *const solver, const int &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a7f8643d2a1bec62b4b1d4d0ac99a3cb5</anchor>
      <arglist>(Solver *const solver, const int &amp;value_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a593b6d59b93e2284bbc16af121a67a98</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>ab40a309276a1d22ec7fe932c120934a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a87f5328273f94c5294fdbd9f3e46201b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoInserted</name>
      <anchorfile>classoperations__research_1_1RevIntSet.html</anchorfile>
      <anchor>a249b8be47f098c8b42b61876ed5c300f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevPartialSequence</name>
    <filename>classoperations__research_1_1RevPartialSequence.html</filename>
    <member kind="function">
      <type></type>
      <name>RevPartialSequence</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>ab273214b921b4f0f5c94d36aae19c5da</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevPartialSequence</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a40ba6dc53519519055be43000fd4e656</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RevPartialSequence</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a0d7ecedc40cde479a0af4f8c7e94646c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumFirstRanked</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aa44554618d3a92a242b876b18b427783</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumLastRanked</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a3c29760912f23bd786c302a5691ddc28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a6ba090d10665f6a66b3faff7ffc09134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aef9769a57cd94675879edc12cc81be2b</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankFirst</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aedf237760f494bf43d751e390ff61c5f</anchor>
      <arglist>(Solver *const solver, int elt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankLast</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a0ce79f61cb719fccef92124ad31d7f1b</anchor>
      <arglist>(Solver *const solver, int elt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRanked</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>a09475886339637097cc4260c73fd25d8</anchor>
      <arglist>(int elt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1RevPartialSequence.html</anchorfile>
      <anchor>aae7f38d72ed4d3be42c55a308b6d6ab7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RevSwitch</name>
    <filename>classoperations__research_1_1RevSwitch.html</filename>
    <member kind="function">
      <type></type>
      <name>RevSwitch</name>
      <anchorfile>classoperations__research_1_1RevSwitch.html</anchorfile>
      <anchor>a9cbcd58bae27fd3071ba8a28ab4a4465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Switched</name>
      <anchorfile>classoperations__research_1_1RevSwitch.html</anchorfile>
      <anchor>a645543760c52a5fa5a8b27d1d4bcafd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Switch</name>
      <anchorfile>classoperations__research_1_1RevSwitch.html</anchorfile>
      <anchor>af763ccb69c3a1d9f94227f246d9c685d</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingDimension</name>
    <filename>classoperations__research_1_1RoutingDimension.html</filename>
    <class kind="struct">operations_research::RoutingDimension::NodePrecedence</class>
    <member kind="typedef">
      <type>std::function&lt; int64(int, int)&gt;</type>
      <name>PickupToDeliveryLimitFunction</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a03d51f530bab2758548a51e962f38a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RoutingDimension</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>abfcf989d8ccbc8d02d2b2704ec96f763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a5bef0de22a2f6fc1478082358ef80f38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetTransitValue</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a5d7e7a4f88775c10240bbe838d2e13ee</anchor>
      <arglist>(int64 from_index, int64 to_index, int64 vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetTransitValueFromClass</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a7d37150530f088112906877bf54dc4d9</anchor>
      <arglist>(int64 from_index, int64 to_index, int64 vehicle_class) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>CumulVar</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a541eec636cf28916ff1d27749a5a075c</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>TransitVar</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a1fc838c052835bfc676c98c39348f60d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>FixedTransitVar</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>ae0795ddfd30eaaec1b9b68c25d681ffa</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>SlackVar</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>aca1511ec6086af772f1c0de24bc80036</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>cumuls</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a520037b2703dd61ff94f7f775c31316b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>fixed_transits</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>acec74fa72a4a455543d6d850b13058b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>transits</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a2429f90135681f8a51fe5c598683150a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>slacks</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a96a618c496ecee054c3708a5949ad5c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; SortedDisjointIntervalList &gt; &amp;</type>
      <name>forbidden_intervals</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a83297ba42788582d369696579addde1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>vehicle_capacities</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>af749da37fdb4dd5ebfc941a372e18d2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RoutingModel::TransitCallback2 &amp;</type>
      <name>transit_evaluator</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a81824038e89413cb3a1970104829cf81</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const RoutingModel::TransitCallback1 &amp;</type>
      <name>GetUnaryTransitEvaluator</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a57ff38168114496e87dc253924fb3e46</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreVehicleTransitsPositive</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a3c7253f12e84337a20296ce54f528c9e</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vehicle_to_class</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a8bf186bfb9a793f0e92273a6b4998f90</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpanUpperBoundForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>abd077a7b29a7cfc99880172440e14d09</anchor>
      <arglist>(int64 upper_bound, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpanCostCoefficientForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>afc5f8f71a501b59e65b5c5f970c27c69</anchor>
      <arglist>(int64 coefficient, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpanCostCoefficientForAllVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a44bf0c1d2c603b8255765ddd081fa40f</anchor>
      <arglist>(int64 coefficient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetGlobalSpanCostCoefficient</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>ab29859c22398d47a8590b3524e3a442a</anchor>
      <arglist>(int64 coefficient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCumulVarPiecewiseLinearCost</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a6052d6bba75371db7e8ea84675187c73</anchor>
      <arglist>(int64 index, const PiecewiseLinearFunction &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasCumulVarPiecewiseLinearCost</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>aa6c7d741202e530624ba3165132f6fa2</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewiseLinearFunction *</type>
      <name>GetCumulVarPiecewiseLinearCost</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a4d1d9795fd5d3679da87017897fd4f9b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCumulVarSoftUpperBound</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a8a84f4cd89001eab25832a01bccf982a</anchor>
      <arglist>(int64 index, int64 upper_bound, int64 coefficient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasCumulVarSoftUpperBound</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a5800f4776910a275f768050d832d1948</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetCumulVarSoftUpperBound</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a487493a16430f10f26366689017701bd</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetCumulVarSoftUpperBoundCoefficient</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>adcbe383e7ba8630ae23256e98810b6b9</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCumulVarSoftLowerBound</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a3234a1f4aab23c4c4828b6321a5ec906</anchor>
      <arglist>(int64 index, int64 lower_bound, int64 coefficient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasCumulVarSoftLowerBound</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>ae6dd1772ef933bfe97628d0034450266</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetCumulVarSoftLowerBound</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a569e5105983007797f224986a331dc70</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetCumulVarSoftLowerBoundCoefficient</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a2bbbf40328825ffe853e5969eee63f5a</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBreakIntervalsOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a6e43db91425269dda98c59586731f660</anchor>
      <arglist>(std::vector&lt; IntervalVar * &gt; breaks, int vehicle, int pre_travel_evaluator, int post_travel_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBreakIntervalsOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a91a8bad350970afc848ae3726fb1f465</anchor>
      <arglist>(std::vector&lt; IntervalVar * &gt; breaks, int vehicle, std::vector&lt; int64 &gt; node_visit_transits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBreakDistanceDurationOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a5303e0e6657cb3efed3c7068eb193c86</anchor>
      <arglist>(int64 distance, int64 duration, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeBreaks</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>aa224ac17be74c79927c18ef4a4b6705d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasBreakConstraints</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a11db411ac857ec2153cd61c3e3296f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBreakIntervalsOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>aaf017f4f85b78139a428e8a38da4c2a0</anchor>
      <arglist>(std::vector&lt; IntervalVar * &gt; breaks, int vehicle, std::vector&lt; int64 &gt; node_visit_transits, std::function&lt; int64(int64, int64)&gt; group_delays)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntervalVar * &gt; &amp;</type>
      <name>GetBreakIntervalsOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a07c6cdc82e267942b967f53e6010a82c</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; int64, int64 &gt; &gt; &amp;</type>
      <name>GetBreakDistanceDurationOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>aa771a4b1f09590ad4132fbf90f524abe</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPreTravelEvaluatorOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>af929083de8b7e19f2d06d6ee2112b5a5</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPostTravelEvaluatorOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>aa9acd23f51d4ba7c0e050db0bf27d9f5</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension *</type>
      <name>base_dimension</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>ade704c2189c4dfde1ace86100f9c363d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ShortestTransitionSlack</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a15f32489aad9f7d42d76514dff27ccca</anchor>
      <arglist>(int64 node) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a818dcdf6c1102cb0876393a153ef4249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReverseArcListGraph&lt; int, int &gt; &amp;</type>
      <name>GetPathPrecedenceGraph</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>ad3420be5f4b38fd143302fecc1d118bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPickupToDeliveryLimitFunctionForPair</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a87f365465eb17819cd0d2f332080b113</anchor>
      <arglist>(PickupToDeliveryLimitFunction limit_function, int pair_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasPickupToDeliveryLimits</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a30f89b5e42a78e894ea37b3e3d34ec9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetPickupToDeliveryLimitForPair</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>abd6b9d007b59cb549ecdb5a1e6d42cc9</anchor>
      <arglist>(int pair_index, int pickup, int delivery) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNodePrecedence</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a55bd9a9e03538855c7cee2eec4378622</anchor>
      <arglist>(NodePrecedence precedence)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; NodePrecedence &gt; &amp;</type>
      <name>GetNodePrecedences</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a23c18b8de8ac3a05ffd9e0a5a5af7798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNodePrecedence</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a00ffdae5c50c4edd8247e84a139b574e</anchor>
      <arglist>(int64 first_node, int64 second_node, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetSpanUpperBoundForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a6712bb9e01fe65384bad646d06919132</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>vehicle_span_upper_bounds</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a0a4ec0cb288bbf7da0549a73c1addd1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetSpanCostCoefficientForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>aa2496cac569779842d4427758da56f1c</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>vehicle_span_cost_coefficients</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a395471c25d63a4af009b498581b8ac28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>global_span_cost_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a474925b9a253658d4610eb6a3a35be0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetGlobalOptimizerOffset</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a7f3c0cb6e8972660736e0bf89ef7d306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetLocalOptimizerOffsetForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a17fc6c0b2c2e09eb94c5c812e3919cd0</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSoftSpanUpperBoundForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a619aa0df1d2c81eab70de0f764e11f24</anchor>
      <arglist>(SimpleBoundCosts::BoundCost bound_cost, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSoftSpanUpperBounds</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a8b71e53aa7d38fbcb7c07a0f98d1bd61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimpleBoundCosts::BoundCost</type>
      <name>GetSoftSpanUpperBoundForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a7ee4f5c15d4e68cf4a01a86d4baa2952</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RoutingModel</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>ab7aef297f0c654af26dc7108c9ee6c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RoutingModelInspector</name>
      <anchorfile>classoperations__research_1_1RoutingDimension.html</anchorfile>
      <anchor>a00141bd90e555aea59a9e98cfbcda6eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</filename>
    <base>operations_research::IntVarFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>RoutingFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ae6327458dc6df1a7bf82901c6dee263d</anchor>
      <arglist>(RoutingModel *model, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RoutingFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a13396ec79f3ac918808ec66786331cb8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>af80ac7c7333a0515de2155c463c4344e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aca201d99227a6116c62418d28761aa9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingIndexManager</name>
    <filename>classoperations__research_1_1RoutingIndexManager.html</filename>
    <member kind="typedef">
      <type>RoutingNodeIndex</type>
      <name>NodeIndex</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a31feb605a82521fcdb67d19c4f962f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingIndexManager</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a7e8c8961302fc7f090b47a9e033fbcc8</anchor>
      <arglist>(int num_nodes, int num_vehicles, NodeIndex depot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingIndexManager</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>ac6807748d881051e31a0e3eb159e040d</anchor>
      <arglist>(int num_nodes, int num_vehicles, const std::vector&lt; NodeIndex &gt; &amp;starts, const std::vector&lt; NodeIndex &gt; &amp;ends)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingIndexManager</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a82d6a798a50025f837067d76138c0c24</anchor>
      <arglist>(int num_nodes, int num_vehicles, const std::vector&lt; std::pair&lt; NodeIndex, NodeIndex &gt; &gt; &amp;starts_ends)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RoutingIndexManager</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>ab562f3b60e709b0b24b3e46981888f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_nodes</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>aa39ba437f2fe2c07c43721cbfb2a6f0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_vehicles</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>aa99aa264a338e0273b3ad8c55813ff95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_indices</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a29739c908b5719c47582a640d7f250f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetStartIndex</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a43b46864861a1796f1d3b254094a7402</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetEndIndex</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a84c8bf3d701466adf783114b05c12aa6</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>NodeToIndex</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a3a51bf2b84f28075c50aca511c910053</anchor>
      <arglist>(NodeIndex node) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int64 &gt;</type>
      <name>NodesToIndices</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a1f4bf04c9419fb97c29b98438f00ef2a</anchor>
      <arglist>(const std::vector&lt; NodeIndex &gt; &amp;nodes) const</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>IndexToNode</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a28e0e70a85074c1e9d2286e2bcaa229e</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_unique_depots</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a148a071cb5a92fe73501c7c299ed5eb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; NodeIndex &gt;</type>
      <name>GetIndexToNodeMap</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a7b0e55ac5b352520c29311973023ac82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gtl::ITIVector&lt; NodeIndex, int64 &gt;</type>
      <name>GetNodeToIndexMap</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a4e8ca31394b4a07aa8acbb73881bb460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64</type>
      <name>kUnassigned</name>
      <anchorfile>classoperations__research_1_1RoutingIndexManager.html</anchorfile>
      <anchor>a2d397cd2af41ff1e0dd035c3ea1e65e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingModel</name>
    <filename>classoperations__research_1_1RoutingModel.html</filename>
    <class kind="struct">operations_research::RoutingModel::CostClass</class>
    <class kind="struct">operations_research::RoutingModel::StateDependentTransit</class>
    <class kind="struct">operations_research::RoutingModel::VehicleClass</class>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044a73b2e79d6934957ec86f60a69036e055</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_SUCCESS</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044afb2bbe1690a8f9be1575ade98e4e61dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_FAIL</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044acaf3d0fb83c0c1be4881362c0e2e0592</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_FAIL_TIMEOUT</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044aa8b79310730408de7bae61835301a93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_INVALID</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044ae8dec7482ea889627be2d6a72dead305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PickupAndDeliveryPolicy</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab3feb42fa0a2f09b014d55818dae2285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PICKUP_AND_DELIVERY_NO_ORDER</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab3feb42fa0a2f09b014d55818dae2285a7da05b352a875f222b611ace4d9875a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PICKUP_AND_DELIVERY_LIFO</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab3feb42fa0a2f09b014d55818dae2285ad27c7b752389c8da858fb6edafe443f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PICKUP_AND_DELIVERY_FIFO</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab3feb42fa0a2f09b014d55818dae2285abad32d53044f07d2c49e028c49ce8699</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingCostClassIndex</type>
      <name>CostClassIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>afe7d1738a6e31d3383b70f93e061ae19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingDimensionIndex</type>
      <name>DimensionIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a6367809b1620d6adc85ef4e05354a69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingDisjunctionIndex</type>
      <name>DisjunctionIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a29920bb103087553829238476a5e58f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingVehicleClassIndex</type>
      <name>VehicleClassIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aee6e2a165e35ef474327b460af80c444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingTransitCallback1</type>
      <name>TransitCallback1</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>adbd56cf1cca85c203b23e097f4962079</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingTransitCallback2</type>
      <name>TransitCallback2</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a40eca6feb4e3e04786969e3be70e115e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingIndexPair</type>
      <name>IndexPair</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1d089ac73991f47ab890015844821fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RoutingIndexPairs</type>
      <name>IndexPairs</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a9bdd93b2f509dfa6b54c6b0deff06547</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; StateDependentTransit(int64, int64)&gt;</type>
      <name>VariableIndexEvaluator2</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a8bd1b7e02a872f5006fc6d1fb611ef45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; std::vector&lt; operations_research::IntVar * &gt;(RoutingModel *)&gt;</type>
      <name>GetTabuVarsCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a86838ac04a7edcfb44901dfa60c2fbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_NOT_SOLVED</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044a73b2e79d6934957ec86f60a69036e055</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_SUCCESS</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044afb2bbe1690a8f9be1575ade98e4e61dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_FAIL</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044acaf3d0fb83c0c1be4881362c0e2e0592</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_FAIL_TIMEOUT</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044aa8b79310730408de7bae61835301a93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_INVALID</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a328a19213729eec49288128061bc2044ae8dec7482ea889627be2d6a72dead305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PICKUP_AND_DELIVERY_NO_ORDER</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab3feb42fa0a2f09b014d55818dae2285a7da05b352a875f222b611ace4d9875a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PICKUP_AND_DELIVERY_LIFO</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab3feb42fa0a2f09b014d55818dae2285ad27c7b752389c8da858fb6edafe443f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PICKUP_AND_DELIVERY_FIFO</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab3feb42fa0a2f09b014d55818dae2285abad32d53044f07d2c49e028c49ce8699</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingModel</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a133bcfc7ce89b429f6530dd686090b27</anchor>
      <arglist>(const RoutingIndexManager &amp;index_manager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingModel</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>acfbbd779055254461aa032b70c3748fd</anchor>
      <arglist>(const RoutingIndexManager &amp;index_manager, const RoutingModelParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RoutingModel</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a6ee4a1c4dda01e2138f79ed5ec913754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterUnaryTransitCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a82ee9c63870a985cbad7ee8474375a26</anchor>
      <arglist>(TransitCallback1 callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterPositiveUnaryTransitCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a14427509278088e0b8b6200fb6ac4142</anchor>
      <arglist>(TransitCallback1 callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterTransitCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a439d2323fda3bc9c0fed5ea6a26a9959</anchor>
      <arglist>(TransitCallback2 callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterPositiveTransitCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aec8f72732aa9e71b4f73e3c7c9ca8db8</anchor>
      <arglist>(TransitCallback2 callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterStateDependentTransitCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ad947cbbf8cadf9e8a490af1a90003978</anchor>
      <arglist>(VariableIndexEvaluator2 callback)</arglist>
    </member>
    <member kind="function">
      <type>const TransitCallback2 &amp;</type>
      <name>TransitCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>abb7ab8a55087f57f586e3f31c9b7e056</anchor>
      <arglist>(int callback_index) const</arglist>
    </member>
    <member kind="function">
      <type>const TransitCallback1 &amp;</type>
      <name>UnaryTransitCallbackOrNull</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a9d65835b0c42e83ca3d458a1768ca5f2</anchor>
      <arglist>(int callback_index) const</arglist>
    </member>
    <member kind="function">
      <type>const VariableIndexEvaluator2 &amp;</type>
      <name>StateDependentTransitCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a84e53d2c1eb7349f1b561511b1c09dc4</anchor>
      <arglist>(int callback_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a131d4c961e4b230a6c3c383794a2777c</anchor>
      <arglist>(int evaluator_index, int64 slack_max, int64 capacity, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimensionWithVehicleTransits</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ad4b1ac7c7cb83dcb18b44cfec23dd05b</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;evaluator_indices, int64 slack_max, int64 capacity, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimensionWithVehicleCapacity</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a68270d21b64082e48e97e53b6ca5392a</anchor>
      <arglist>(int evaluator_index, int64 slack_max, std::vector&lt; int64 &gt; vehicle_capacities, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimensionWithVehicleTransitAndCapacity</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a68555e5e1e1b3fdf046fa53e837cd702</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;evaluator_indices, int64 slack_max, std::vector&lt; int64 &gt; vehicle_capacities, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddConstantDimensionWithSlack</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a9326109b713b0cfd3dd343f781ba97e1</anchor>
      <arglist>(int64 value, int64 capacity, int64 slack_max, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddConstantDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a7d0c59eb20fb03d8f368112257897a54</anchor>
      <arglist>(int64 value, int64 capacity, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddVectorDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a2134e3ee786c7dd1aa4b63952aad2d6f</anchor>
      <arglist>(std::vector&lt; int64 &gt; values, int64 capacity, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddMatrixDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab7b1e5a42560f26ed7f995b76ec15f6f</anchor>
      <arglist>(std::vector&lt; std::vector&lt; int64 &gt;&gt; values, int64 capacity, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimensionDependentDimensionWithVehicleCapacity</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ad04036dfcdbabf07b6505094f1388514</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;pure_transits, const std::vector&lt; int &gt; &amp;dependent_transits, const RoutingDimension *base_dimension, int64 slack_max, std::vector&lt; int64 &gt; vehicle_capacities, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimensionDependentDimensionWithVehicleCapacity</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a4b0b427cd9432bc419a461768059f47f</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;transits, const RoutingDimension *base_dimension, int64 slack_max, std::vector&lt; int64 &gt; vehicle_capacities, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimensionDependentDimensionWithVehicleCapacity</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1ac3acc6ac3424f4d02573bfd8abd6d1</anchor>
      <arglist>(int transit, const RoutingDimension *base_dimension, int64 slack_max, int64 vehicle_capacity, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddDimensionDependentDimensionWithVehicleCapacity</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a915f943819ac6af181965b484d090f55</anchor>
      <arglist>(int pure_transit, int dependent_transit, const RoutingDimension *base_dimension, int64 slack_max, int64 vehicle_capacity, bool fix_start_cumul_to_zero, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathSpansAndTotalSlacks</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>afcff5f6b59be6367a1a12a272e3fcefc</anchor>
      <arglist>(const RoutingDimension *dimension, std::vector&lt; IntVar * &gt; spans, std::vector&lt; IntVar * &gt; total_slacks)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt;::std::string &gt;</type>
      <name>GetAllDimensionNames</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a71b067e7126e5f17d7e1b6342a9e206d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; RoutingDimension * &gt; &amp;</type>
      <name>GetDimensions</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aeba5d5fb90261d1d5623867d83451f1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; RoutingDimension * &gt;</type>
      <name>GetDimensionsWithSoftOrSpanCosts</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aec4bdb48024c20b5752d933d9167367e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; RoutingDimension * &gt; &amp;</type>
      <name>GetDimensionsForGlobalCumulOptimizers</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a773fae0db72dfde5e53d3acdfd7bb43c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; RoutingDimension * &gt; &amp;</type>
      <name>GetDimensionsForLocalCumulOptimizers</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a6f5eed3e36f6aa1c7f8aac09da2a1ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab835ab18242ef46463ee90b2ac0f5532</anchor>
      <arglist>(const std::string &amp;dimension_name) const</arglist>
    </member>
    <member kind="function">
      <type>const RoutingDimension &amp;</type>
      <name>GetDimensionOrDie</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ad5fe4a5d7eb87b42e7b03367190c8ffc</anchor>
      <arglist>(const std::string &amp;dimension_name) const</arglist>
    </member>
    <member kind="function">
      <type>RoutingDimension *</type>
      <name>GetMutableDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a6a6c8be51a3d05f5cb97fa3086e9c161</anchor>
      <arglist>(const std::string &amp;dimension_name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPrimaryConstrainedDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ad60b94c48c83cf50117e794a47ae52a3</anchor>
      <arglist>(const std::string &amp;dimension_name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetPrimaryConstrainedDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>af35ab759f7e5191bb4063a58907be20c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DisjunctionIndex</type>
      <name>AddDisjunction</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a7481e54940f75acd2516f5a24ff1039e</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;indices, int64 penalty=kNoPenalty, int64 max_cardinality=1)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; DisjunctionIndex &gt; &amp;</type>
      <name>GetDisjunctionIndices</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a8cf13f984b08926eec39011f2900e3e5</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForEachNodeInDisjunctionWithMaxCardinalityFromIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a99c987ce821236f8a515abc5f3a5cdcb</anchor>
      <arglist>(int64 index, int64 max_cardinality, F f) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>GetDisjunctionIndices</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a0ebd6a8e2d8df31945e7c48fcf863e19</anchor>
      <arglist>(DisjunctionIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetDisjunctionPenalty</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>acc8ac0271bb8bc39e13a3f78ff84ce41</anchor>
      <arglist>(DisjunctionIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetDisjunctionMaxCardinality</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ad797a6fa63d267c5f6e4ddf169f20037</anchor>
      <arglist>(DisjunctionIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfDisjunctions</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a061296e63bb9b679a5f21d4dc47f5ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; int64, int64 &gt; &gt;</type>
      <name>GetPerfectBinaryDisjunctions</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aaa5632d48aaacc026bc225e844d1168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IgnoreDisjunctionsAlreadyForcedToZero</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1bb1958cfb9d49fe7111e4e31a451d00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSoftSameVehicleConstraint</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a590ef751764239fd5791eee398f3633e</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;indices, int64 cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAllowedVehiclesForIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae98935a4e6cc9b3d6aeee4f9ff273d7d</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vehicles, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVehicleAllowedForIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a803a75bbbec4ca2c54d9b1733badfa7c</anchor>
      <arglist>(int vehicle, int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPickupAndDelivery</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a8dda4344799edeaf641f0395a74ed89e</anchor>
      <arglist>(int64 pickup, int64 delivery)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPickupAndDeliverySets</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a0404ffbec749cce477e7b2a642dfe3fa</anchor>
      <arglist>(DisjunctionIndex pickup_disjunction, DisjunctionIndex delivery_disjunction)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
      <name>GetPickupIndexPairs</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a2918eb9215035fde11373440a52e7b3c</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
      <name>GetDeliveryIndexPairs</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a83b0784e48b4aae48ac1dec580e45887</anchor>
      <arglist>(int64 node_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPickupAndDeliveryPolicyOfAllVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a0f538f8401c264daa39df1f3640dd468</anchor>
      <arglist>(PickupAndDeliveryPolicy policy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPickupAndDeliveryPolicyOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a23e3efd1501595077fdc99ca53d6979e</anchor>
      <arglist>(PickupAndDeliveryPolicy policy, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>PickupAndDeliveryPolicy</type>
      <name>GetPickupAndDeliveryPolicyOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a079c7e7c178df9c8eb78d1059db288c9</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumOfSingletonNodes</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab931655cab881f03c89b34d0e213e938</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexPairs &amp;</type>
      <name>GetPickupAndDeliveryPairs</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a22500d001958a1597c08c402dcd4a2f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; DisjunctionIndex, DisjunctionIndex &gt; &gt; &amp;</type>
      <name>GetPickupAndDeliveryDisjunctions</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aa8eaa33768d96224ca4dc89f5070133a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVisitType</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a7aca0f50d5357b2b4cf406406a15e6d6</anchor>
      <arglist>(int64 index, int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetVisitType</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a16cf2a63e593f4b6cc70565db770e3a1</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseVisitTypes</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a7ab97192fbe5b6439fa0b560df7c0689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfVisitTypes</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ad6be50659666986288d06fbeee22ff22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddHardTypeIncompatibility</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a0cebd494809958d447b3bf5993eef05d</anchor>
      <arglist>(int type1, int type2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTemporalTypeIncompatibility</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>afc493b34ee2a2bc9742dd54492901a11</anchor>
      <arglist>(int type1, int type2)</arglist>
    </member>
    <member kind="function">
      <type>const absl::flat_hash_set&lt; int &gt; &amp;</type>
      <name>GetHardTypeIncompatibilitiesOfType</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab8ccb1a9bcfdf50ecb4aa82d74797e0e</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>const absl::flat_hash_set&lt; int &gt; &amp;</type>
      <name>GetTemporalTypeIncompatibilitiesOfType</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a37fa78a9cd717c2665ff079047170d08</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasHardTypeIncompatibilities</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a039399df9f7c140d7764348a299f2e2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasTemporalTypeIncompatibilities</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a25d7e7d5dbcc14b53deec276a7c4465e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSameVehicleRequiredTypeAlternatives</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a05a9af20750c8aa7d65d8bd33113934c</anchor>
      <arglist>(int dependent_type, absl::flat_hash_set&lt; int &gt; required_type_alternatives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTemporalRequiredTypeAlternatives</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>afc52d1e36860c09fbcef8a47d24ac2ec</anchor>
      <arglist>(int dependent_type, absl::flat_hash_set&lt; int &gt; required_type_alternatives)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; absl::flat_hash_set&lt; int &gt; &gt; &amp;</type>
      <name>GetSameVehicleRequiredTypeAlternativesOfType</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a091daf73790830202a7e07696baddbc0</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; absl::flat_hash_set&lt; int &gt; &gt; &amp;</type>
      <name>GetTemporalRequiredTypeAlternativesOfType</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1ad79105bab19769698e822bdbc01374</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSameVehicleTypeRequirements</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>adf4b63aab9c6783079e9ef62de4f4c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasTemporalTypeRequirements</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a11fd41c63803a869709e1640e99aa3f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasTypeRegulations</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a4f701a6c16a01de56b43c5e82df7bd2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>UnperformedPenalty</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1bc6555892b6fa99e01f2d61188c9616</anchor>
      <arglist>(int64 var_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>UnperformedPenaltyOrValue</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ac7aced00988489c59aa4e2dacb23fff7</anchor>
      <arglist>(int64 default_value, int64 var_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetDepot</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a5cc55676794916626c6f2b765c3fe1a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCostEvaluatorOfAllVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ac1c68af59fa5513cf66fa4fd11acea29</anchor>
      <arglist>(int evaluator_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArcCostEvaluatorOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a9132fa5b050c3f5447e62f3e8bd8ce77</anchor>
      <arglist>(int evaluator_index, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedCostOfAllVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a9b44345e2ffce5df2256937137377bd4</anchor>
      <arglist>(int64 cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedCostOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1f1cc6902bb1371d03eaca05fdf23078</anchor>
      <arglist>(int64 cost, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFixedCostOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a307bdd7ab9fd4d0937453187a12777fe</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAmortizedCostFactorsOfAllVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aae44a9844e3f39a409f65d5c920c6f4d</anchor>
      <arglist>(int64 linear_cost_factor, int64 quadratic_cost_factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAmortizedCostFactorsOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a120ee9e22b95e835052b9eace2ceccc0</anchor>
      <arglist>(int64 linear_cost_factor, int64 quadratic_cost_factor, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>GetAmortizedLinearCostFactorOfVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae7ef1e5f2a4d25729723f8af92c87eef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int64 &gt; &amp;</type>
      <name>GetAmortizedQuadraticCostFactorOfVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>af7e6b8420135274a38673f39b651038d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConsiderEmptyRouteCostsForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>af738937221d1f3307e4b3fcf53913335</anchor>
      <arglist>(bool consider_costs, int vehicle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreEmptyRouteCostsConsideredForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aa5be2501ed079defc43d5f85a3afa1f3</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const Solver::IndexEvaluator2 &amp;</type>
      <name>first_solution_evaluator</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a7ed4bf32507041543e643ea19afa5769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFirstSolutionEvaluator</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1242887846452455f037883d1f3b0238</anchor>
      <arglist>(Solver::IndexEvaluator2 evaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a421504809966a6abc4cd725c48780060</anchor>
      <arglist>(LocalSearchOperator *ls_operator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSearchMonitor</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a4928a8a9f21302a215a6f26dda90eef1</anchor>
      <arglist>(SearchMonitor *const monitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtSolutionCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aba790701618919c85a0469d42a7c0baf</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVariableMinimizedByFinalizer</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a0a9781d4ed69c53f960925bcd9078340</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVariableMaximizedByFinalizer</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aadaebb0f2b74d02cedcec9fd25e15921</anchor>
      <arglist>(IntVar *var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWeightedVariableMinimizedByFinalizer</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>af6341300dc5286169dc713de00c12658</anchor>
      <arglist>(IntVar *var, int64 cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVariableTargetToFinalizer</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a83353bc0169bd873c36c364344386c6e</anchor>
      <arglist>(IntVar *var, int64 target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseModel</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae84602b98050ad382d725e35326aab3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseModelWithParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a593aa2f5d78d3e9506248ef6b36769f0</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ac1ab76e616858766abd3715a4c721c9a</anchor>
      <arglist>(const Assignment *assignment=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>SolveWithParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a7d12150ee107484d0f8fa303f468358d</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters, std::vector&lt; const Assignment * &gt; *solutions=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>SolveFromAssignmentWithParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a6665b219d44195e3c2a83bbba25819eb</anchor>
      <arglist>(const Assignment *assignment, const RoutingSearchParameters &amp;search_parameters, std::vector&lt; const Assignment * &gt; *solutions=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssignmentFromOtherModelAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab003e312046f4b6e8aecb188de21f2c8</anchor>
      <arglist>(Assignment *target_assignment, const RoutingModel *source_model, const Assignment *source_assignment)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>ComputeLowerBound</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ab94b51a3ffa939b647cc2fc0eeff8400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ac5f26040018e9122bf9c0d28a9e1d412</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>ApplyLocks</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a9ffc92ce7c3dc0668e774e46964346c2</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;locks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyLocksToAllVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>af75ccc20172b1e28668556099d687a48</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; int64 &gt;&gt; &amp;locks, bool close_routes)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *const</type>
      <name>PreAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a4cfd057283c52c001eb900fc86006ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>MutablePreAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a07dcedb57dc4c0d0b148de6358476c09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aa1f829437dc19706c08a9daeed54f719</anchor>
      <arglist>(const std::string &amp;file_name) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>ReadAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>adeda839db7e3e6143aed24c6acfa6a63</anchor>
      <arglist>(const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>RestoreAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae216fb62532ff4f5a638fae2203ba311</anchor>
      <arglist>(const Assignment &amp;solution)</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>ReadAssignmentFromRoutes</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a3191910e726092b97da9a2f42bd21a10</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; int64 &gt;&gt; &amp;routes, bool ignore_inactive_indices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RoutesToAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a72acea2ba6937e467a3e0f1fcf9a9e07</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; int64 &gt;&gt; &amp;routes, bool ignore_inactive_indices, bool close_routes, Assignment *const assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignmentToRoutes</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>abe74143af4dbf4e80df3920cdc7ee19b</anchor>
      <arglist>(const Assignment &amp;assignment, std::vector&lt; std::vector&lt; int64 &gt;&gt; *const routes) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>CompactAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1f9eb39bee00004576f6248bf108b2a0</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>CompactAndCheckAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a45b86199287b76de49ed2003a0e66a92</anchor>
      <arglist>(const Assignment &amp;assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1a11f61fc549eed60a0ee9fe937fbac6</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntervalToAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a872d806bfea0935a2c351652e10fc2b7</anchor>
      <arglist>(IntervalVar *const interval)</arglist>
    </member>
    <member kind="function">
      <type>const Assignment *</type>
      <name>PackCumulsOfOptimizerDimensionsFromAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a045099195126752409704a77f0eab073</anchor>
      <arglist>(const Assignment *original_assignment, absl::Duration duration_limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweepArranger</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae48174b58c5258d6b2daeb4fca88a48c</anchor>
      <arglist>(SweepArranger *sweep_arranger)</arglist>
    </member>
    <member kind="function">
      <type>SweepArranger *</type>
      <name>sweep_arranger</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a0591ecab04c4c36001712568b10096a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddLocalSearchFilter</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1a4f38992e3f63d9c763c9f5b044ece6</anchor>
      <arglist>(LocalSearchFilter *filter)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>afa4da02fe3e4da6443c2799bcfc15f20</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>End</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a31d54fd638363c65a2fcd56139327c02</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStart</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a94eb02e45a52976b41f26989b052904f</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnd</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae3de9e12abc48a51ad1622eea5fb4bf9</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VehicleIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a34af72cc2a878066c1dfc35885249c59</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>acd71894a70fca99a12ba2a1173666efc</anchor>
      <arglist>(const Assignment &amp;assignment, int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsVehicleUsed</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aa305f3d5a5e471e9f6c8295d1216fecf</anchor>
      <arglist>(const Assignment &amp;assignment, int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>Nexts</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aae35870db721604857ab17079e410fbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVar * &gt; &amp;</type>
      <name>VehicleVars</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a6ae84e190aea5f82c4438611c276544b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>NextVar</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a06c0f6488d296613184081d6350431e4</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>ActiveVar</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae40b7faab3c2928890f6c167722f5139</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VehicleCostsConsideredVar</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a2504e372b510ddac6d7e1512c112bbab</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>VehicleVar</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>abf27caa0ebb8551a9ddf534d366edc62</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>CostVar</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>affd7737c4d7f315afc863b135c7a07cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetArcCostForVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ada533b400c991befad313f9e1269ef67</anchor>
      <arglist>(int64 from_index, int64 to_index, int64 vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CostsAreHomogeneousAcrossVehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a37e0a9a2bd517334820c866e23245d81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetHomogeneousCost</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1fa509a8eb9225fa21a1416e99358eb1</anchor>
      <arglist>(int64 from_index, int64 to_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetArcCostForFirstSolution</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>adf9855f60a0004fa53b2e2ff9cab3fce</anchor>
      <arglist>(int64 from_index, int64 to_index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetArcCostForClass</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aafc36e116dccb18d7329298d616730fd</anchor>
      <arglist>(int64 from_index, int64 to_index, int64 cost_class_index) const</arglist>
    </member>
    <member kind="function">
      <type>CostClassIndex</type>
      <name>GetCostClassIndexOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a38f27ac044864dd33032491e9b2e1ce0</anchor>
      <arglist>(int64 vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasVehicleWithCostClassIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a1ab61f24fca741345f0269f1c6152396</anchor>
      <arglist>(CostClassIndex cost_class_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCostClassesCount</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a4400a3099548b3c4bbd0fab5611a9ac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNonZeroCostClassesCount</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aba0fdad13b78526349c1279f7127fe78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VehicleClassIndex</type>
      <name>GetVehicleClassIndexOfVehicle</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a50d290af9bc33121c1b41aa025c94893</anchor>
      <arglist>(int64 vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetVehicleClassesCount</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a3f8592ab5c60bfd642baa295965e476b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>GetSameVehicleIndicesOfIndex</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aa2a20dbd0b88b1b117c92bc7d3cc9c77</anchor>
      <arglist>(int node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ArcIsMoreConstrainedThanArc</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a05ecbf2a7e39b8984ebd2ae5167912d8</anchor>
      <arglist>(int64 from, int64 to1, int64 to2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugOutputAssignment</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae8bd0c46cd06795dea6004ddf2090567</anchor>
      <arglist>(const Assignment &amp;solution_assignment, const std::string &amp;dimension_to_print) const</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a5e052b69c4c4cf9b4c8c436371fd6dcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckLimit</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aabc49d06184afabc880b2229eba42729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>absl::Duration</type>
      <name>RemainingTime</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>aad12402a06e0218f32702da13668397a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodes</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ade2d9581bd56ce19dbf32e87bf23fc02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vehicles</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a7d8863c2b094d74220f01bfea6c11dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a94c6a775655099c6e0b81d586f21838f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetNumberOfDecisionsInFirstSolution</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a199d66aa4a8c9ed2800e33e14e1bc55f</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetNumberOfRejectsInFirstSolution</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a128ac07ace4447a2ec5102c9e1294a6b</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMatchingModel</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a51028a4ae2d42271b7fa4a8a1a32cce6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTabuVarsCallback</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ac924ca5a03e432c1cd5c598174243269</anchor>
      <arglist>(GetTabuVarsCallback tabu_var_callback)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeGuidedSlackFinalizer</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae6bec3395bdf63ec2491af18437ce1d1</anchor>
      <arglist>(const RoutingDimension *dimension, std::function&lt; int64(int64)&gt; initializer)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSelfDependentDimensionFinalizer</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>abff38c9125218758df2a429ccb02e118</anchor>
      <arglist>(const RoutingDimension *dimension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RoutingModel::StateDependentTransit</type>
      <name>MakeStateDependentTransit</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>ae4cc1f7c4664633064b0ee42e1e5eec6</anchor>
      <arglist>(const std::function&lt; int64(int64)&gt; &amp;f, int64 domain_start, int64 domain_end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; LocalSearchOperator &gt;</type>
      <name>MakeGreedyDescentLSOperator</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a9d9ca555f7ae2d4e6626cac68388b5c7</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; variables)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64</type>
      <name>kNoPenalty</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a5294e423796b0028f665ccc35967c199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DisjunctionIndex</type>
      <name>kNoDisjunction</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a629a50e24cbacd010a82452b3e477551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionIndex</type>
      <name>kNoDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a64af81f9d1bfc4c7d89caa9966f402ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RoutingDimension</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a50ba9dd11704e0be7edaa9e9f24142ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RoutingModelInspector</name>
      <anchorfile>classoperations__research_1_1RoutingModel.html</anchorfile>
      <anchor>a00141bd90e555aea59a9e98cfbcda6eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingModelParameters</name>
    <filename>classoperations__research_1_1RoutingModelParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingModelParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>afdad94942cbf733b3fee507f71622f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingModelParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a4bb0f3152e7d11541640fbf5173e7c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingModelParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>adaacca6ad64833a84af634b302d0346e</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingModelParameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a278f1b03e836775ebff77c290655076b</anchor>
      <arglist>(RoutingModelParameters &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a35a1ad7467c77c92554475f81ddc6e1b</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a8707e1e11dce153e8651da3ca2d9f2d4</anchor>
      <arglist>(RoutingModelParameters &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ae3393532483f41ce1eeed2e5a7d05ebe</anchor>
      <arglist>(RoutingModelParameters *other)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a54379035b1b78c1e85904d2ed2a63f29</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a41c83c109325681148f10d91b2bd3b52</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a4cddd5d691c8e9690f40b6a59307983b</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a9f4e28be5238b67f1ed343975ce60d8e</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a1b36ce4778eeedfcea39bda0667d6a48</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a7109fe9204809f7aef11758f6649f88d</anchor>
      <arglist>(const RoutingModelParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a9028b846fdac994323201f2688a584f6</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>af504378589b4a79573c9c8514756a0c1</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a36b7f3be041fed113519d0412309d0b2</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a04874835bf05c3c49f10e9b4aa7312aa</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a533d483c5f6b2cc13a447bcbdda9fd4c</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ae69c245d41f9e591e2e61712025523f2</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a7bd3a0b0d00956d299030f05bbfc1e8d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a8944262133306b0c357cd9e08246887d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ab3944feb979a5bd40059d0df0c13f495</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a18e18b1f7b035786a7d088588c9b1e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::ConstraintSolverParameters &amp;</type>
      <name>solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a41fba391a8dedcf4e5e92fd752833128</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::ConstraintSolverParameters *</type>
      <name>release_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ac29b72c52181f2e70f8a7fa534037bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::ConstraintSolverParameters *</type>
      <name>mutable_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a6832823fcad80b2ad67e987fa7ffe8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_solver_parameters</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>afe6672369c7e44db9ce84e8434961b83</anchor>
      <arglist>(::operations_research::ConstraintSolverParameters *solver_parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_reduce_vehicle_cost_model</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ab51b5389c0df261b637b3b1e1de9d79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduce_vehicle_cost_model</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ab64e41aa01a412274682e9402fc1bebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reduce_vehicle_cost_model</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>abea7aae1148de95e0344b7ec85aa5bf8</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_max_callback_cache_size</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a9e294616e90daec8e41dd2ec9597ba65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::int32</type>
      <name>max_callback_cache_size</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a5ac81f7414e329f3471406a680dc5a6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_callback_cache_size</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>abd724c580cfc1d2f6d175eb2a70d0bbe</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a0ac98b6114c27295901dffd09c0f2a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>GetDescriptor</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a406bb75560f8e4c64cc958d1c6cbff18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Reflection *</type>
      <name>GetReflection</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a99df7228a605fd8ca998c1bf511ac440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingModelParameters &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>abee30e8e2d8409d27fba944b8d205639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>ad6d1dfc03401a626eae05eefe96fba2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingModelParameters *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a86370068930dfd75ac7bbc2c67cfa59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a7ec3895aebd9e70db52d9e143b6f0ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolverParametersFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a2b34e77065fab2c168410c5a5660d1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kReduceVehicleCostModelFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a1068497c47c57423825df8185c45a613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kMaxCallbackCacheSizeFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a8e49da56f7912096d973085b907d69fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a9b35d94da3444084fc3673b7717b6cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a3725cba34a2c4cf2f5bedae614b8f396</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1RoutingModelParameters.html</anchorfile>
      <anchor>a53621a310ee365c6b6c19203cc203349</anchor>
      <arglist>(RoutingModelParameters &amp;a, RoutingModelParameters &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingModelVisitor</name>
    <filename>classoperations__research_1_1RoutingModelVisitor.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLightElement</name>
      <anchorfile>classoperations__research_1_1RoutingModelVisitor.html</anchorfile>
      <anchor>af36da3725766b38931ad9bdea1d02321</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kLightElement2</name>
      <anchorfile>classoperations__research_1_1RoutingModelVisitor.html</anchorfile>
      <anchor>a298cdf70368e0a1ba9137532da8b331c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>kRemoveValues</name>
      <anchorfile>classoperations__research_1_1RoutingModelVisitor.html</anchorfile>
      <anchor>aa9ca73520ead4a8a507a2a44e881f6bd</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingSearchParameters</name>
    <filename>classoperations__research_1_1RoutingSearchParameters.html</filename>
    <member kind="typedef">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators</type>
      <name>LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae9c2ab5bf48d1fe4cfb7bfc0fc2bebd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3ebebd04797082998191c4865bb61836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingSearchParameters</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afb11d70a8d3a047f89433638fdf45151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a55fd2cea6ee3ad51fcb8f0cdd482f2aa</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4eee9f11c2ca4ed4c300608e3b471d96</anchor>
      <arglist>(RoutingSearchParameters &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a348b079cbf2b95ab0eab656bd9cfa7c6</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3567bb2acdefdb608b666fed6713dcfa</anchor>
      <arglist>(RoutingSearchParameters &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1485493a8e00aa3da5c9e9574b720789</anchor>
      <arglist>(RoutingSearchParameters *other)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4038e1ff3388e520e93644997b57c95e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad0070439a2653a9747d69e6bd65c39ba</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a48c87e5bb4eb225dfd080c78160edbb4</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3ca84e6c13226d3e182525bff85179af</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a0129646baf0eb66a3396f0aec5fabcf3</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a90f013ebf4dc532f613e90f5e5be41c6</anchor>
      <arglist>(const RoutingSearchParameters &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab6665fd25f69b301974eee15a2f82b50</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1a20350a8f135fdbea7c17341aeeff94</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9276abf5c09d1c1b617a66028888dbbe</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1869a8f644cad7d247df8333f84103fe</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a18da174cd2726fb319cb2a5e1710eabd</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a64d7fd8d8665ab5c8c9f5cbed58578a0</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aeb2580921b8ac0a78c48016e06e89250</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>abefcdb0e966f37fdc1552e0c0627e8ee</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac4fec1bd91425e0cab225744c8b904f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6c39d07295c8926de51b2e3853d966d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;</type>
      <name>local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a68969abc9cbc5ddded015ed506252043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>release_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab95bbaddd525714f687a67e30759329a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>mutable_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a2c83cf50ca68658632468540023bdce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_local_search_operators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a0644db6c5d4d21856df416804feb7c36</anchor>
      <arglist>(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators *local_search_operators)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa515396c8da2225c6337914b5039750f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa2f205b13d5e7116aea38ce188f8e582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PROTOBUF_NAMESPACE_ID::Duration &amp;</type>
      <name>time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4d507cb3a94f1e2a4d13aeacd85e2d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_NAMESPACE_ID::Duration *</type>
      <name>release_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1425a7c936c6b0f166a9c18d77bbc61b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_NAMESPACE_ID::Duration *</type>
      <name>mutable_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6e85767c5e223f1094b2f1c8ecaee04e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a322afc1d48aecbc157a02103d4d878be</anchor>
      <arglist>(PROTOBUF_NAMESPACE_ID::Duration *time_limit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac36b55a164cee49019c287405dc33f1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae6ab26ac341f80b09d566ee2116cb2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PROTOBUF_NAMESPACE_ID::Duration &amp;</type>
      <name>lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae24f1aa98fc1e57bfab7684917ab0fc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_NAMESPACE_ID::Duration *</type>
      <name>release_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa0cebfea8df38d6587721e5d66b558a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_NAMESPACE_ID::Duration *</type>
      <name>mutable_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a732502fa2d23aef9fb1bd043161d1b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allocated_lns_time_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1c6db3213bf663cf2ae4b39297c7531d</anchor>
      <arglist>(PROTOBUF_NAMESPACE_ID::Duration *lns_time_limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aec7e131724c8eca871bc59635952372b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::FirstSolutionStrategy_Value</type>
      <name>first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af48e67ba8b79e2ea3623a7c212b9134a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a27f84d3444da958ce18ce12328b8cb49</anchor>
      <arglist>(::operations_research::FirstSolutionStrategy_Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_local_search_metaheuristic</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a320e21fa027978349fa0e7d07b095d28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::LocalSearchMetaheuristic_Value</type>
      <name>local_search_metaheuristic</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5b33a15f6d47c499a38178bea7665755</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_local_search_metaheuristic</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6abf775a5c0d49fb7afebd20c74ecd9c</anchor>
      <arglist>(::operations_research::LocalSearchMetaheuristic_Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_guided_local_search_lambda_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac0560872ceac723e5a559ac96d7915d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>guided_local_search_lambda_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad8c0ce45e81f005ce79928c6f1088b51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_guided_local_search_lambda_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3df5206348dd8c6fc8995c9c7da5557c</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_optimization_step</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a084b288d03fec365b65ff5e5a3df3969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimization_step</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad9a7d3e6b7b93e94ef4bc7be2a78c465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_optimization_step</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1fc0effbfc3704123793b41259356e75</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_solution_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa3e76406744121dbdaff09cf05bef998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::int64</type>
      <name>solution_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4f1f250bddea1a6599b5b837b4225ddf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solution_limit</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae708cb7297edb2bbc1ac59d763cf46df</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_unfiltered_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a7587e88a111fad0bf7caeb261ab909eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_unfiltered_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab3835ed60e4d5a378a7bf7260f989ccf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_unfiltered_first_solution_strategy</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4b0db38580363eaff967d06d051237ff</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_add_reverse_arcs</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6a97140f5bbb5d77c2234d87ba5b030d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>savings_add_reverse_arcs</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a2429ff72bff026987d57df8dd780c562</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_add_reverse_arcs</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad5e7242eef0b350b1a4a2f67b06cc1e3</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_parallel_routes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a1c6c100cf977567526dd354dd6a68e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>savings_parallel_routes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3521245970cf4b5d5900817cbf1ad193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_parallel_routes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5c2cd8aee2b77f3efd61948af727f1ed</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_depth_first_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a872483e58ff68789e5bf657c0e35d2c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_depth_first_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a188d6dd3a1437850241baebdc6afca79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_depth_first_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aca7cf993b90688de55ab1906ce91c508</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_full_propagation</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae8d3db0c2fa5544a52332c14eeb3b322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_full_propagation</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6505ada2e282e5087adc51c33b50ce03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_full_propagation</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af2c8d452e2cb97eec288ae3aa1492277</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_log_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a26ce21f7880e813d93c037070439bd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>log_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aaf476b89538a276241f4d338c62ab75f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_search</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aaf1b42a9d49d63338e1a40534adc9774</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a564071cf1e2ff83fe85d7f69422479bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>savings_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6624e8fd8baf86d6d2d797c80feda0b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afe2e72abc2a24addc99be960a8379757</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cheapest_insertion_farthest_seeds_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3907ad028ff31c05f3aeed8a868628cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cheapest_insertion_farthest_seeds_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a660bd7154f1b592fbbbaa4a476a6cf84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cheapest_insertion_farthest_seeds_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad7180e2de72679a13fc07c87d4c3ec68</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_arc_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa5aeb18542a8954d30d5f51784ac09c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>savings_arc_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a383d6d60d4cea3c94cdbaa0e726a3b44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_arc_coefficient</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a610397056479071b8d7bb14c440fe8f0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_number_of_solutions_to_collect</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a35e37cb9c2effd7a1e5cd358ac8ed9ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::int32</type>
      <name>number_of_solutions_to_collect</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a2698bb92760d1ed4cf8bab4170c23f90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_solutions_to_collect</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab9173079730e18028276cc9be34774ba</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_relocate_expensive_chain_num_arcs_to_consider</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a945eb8b8eb4e4787ba17a59b501b0edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::int32</type>
      <name>relocate_expensive_chain_num_arcs_to_consider</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af680f3539ecda882c8355ea873be63c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_relocate_expensive_chain_num_arcs_to_consider</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a53824ced8b76aec5a70c1aa6d1d35524</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_cheapest_insertion_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aebd5664630e3f8cbbfcf20ca7fb35379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cheapest_insertion_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab15c2f8de30263f80deecfd18ffc5c8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cheapest_insertion_neighbors_ratio</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aefda3c065a20d3bf37fc7ab8e12c110a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_log_cost_scaling_factor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aac55bca4724b851fbca779e7478a7ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>log_cost_scaling_factor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a488c616b0ed0fadf8fae77b20117f9b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_cost_scaling_factor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac361bb92350b2457cdb0bdf19b716d7b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_savings_max_memory_usage_bytes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afd6209900a861e0531022b851d0ada21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>savings_max_memory_usage_bytes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a34e40d6430b082da40ba360377bbc8e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_savings_max_memory_usage_bytes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9994025ade25001367602a5f0ab28b41</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cp_sat</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af71f7ee8d6de5a31e53fd0f87aacc73b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cp_sat</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a612f34f61de2a9ab92c3ba6e9156c314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cp_sat</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a033aa59eccc8958a2e3f11a1c7cd6a99</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cp</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>add9531fb1bc1b70ebbf82568b54a8432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cp</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ac18551a293ce40ebb3fd9dfd6c702617</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cp</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af061e852cc23ec2935da9207314d31b0</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_log_cost_offset</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a52682c96f003fe3ab9febed73af4af59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>log_cost_offset</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3b153ed0eca7b2f05066e966053ca7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_cost_offset</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aede613e15b53e6167f59223039c71ec6</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af6ad14ec80cd0aaa5a3c38bb5fdff1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>GetDescriptor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad48d8cc40769ca6c429eee6bdeb1eeef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Reflection *</type>
      <name>GetReflection</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa686a6d8e9b59bdbe4b6220a669af79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a469b79075b1b2930b0f0cf01df5c4acb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af55cfc340c8bc113ae339f39bb96ea7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9293671b05731fa026edf1fc2983bc1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a4c19af59c051b0f41b277840af3a8331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLocalSearchOperatorsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>afa85217d35e1cd60ed48bf231af629a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTimeLimitFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad5d3500ba749436e10df70a480973339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLnsTimeLimitFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa34d9b1f0807c613bc4db29b6d7b813d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFirstSolutionStrategyFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a7d8739943f5934fa2fb91d0be1f1c55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLocalSearchMetaheuristicFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa6740442fcb7939d4dc96c8fdb1b5242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kGuidedLocalSearchLambdaCoefficientFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5eff2563afd69852a6de1b13781d5c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOptimizationStepFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a6316dab0abefe4751ef5a1c635caddf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSolutionLimitFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa5648799298498b0d3d4d64e7b03af22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseUnfilteredFirstSolutionStrategyFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af95f0237bac0e32f37decf70dc5a6f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsAddReverseArcsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a5872bf0016424fa6f676b957d1072b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsParallelRoutesFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae5b76d4f9c2ddfa783bc92abdcb09329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseDepthFirstSearchFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad031494b74e858b683fe5ef24cf6f6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseFullPropagationFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>aa298a77fe9be78754bf7aa775127b2bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLogSearchFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a8f7ccaba670d1cb618c1e7b235dca07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsNeighborsRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>af5d91b519ed85efb5658a6e929ff4071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCheapestInsertionFarthestSeedsRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a98244ea3247b5cf50308709cf458a45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsArcCoefficientFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ad3a6f066ba0a1d20c4ab2f556bf204af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumberOfSolutionsToCollectFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ace771632537655c45ce15b59e28831bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRelocateExpensiveChainNumArcsToConsiderFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a2c56a2874242ce89291532ddc2189b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kCheapestInsertionNeighborsRatioFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a0bc1d0fc879a4757543da7f9387d5701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLogCostScalingFactorFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a24c83cadd312b2b7c3dbfca7c630ee19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSavingsMaxMemoryUsageBytesFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>abb75713d45dab5ce9195269ff72db30b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCpSatFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ab6e3f6619d0309ebf05503b76aa06972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCpFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a81c71dac58ad69cb3911fffe65603587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLogCostOffsetFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a98ba3030e12a891406932488e2d5fc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a9b35d94da3444084fc3673b7717b6cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>a3725cba34a2c4cf2f5bedae614b8f396</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters.html</anchorfile>
      <anchor>ae84554ba011e00f7f2b63e8d931d5748</anchor>
      <arglist>(RoutingSearchParameters &amp;a, RoutingSearchParameters &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
    <filename>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae47428188eb51b3105f791f5fbac264a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad0cae1c922a1ac42e28d28b54ec9a7de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a326073788f3a70c79fac807a1477ad59</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingSearchParameters_LocalSearchNeighborhoodOperators</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a99e08d5b88d969e35185ff0fe0e2de67</anchor>
      <arglist>(RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4c85d35217f4c46199421cc1ad5539a2</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6c115cb1769d451dd6083d02c5e8d776</anchor>
      <arglist>(RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;&amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0fddc9ba2652e3db4367a2479f237177</anchor>
      <arglist>(RoutingSearchParameters_LocalSearchNeighborhoodOperators *other)</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4e9a471cf4a9a7cf26e3330f9ad84ff0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>New</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9bc8e9e89d3cecab2dc4389b16f750e7</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a82ffbadc4ec6da8b5441c39587fa3161</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa700f43a308254ec29619f19fcb1606e</anchor>
      <arglist>(const ::PROTOBUF_NAMESPACE_ID::Message &amp;from) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aaf686416a8fadfbf910677938f438c5a</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f376e3b98e860a5915f80e0d54d2981</anchor>
      <arglist>(const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>PROTOBUF_ATTRIBUTE_REINITIALIZES void</type>
      <name>Clear</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4017804a6736b916028fdcb68d3c04f7</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af28f46ea45c243df1614367a9dd6a153</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ByteSizeLong</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6ddd61e463211acb7159007dcc3693a4</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a403e8dbc128f61e200f89b18b410b088</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a00b225a54d6aae501e3fff4708e3092a</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::uint8 *</type>
      <name>InternalSerializeWithCachedSizesToArray</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac9626532b28350ffb7a9e644de3c1497</anchor>
      <arglist>(::PROTOBUF_NAMESPACE_ID::uint8 *target) const final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0aba2999d1b70afb2587c1d6475dc398</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>::PROTOBUF_NAMESPACE_ID::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aac9fb20a2060070b2ffd2bebc9d7b1d8</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a230f5cf52875b450b0e40a0f9a8e5e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a72f0760c6c6518c3b614ca411438b7f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae3038a38ed0a060aaabc33d5630e0fd4</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3070a58c12759775de03432d22b6615a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0af3e1f6654ed478f27e0cc51f5840eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a632373dbbabddc8592b40b77e311a119</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_neighbors</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a15f9cc5fc4bef01a207fc95d64a0c132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_neighbors</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4e3227337336df48f1bb2508df1cf3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_neighbors</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a74a52ead774585e8d56449a1975139f3</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a68c0111476c567ae58ec35caf3a70ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>adaecb96a87207e7c0c0b76ec703f82b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a90c84b969cb78ea44f16306d92d921ae</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cross</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6cdae3b658db6bdb1df24f00ac32dd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cross</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a307eacf4e6207f272adfaaec3d41238a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cross</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a91574463e1b75d075dc50714d448cfaa</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_cross_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac781239fc4db54d70699250c1c1ffa2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_cross_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aed15e0e49c9ea20b15de19f6ccd8cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cross_exchange</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a7bcba3350c59b5d66de72500dca7f2b4</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_two_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aca7e635e800ba0079c4cab2847df61e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_two_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa0e4f4fdb7dd0b5272eea4e0a822e7f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_two_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a481e97fd5701168fe5f284ccfcc3edaa</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_or_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9dc4cf17f71e636d4028e45877db063a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_or_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aea610bd2a7345eb87f430fcf5f0a76f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_or_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a16d6e36b8db4ef561f7d5759d9503cd2</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_lin_kernighan</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a83bd811a7f136cec39a4b788f4352d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_lin_kernighan</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f7de24b072589c4f8a1b21877691516</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_lin_kernighan</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad2ce190e3e25a559c5f40deb3fc4ff92</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_tsp_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae1def3e7542d0d477807d92f0670b697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_tsp_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a71b0753a25be3adc76246eaecc63f309</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_tsp_opt</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa5a14c23b0a5141fc9b39d63f93c46cd</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9a5970fbf9944235e0b53d59e3727fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aaaed915d0acee86ec00d8b4ccd9b838e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad531e75dbd4e5c7c755b11e74fbeb32e</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_make_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac30a897b3b86645e651543c0a1f353aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_make_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac5880b230b7a3a1bc68e515ab5f4b431</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_make_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a5be3bccafc6e66071ffddf921c3d7fc7</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_make_chain_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af096601661641aab74d3de22b97b58a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_make_chain_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a49d5206fe2a24d7971ebd88d9257ed1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_make_chain_inactive</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af38652e8facbab6173863a7c4978e82e</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8f40cf916624c2a3bf05a7a2049133c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac5550d3ba24c30c9a51b5c5c3153ad58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8d98de205c74b06b9d36a2c653a7b808</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_extended_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f3735b4f814b78851ea96915b64d339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_extended_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aed4dedd3c764cfe42a3f691ac8447571</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_extended_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a562e6ab7a0131f5014edc0430c9b5f69</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a958c1b72b739d677d9e08963057e007b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae09f2d161d225893aea8854d76d295c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a531f81a95ff15f041547c649368be42a</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_full_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa8017ac4bce6d07a1404ba5f03ae6451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_full_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a059e0bbaf042e908b507f6d00c0d1673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_full_path_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a6f050abc08b3161533f1e82c1f6a8457</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_tsp_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a497c1baca581a7284915872af903606b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_tsp_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>adc00bbb17a79a673c89f759b6d0a8150</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_tsp_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>afed9e3f369e1c1d602e61ebae5c421ee</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_inactive_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9eea49b82dc1d001a3d4c031f9eed4c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_inactive_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a86b1e8fa66fe1541f228bfa4d4d1879b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_inactive_lns</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a2c51705e431db3ddfc16d83df127baad</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_node_pair_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a1590182483cd181f6099145529b0e06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_node_pair_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3a1d40654033e8a4da601d5c7d537ab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_node_pair_swap_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aba362f929446a16fc7aa21580b90e8ce</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_and_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a5b99f531a6bcc0f05ad1b541143352c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_and_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac3adc8ef73aef7fe39636aa76786a352</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_and_make_active</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a46814098b9fb77510884dbb40d473496</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_exchange_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a107da49b01f17cddc8c9951c576f3ddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_exchange_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad76980e005b4f8a8443b1596a11ee983</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_exchange_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3d80b55ab5a050a5ed346165ed42fa48</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_expensive_chain</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4590615f891473567ba449cdc22f4aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_expensive_chain</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a95755e42abde9ebd94ec988c1ac224e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_expensive_chain</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a7204e83642c4d2d75c743c5d98b4163a</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_light_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a909303a6dabf36773b2fbe04867691cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_light_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a64d68c203000cd83e8498ebb9abfb267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_light_relocate_pair</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a94ad5e84bc837ff15d2574a76c545d53</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_relocate_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>af74a292cc582ce4ee9ff6cae5eab246f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_relocate_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a1a8ae6fe7218b64f428710f9bd0080e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_relocate_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aafd303be0b8ae647eaa469c0b1c9bbc0</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_use_exchange_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4015a578936b92ad9a09489afb8a6533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::operations_research::OptionalBoolean</type>
      <name>use_exchange_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a947a41c9df467f957c8b108a8c1f479d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_exchange_subtrip</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae62ae1c64ba2a30b57bca4fe1d95a5fe</anchor>
      <arglist>(::operations_research::OptionalBoolean value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0c792b421c32f23a32c6837a1eb40151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Descriptor *</type>
      <name>GetDescriptor</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a56a9edb13fa45cca809473c8a1fb1e63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::Reflection *</type>
      <name>GetReflection</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aad3da82d490fd69c7170310c40b7fa12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;</type>
      <name>default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8169591c4680b5573a604f12c19ccd26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitAsDefaultInstance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a07b454ea900a54b27d874c23d5eab0f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RoutingSearchParameters_LocalSearchNeighborhoodOperators *</type>
      <name>internal_default_instance</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8df6cd486de00caf9f62a7c65e1cb0ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kIndexInFileMessages</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a2e6fcbf2f106f7c3b83ed23980c70671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8957561323597e8ec40096aa5021bd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocatePairFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac8d6803e7aa0a43599c2d198fb16c033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateNeighborsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ab17920abb6adc2871e96c8268559a219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExchangeFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>aa3518b044136521b3db52c1a154c1f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCrossFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae40afdad397e6dbefeabcb8e837c8d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseCrossExchangeFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a25fcf132549c0f7f0b4fd3918b18ced2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseTwoOptFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ac9d7a72c0e8e59daea9570f0cce26d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseOrOptFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a91f80509715f5bc632a1b5ddc1b49342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseLinKernighanFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a361877f45c960f129aac9082ce4ab69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseTspOptFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a425914c72c81c29cec0a438bc34c226e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseMakeActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8050a9d716d38b8635f5f42b17bf33f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseMakeInactiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad9969a97f659c5eb0258890ecc7e68f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseMakeChainInactiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a26a7a1a210a1223e8ac1352fb95fc814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseSwapActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4b6cfeb00e79f918b7835c4ea5301194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExtendedSwapActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ad76434ed05a01c38b75d86cef4e63f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUsePathLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a4abfc166779e1600a0565aafb475b8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseFullPathLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a8e68c44e5512969e9a1e68ed27075ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseTspLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>afa94a22dd191bcfcbaf6b26a0c077eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseInactiveLnsFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ae8ad375f52f717d5a2d2e84b4efea16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseNodePairSwapActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a425944d792011d74e2d9412156b69c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateAndMakeActiveFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>ab4370ae401df335370ec65e48989b4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExchangePairFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a0524d136bbf2f6398c4c110bf7e1c43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateExpensiveChainFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a1079943d12df6125c91c1a6eb55933ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseLightRelocatePairFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a496f5775eb3e789fa203f1713db74d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseRelocateSubtripFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a124ce0bf1f707e09480d477e174a697a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kUseExchangeSubtripFieldNumber</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3881a1d5a28948206cccb19fc1afc423</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a9b35d94da3444084fc3673b7717b6cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>a3725cba34a2c4cf2f5bedae614b8f396</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classoperations__research_1_1RoutingSearchParameters__LocalSearchNeighborhoodOperators.html</anchorfile>
      <anchor>acf809ead2fb840544f259378908a3e75</anchor>
      <arglist>(RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;a, RoutingSearchParameters_LocalSearchNeighborhoodOperators &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SavingsFilteredDecisionBuilder::SavingsContainer</name>
    <filename>classoperations__research_1_1SavingsFilteredDecisionBuilder_1_1SavingsContainer.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>operations_research::SavingsFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</filename>
    <base>operations_research::RoutingFilteredDecisionBuilder</base>
    <class kind="class">operations_research::SavingsFilteredDecisionBuilder::SavingsContainer</class>
    <class kind="struct">operations_research::SavingsFilteredDecisionBuilder::SavingsParameters</class>
    <class kind="struct">operations_research::SavingsFilteredDecisionBuilder::VehicleClassEntry</class>
    <member kind="function">
      <type></type>
      <name>SavingsFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a028086ef5737e56b82277a95d62d9082</anchor>
      <arglist>(RoutingModel *model, RoutingIndexManager *manager, SavingsParameters parameters, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SavingsFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a2281f5265083aa57e0310b2c51c05976</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9c4a14a25e1129acbd541c76c7822c05</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aca201d99227a6116c62418d28761aa9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int64, int64 &gt;</type>
      <name>Saving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a596ce0cfecc75e1a45cbe815e9c5de18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>ExtraSavingsMemoryMultiplicativeFactor</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>afa8569a5b82da8d6bb57e35b7517f210</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>BuildRoutesFromSavings</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9b7bf0e47b172ff320c8937add2f82c9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetVehicleTypeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a4e87652a0defe5e88e5ee40f9747e8e4</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBeforeNodeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>af8dfaa8561042682ba1e695a9cf8e485</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetAfterNodeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9e4db1eb4f2bca5ca9eaec95324ae691</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetSavingValue</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a2d95b0c5e4e1261ae146ea37744e164e</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>StartNewRouteWithBestVehicleOfType</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a79f476b7736fd94c99a5a3b19af51144</anchor>
      <arglist>(int type, int64 before_node, int64 after_node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>type_index_of_vehicle_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a95726fed5ab591f1934d5f427d58f5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::set&lt; VehicleClassEntry &gt; &gt;</type>
      <name>sorted_vehicle_classes_per_type_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>aa8b26c3fe240f025e6af46a2772503cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::deque&lt; int &gt; &gt;</type>
      <name>vehicles_per_vehicle_class_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a34732976d70ea1b9bd96bbed44970007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; SavingsContainer&lt; Saving &gt; &gt;</type>
      <name>savings_container_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a37e4260ae243381402603fe3c3bca94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SavingsFilteredDecisionBuilderTestPeer</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a416ab434cf84e1360200462a2e66bd84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::SavingsFilteredDecisionBuilder::SavingsParameters</name>
    <filename>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1SavingsParameters.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>neighbors_ratio</name>
      <anchorfile>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>a9f5ec178dd09b148ac19bb0e8ae31430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_memory_usage_bytes</name>
      <anchorfile>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>a1a0c163bea7d2946ebb3448b6a961015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_reverse_arcs</name>
      <anchorfile>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>aabdb307989bb13b36c48f1915bb2940e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>arc_coefficient</name>
      <anchorfile>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1SavingsParameters.html</anchorfile>
      <anchor>a8ccb365bfb92ed5e4fd99cdf69d3f437</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SearchLimit</name>
    <filename>classoperations__research_1_1SearchLimit.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>SearchLimit</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>ae853c8ceb480c9d8e8ba355108c9b816</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SearchLimit</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a0fe1a712b9cd0ea7dbb96a590d1684f7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>crossed</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5fce652e4e80c2ac089bdd70281feeb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Check</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a1cfadc6db5f71ebf750ab119a110d9f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>aabfdc25c6657291757a2230513d51162</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a8f26a36c2c4d7738c37eba2ae7e26f3e</anchor>
      <arglist>(const SearchLimit *const limit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SearchLimit *</type>
      <name>MakeClone</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a011a3a7171696f1f440d753dcd5a1136</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>aa184196d0761829d7df21643bc498a01</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a4d58c37975405a86ef02fd0fdd7ed34f</anchor>
      <arglist>(DecisionBuilder *const b) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a5e78de48144b2c4446fb2847a525a061</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a3ce36720ef2cd8490199ac815d07a1d1</anchor>
      <arglist>(Decision *const d) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SearchLimit.html</anchorfile>
      <anchor>a1e65e704ea5249bc9c346b46449ff1ba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SearchLog</name>
    <filename>classoperations__research_1_1SearchLog.html</filename>
    <base>operations_research::SearchMonitor</base>
    <member kind="function">
      <type></type>
      <name>SearchLog</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a83116fcc9628ff5947683d1b22c4366f</anchor>
      <arglist>(Solver *const s, OptimizeVar *const obj, IntVar *const var, double scaling_factor, std::function&lt; std::string()&gt; display_callback, int period)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SearchLog</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aec010491a37dfd342f3dc881461734a5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aeadd9144f22750344a8d9bb727195182</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>ad1c8c5d6118dd4ba3e27d8e38bcee0d2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a42dcd4deb1a7865add8800a8b4645c27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a070cd3a6cc16d608bdd36d3acfcd6192</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a290b7238507e711ea719b38a65d1d002</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a5ea81d186550720183bf3e3ef120b339</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aabfe35ed51f64c6386f38c97a4752e33</anchor>
      <arglist>(Decision *const decision) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>ae5f089b3b2b0731086bd6787416e7f41</anchor>
      <arglist>(Decision *const decision) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OutputDecision</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a3552cd62545e80d0ca632ac31911d0d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Maintain</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>afc544b08813308dcf1652885f7ad6dac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>aa432e517e9a910a0f84fab7b46627f10</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a8a93918c1aa6f9518b9f88ed71611069</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>ae853a2dfed7755b376ccbee1c534682f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OutputLine</name>
      <anchorfile>classoperations__research_1_1SearchLog.html</anchorfile>
      <anchor>a06414d7293575b4b9ac5b7b7daa3b57d</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::Solver::SearchLogParameters</name>
    <filename>structoperations__research_1_1Solver_1_1SearchLogParameters.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>branch_period</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>a71a927cbad9edffb0f6bed715809c251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptimizeVar *</type>
      <name>objective</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>aa0b92206253b0409db49ebda4632b90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntVar *</type>
      <name>variable</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>ae40b4b440b5b9e79ed7cd50b444a5466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scaling_factor</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>a61e516d58793110b2d8bca05ac810a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; std::string()&gt;</type>
      <name>display_callback</name>
      <anchorfile>structoperations__research_1_1Solver_1_1SearchLogParameters.html</anchorfile>
      <anchor>a95a779b76301c3b1241e93f26332adb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SearchMonitor</name>
    <filename>classoperations__research_1_1SearchMonitor.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>SearchMonitor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa13f15c14e3a5237526cf6215f3b3077</anchor>
      <arglist>(Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SearchMonitor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a10ccf64fe0a40e01816b20818a32b8b6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a705ae4bfa396632c23d65f37793391f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVar</name>
    <filename>classoperations__research_1_1SequenceVar.html</filename>
    <base>operations_research::PropagationBaseObject</base>
    <member kind="function">
      <type></type>
      <name>SequenceVar</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a5cd7df5031e4b9e89532c03f542078aa</anchor>
      <arglist>(Solver *const s, const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; IntVar * &gt; &amp;nexts, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequenceVar</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a280b3b63fee8247cc2b89a5ec877497b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>af92814129c466409ff4c004002c2034d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DurationRange</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a12e4526c316b3d49b8cd8cb91a037118</anchor>
      <arglist>(int64 *const dmin, int64 *const dmax) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HorizonRange</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a55eba26b207c5fda44e8b94baa6d9d26</anchor>
      <arglist>(int64 *const hmin, int64 *const hmax) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ActiveHorizonRange</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a281b19bdc37eed61de45be3ad8745550</anchor>
      <arglist>(int64 *const hmin, int64 *const hmax) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeStatistics</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>aad89b1d091262e23caf515cae51ba10c</anchor>
      <arglist>(int *const ranked, int *const not_ranked, int *const unperformed) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankFirst</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>ae44ab42e06f43ced3bd04b251965b73f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankNotFirst</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a245d9693519203fc1a9d406684829812</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankLast</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>aa0e28d22da71b3976d56f59a14e08854</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankNotLast</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a4e4a8cbd11cbf363fe073dca6e757b37</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputePossibleFirstsAndLasts</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>ac8f9d8f2220c77dd4f79a652e6aa7b88</anchor>
      <arglist>(std::vector&lt; int &gt; *const possible_firsts, std::vector&lt; int &gt; *const possible_lasts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RankSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a6993f8721564fc5be685998aa3e4ed47</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;rank_first, const std::vector&lt; int &gt; &amp;rank_last, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a9af118a9bace50fc7a94224578757a32</anchor>
      <arglist>(std::vector&lt; int &gt; *const rank_first, std::vector&lt; int &gt; *const rank_last, std::vector&lt; int &gt; *const unperformed) const</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>Interval</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>adcef8966bcacea28d9ad6e554bd92a4f</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>ae6327825d9ed07ea7e97ac731e4d6ff8</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>size</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a80930826abef932c86f9f751daa04ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SequenceVar.html</anchorfile>
      <anchor>a7004fb329da93aea538284d1213d0cc3</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVarElement</name>
    <filename>classoperations__research_1_1SequenceVarElement.html</filename>
    <base>operations_research::AssignmentElement</base>
    <member kind="function">
      <type></type>
      <name>SequenceVarElement</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a40179b14fb9451e5d8f6fc3666a6caa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarElement</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>ac5f3f869b023af1f5580ed913bdb962f</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a7aad1cd8d56d5d85aaad8face6643e64</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVarElement *</type>
      <name>Clone</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a6f2f3905bb0616011690eca0f83dd589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a6459f3a116d5253c4080fd2a3d52585b</anchor>
      <arglist>(const SequenceVarElement &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>SequenceVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a88093f53d27e3a7a7a183a615223ab54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Store</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a4019a1b4cf9db5ed6885421d9e038c41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a136038294620a9a9d575eae64a3019eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadFromProto</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>af1c4120e8b1b34d629b0b2fae26e2b26</anchor>
      <arglist>(const SequenceVarAssignment &amp;sequence_var_assignment_proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteToProto</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a25c73fd837475a0ae2ca740a1eb4d0aa</anchor>
      <arglist>(SequenceVarAssignment *sequence_var_assignment_proto) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>ForwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a4c16de890c82a38ac4d26499a2617a74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>BackwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a752ba08cda16ac39c27e6e110e76e7f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Unperformed</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a23bf65206e3c559e50748433229155bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a9240cc020d1d179aeb4ff57993ac822a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;forward_sequence, const std::vector&lt; int &gt; &amp;backward_sequence, const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>aa416720977aa00d0f25d352166f4f005</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;forward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a7296d95d6ce7890ff1ace7779dee8755</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;backward_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnperformed</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a60768b9a65cc2b1f9b22dded7572556d</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;unperformed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Bound</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a5439b37d5c44ae4c1b22b85073a82d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a363efa1fc4e42a235e80aa881aa56dd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a2dde19669941089f5262965a4de3fb8a</anchor>
      <arglist>(const SequenceVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classoperations__research_1_1SequenceVarElement.html</anchorfile>
      <anchor>a41b758288965e16fa33baf041c7d981b</anchor>
      <arglist>(const SequenceVarElement &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a065f45865ec10318174fad87f6b00075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>a878af7bb76cdf04d84eb523d6deeb696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1AssignmentElement.html</anchorfile>
      <anchor>aaa91977feff42f876d7cd00556ab94f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVarLocalSearchHandler</name>
    <filename>classoperations__research_1_1SequenceVarLocalSearchHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a10225ec8088a15a7b023e430f942ee8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>afe4c3c52a3f4f9af98a3e751c6f21823</anchor>
      <arglist>(const SequenceVarLocalSearchHandler &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a14031a3e973566f504b4d125fb74e76a</anchor>
      <arglist>(SequenceVarLocalSearchOperator *op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToAssignment</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>aef9a34fb85f40837a20077b21ac8bb53</anchor>
      <arglist>(SequenceVar *var, const std::vector&lt; int &gt; &amp;value, bool active, std::vector&lt; int &gt; *assignment_indices, int64 index, Assignment *assignment) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValueFromAssignent</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a837a3c961ef7db00cc4b4d0e4958b2bd</anchor>
      <arglist>(const Assignment &amp;assignment, SequenceVar *var, int64 index, std::vector&lt; int &gt; *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnRevertChanges</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>a3e6cc7fffb5d26c6b94576e88197a355</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnAddVars</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchHandler.html</anchorfile>
      <anchor>aec17ad927d45e32c42f3847ff5175a19</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequenceVarLocalSearchOperator</name>
    <filename>classoperations__research_1_1SequenceVarLocalSearchOperator.html</filename>
    <base>operations_research::VarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a96001d1aefc31de08b25a4f43f949c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>acc524c64d6fc3e0fbf32f7a1fe3fb264</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequenceVarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a12207830e46d0711d7e2d54170215417</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Sequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a02492df6e37f41273650ff27bd25e3a5</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>OldSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>aaaf6617f0ee547eb84761a1d291d75a7</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a9000b96654d1467e831d8f020701429e</anchor>
      <arglist>(int64 index, const std::vector&lt; int &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackwardSequence</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>aa2f375549359ac7050eaed6f3562c42e</anchor>
      <arglist>(int64 index, const std::vector&lt; int &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const Val &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; V * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>backward_values_</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>a5c478f55875ccdb31b2aacaa8852d460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Handler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SequenceVarLocalSearchHandler</name>
      <anchorfile>classoperations__research_1_1SequenceVarLocalSearchOperator.html</anchorfile>
      <anchor>ab80b964f556e6175e70741b63de9f94e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SequentialSavingsFilteredDecisionBuilder</name>
    <filename>classoperations__research_1_1SequentialSavingsFilteredDecisionBuilder.html</filename>
    <base>operations_research::SavingsFilteredDecisionBuilder</base>
    <member kind="function">
      <type></type>
      <name>SequentialSavingsFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1SequentialSavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3832e84bda5ff8e97a831592ef8ecf7b</anchor>
      <arglist>(RoutingModel *model, RoutingIndexManager *manager, SavingsParameters parameters, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequentialSavingsFilteredDecisionBuilder</name>
      <anchorfile>classoperations__research_1_1SequentialSavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a66879eb2c7cd5b72167112b2d5bf99b2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SequentialSavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a03eb36c220aacf9dc6eaa439a242b76c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BuildSolution</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9c4a14a25e1129acbd541c76c7822c05</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RoutingModel *</type>
      <name>model</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8125b34030c571be558a4260970d1936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStartChainEnd</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>afeea31fbc3740ae9fce56757410a9b62</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndChainStart</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ac5e9978230d2e759f1f5b94bf738feca</anchor>
      <arglist>(int vehicle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeDisjunctionNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>ace97a6953feba3ac51077dc0c1b4ecc5</anchor>
      <arglist>(int64 node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeUnassignedNodesUnperformed</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a90d5e25d398a8c37bc2168e475aec99e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>Next</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3728215165475d83bf1fc427bc171c3e</anchor>
      <arglist>(Solver *solver) override</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_decisions</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5589c8d87c0b93a1d3e6ffac03830190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>number_of_rejects</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a3ae7dae1c50d1ed98f3a81b874c6e943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AppendMonitors</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>aacc1030d918e7c2b5ba6c5e8a0542746</anchor>
      <arglist>(Solver *const solver, std::vector&lt; SearchMonitor * &gt; *const extras)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1DecisionBuilder.html</anchorfile>
      <anchor>a62372947c9ce93ba28cb636a635433d7</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int64, int64 &gt;</type>
      <name>Saving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a596ce0cfecc75e1a45cbe815e9c5de18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetVehicleTypeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a4e87652a0defe5e88e5ee40f9747e8e4</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetBeforeNodeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>af8dfaa8561042682ba1e695a9cf8e485</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetAfterNodeFromSaving</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a9e4db1eb4f2bca5ca9eaec95324ae691</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>GetSavingValue</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a2d95b0c5e4e1261ae146ea37744e164e</anchor>
      <arglist>(const Saving &amp;saving) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>StartNewRouteWithBestVehicleOfType</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a79f476b7736fd94c99a5a3b19af51144</anchor>
      <arglist>(int type, int64 before_node, int64 after_node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StopSearch</name>
      <anchorfile>classoperations__research_1_1RoutingFilteredDecisionBuilder.html</anchorfile>
      <anchor>a5231593d95ea61f3f6d900f44e0fb87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Commit</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>aaa2ee1b71985f528f9b59fa693936e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a0b295e340454a27f643052138f26fb95</anchor>
      <arglist>(int64 index, int64 value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a444807ed7728065f488c364fcd3daa47</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>ab99b24dbd1dd5c0393adcbfd195768ea</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a6631652219280f558f2a6ae4fd0f0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1IntVarFilteredDecisionBuilder.html</anchorfile>
      <anchor>a8ec6b0457672ded0a1046d29aa1c66bf</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>type_index_of_vehicle_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a95726fed5ab591f1934d5f427d58f5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::set&lt; VehicleClassEntry &gt; &gt;</type>
      <name>sorted_vehicle_classes_per_type_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>aa8b26c3fe240f025e6af46a2772503cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::deque&lt; int &gt; &gt;</type>
      <name>vehicles_per_vehicle_class_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a34732976d70ea1b9bd96bbed44970007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; SavingsContainer&lt; Saving &gt; &gt;</type>
      <name>savings_container_</name>
      <anchorfile>classoperations__research_1_1SavingsFilteredDecisionBuilder.html</anchorfile>
      <anchor>a37e4260ae243381402603fe3c3bca94d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SimpleBoundCosts</name>
    <filename>classoperations__research_1_1SimpleBoundCosts.html</filename>
    <class kind="struct">operations_research::SimpleBoundCosts::BoundCost</class>
    <member kind="function">
      <type></type>
      <name>SimpleBoundCosts</name>
      <anchorfile>classoperations__research_1_1SimpleBoundCosts.html</anchorfile>
      <anchor>a6ec9098d43f8ccbd6f7b5b6dfb047e78</anchor>
      <arglist>(int num_bounds, BoundCost default_bound_cost)</arglist>
    </member>
    <member kind="function">
      <type>BoundCost &amp;</type>
      <name>bound_cost</name>
      <anchorfile>classoperations__research_1_1SimpleBoundCosts.html</anchorfile>
      <anchor>a35969473ece3e5d19884346b0ffc3044</anchor>
      <arglist>(int element)</arglist>
    </member>
    <member kind="function">
      <type>BoundCost</type>
      <name>bound_cost</name>
      <anchorfile>classoperations__research_1_1SimpleBoundCosts.html</anchorfile>
      <anchor>ad07f030289731fbe799ec1a315b40ca9</anchor>
      <arglist>(int element) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1SimpleBoundCosts.html</anchorfile>
      <anchor>a7257d43ea91bd77ebb30817a6cb80928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleBoundCosts</name>
      <anchorfile>classoperations__research_1_1SimpleBoundCosts.html</anchorfile>
      <anchor>a86f1488546e3c969059a0da1cf632a31</anchor>
      <arglist>(const SimpleBoundCosts &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SimpleBoundCosts</type>
      <name>operator=</name>
      <anchorfile>classoperations__research_1_1SimpleBoundCosts.html</anchorfile>
      <anchor>a25cbaaa77d5d9c0ded3f786b3634f71b</anchor>
      <arglist>(const SimpleBoundCosts &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SimpleRevFIFO</name>
    <filename>classoperations__research_1_1SimpleRevFIFO.html</filename>
    <templarg>T</templarg>
    <class kind="class">operations_research::SimpleRevFIFO::Iterator</class>
    <member kind="function">
      <type></type>
      <name>SimpleRevFIFO</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>afe165ef59bdd847273347b78397eed2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a4f48d3ad864fe70677b0e3aa3e2d79e8</anchor>
      <arglist>(Solver *const s, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushIfNotTop</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a8a687b3e2756711e361d82db748ed33b</anchor>
      <arglist>(Solver *const s, T val)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>Last</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>acd419b7fa3414e82f57ef97193948841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>MutableLast</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a75bdce2821c6d39a9631e72e6851f65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>LastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1e4317305a0bc003c6d51548c36d69ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1cd3644228ae5a0f0ec3862d91276470</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleRevFIFO&lt; operations_research::Demon * &gt;</name>
    <filename>classoperations__research_1_1SimpleRevFIFO.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleRevFIFO</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>afe165ef59bdd847273347b78397eed2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a4f48d3ad864fe70677b0e3aa3e2d79e8</anchor>
      <arglist>(Solver *const s, operations_research::Demon * val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushIfNotTop</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a8a687b3e2756711e361d82db748ed33b</anchor>
      <arglist>(Solver *const s, operations_research::Demon * val)</arglist>
    </member>
    <member kind="function">
      <type>const operations_research::Demon * *</type>
      <name>Last</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>acd419b7fa3414e82f57ef97193948841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>operations_research::Demon * *</type>
      <name>MutableLast</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a75bdce2821c6d39a9631e72e6851f65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const operations_research::Demon * &amp;</type>
      <name>LastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1e4317305a0bc003c6d51548c36d69ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLastValue</name>
      <anchorfile>classoperations__research_1_1SimpleRevFIFO.html</anchorfile>
      <anchor>a1cd3644228ae5a0f0ec3862d91276470</anchor>
      <arglist>(const operations_research::Demon * &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SmallRevBitSet</name>
    <filename>classoperations__research_1_1SmallRevBitSet.html</filename>
    <member kind="function">
      <type></type>
      <name>SmallRevBitSet</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a0984b7441a23c75de696103cadc044b5</anchor>
      <arglist>(int64 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToOne</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a427373fdc21062991efa27f991862ff6</anchor>
      <arglist>(Solver *const solver, int64 pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a22f35c8d356a6bc1dfb95bb36da6d37a</anchor>
      <arglist>(Solver *const solver, int64 pos)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Cardinality</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a689636d2882047089282038c7736a240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityZero</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a42ea531fee4409ffb3be7b17cdb434ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCardinalityOne</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>ad7bc8a8c7fae5202eb61c2e5c9964108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>GetFirstOne</name>
      <anchorfile>classoperations__research_1_1SmallRevBitSet.html</anchorfile>
      <anchor>a62c1065eed9c23d62fe6febf90ea020d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SolutionCollector</name>
    <filename>classoperations__research_1_1SolutionCollector.html</filename>
    <base>operations_research::SearchMonitor</base>
    <class kind="struct">operations_research::SolutionCollector::SolutionData</class>
    <member kind="function">
      <type></type>
      <name>SolutionCollector</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a9e64163be6305d1ff5330b472f70a7bb</anchor>
      <arglist>(Solver *const solver, const Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SolutionCollector</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a86e579ea08eacd273a1328c93ebb2d9b</anchor>
      <arglist>(Solver *const solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SolutionCollector</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a3497b80aeb8089fd23eff150d1ca832d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a13b2487c422d35cd36e9bfbc2810c652</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a9f32dc165d6a4c1c09121ecd666a85b2</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a85477416a409ca8c8e4e2cd12166673b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae8d7a53aab1c924d2ce086d56c14aed9</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a51ce54667ab06c9c32857f928476d220</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a7dd03e41cfdcfb608c9cbe2c7595ce0d</anchor>
      <arglist>(SequenceVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a06d633a79efa310261266714930356bf</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddObjective</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a9661ec736470edba26f92dfac906a114</anchor>
      <arglist>(IntVar *const objective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnterSearch</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a3e34da6922cd5c7c03ef9186de8fcf36</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solution_count</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a7e431c9d2ecc17d670c7d39ae12dbb1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>solution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae8960240e82f61c3f93c1a81842d29f0</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>wall_time</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a6705ad4a1718e453d0f969901cd77cea</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a44ccf194f93a5b1fb2dd15f821d070a1</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a17269925652c762db15e61d86b2d9b72</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>objective_value</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a99f5a376a7479ced58f234f6d696094f</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a78e202559c958cf7249d3e8ce6ab1b27</anchor>
      <arglist>(int n, IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>StartValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a5f3395e17a51ad230b73c965e4387d39</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>EndValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a5014e4129cfdbc7b0f7f6c06b0283fd2</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>DurationValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae6465359ff5ec74c5f4dcbc0d6e4a3df</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PerformedValue</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae47681f11a043b56dab58e533f017cef</anchor>
      <arglist>(int n, IntervalVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>ForwardSequence</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a02862f4b1f6f2c81e51e1d54da1a8533</anchor>
      <arglist>(int n, SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>BackwardSequence</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ad5f73f593628e7d72088fb9e3b5a369d</anchor>
      <arglist>(int n, SequenceVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>Unperformed</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ab70120f761b82d383eb431bc1cff51b6</anchor>
      <arglist>(int n, SequenceVar *const var) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a681646c2ba21c997eca605387d387cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExitSearch</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab98b6cd2d173adb819adff4e1839f10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a2f3ea4577e11fad619c2d7dcad1617cd</anchor>
      <arglist>(DecisionBuilder *const b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndNextDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>adc462b9f376d796296bbee05fd44a6ed</anchor>
      <arglist>(DecisionBuilder *const b, Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a8c745cdd7838067851f65e5ed812ab14</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RefuteDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aadfcba48c62683c6d6463a7adb9b0a28</anchor>
      <arglist>(Decision *const d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AfterDecision</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab138fa7a0d0f11e57507d9d903729558</anchor>
      <arglist>(Decision *const d, bool apply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a528e028cce317c06203f079dd05635a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndFail</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad138a0d3337eb1085157f824f946d611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ae08ee7f1dc5f652ee9b55393e0cc3550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndInitialPropagation</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a95f86eb818555555bfaa50483672a77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a3da80f7b3b108f36ace3e45d1654805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AtSolution</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac4f21fe0c304fc837d903feb65fe858f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>NoMoreSolutions</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ad73cc7165dba2ee87884286537666ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalOptimum</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ab412dd0253ec658cd36dbec0c1b9f426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>AcceptDelta</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>ac14f9c8abd763be08fbb1220b763df2b</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a04a9e7423ec5aa466b7a7604eb107fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AcceptUncheckedNeighbor</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a1bd91b270f903d25e6eb7c252d5cf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsUncheckedSolutionLimitReached</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a913eb75331c00bed226200fd96ee0cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a6c4b4a82d20104f3ca8729244dd9cc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PeriodicCheck</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9cb45d67a60d4729f1e1fd4d0c6442db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ProgressPercent</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a4e4e007e3de77736cd9d7a3b9df2f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a9b300dfb35699cf80504c00f2cbe9153</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Install</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>a775e4bc59c759621fdb0b6f129744296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNoProgress</name>
      <anchorfile>classoperations__research_1_1SearchMonitor.html</anchorfile>
      <anchor>aa95b9df4d6eb3b0fabd01d9fee33d25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PushSolution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a917706361bb737a32be97259dae4c3f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a424f3f1c33e8a55ec2ad31d66b4fa226</anchor>
      <arglist>(const SolutionData &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PopSolution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a467ca023ad6d3a5c4ffbdba1391f80cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SolutionData</type>
      <name>BuildSolutionDataForCurrentState</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a4a8231d856858b0158109777f3ae57df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FreeSolution</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a40ada0142b3eb38469bea03d0b9d51d4</anchor>
      <arglist>(Assignment *solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>a5cc8f57cec90beaa0f351e63f1fb24d9</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; Assignment &gt;</type>
      <name>prototype_</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae75c29baf023cfde70a58b085efecf5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionData &gt;</type>
      <name>solution_data_</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ae4523b9fc891602c62af24e4961dfe74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Assignment * &gt;</type>
      <name>recycle_solutions_</name>
      <anchorfile>classoperations__research_1_1SolutionCollector.html</anchorfile>
      <anchor>ad6d087dbee567cc2bf17ee84424a85fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::SolutionCollector::SolutionData</name>
    <filename>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>a4fd4a3e7f39bccab9df8deac462048b9</anchor>
      <arglist>(const SolutionData &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>Assignment *</type>
      <name>solution</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>a0e535f078ff1680ca4c2610d3d0c2afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>time</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>ae5d1c739b13b73a1975928b4d184807b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>ad72f24766540ebd09df0a41869945bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>a40ee8d9d06d28d7e8c6c63b2a7b407fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>objective_value</name>
      <anchorfile>structoperations__research_1_1SolutionCollector_1_1SolutionData.html</anchorfile>
      <anchor>affb63b3dbea54e1f5445aef70012f935</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SolutionPool</name>
    <filename>classoperations__research_1_1SolutionPool.html</filename>
    <base>operations_research::BaseObject</base>
    <member kind="function">
      <type></type>
      <name>SolutionPool</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a0c1b8aceb7d2732914ade32de14cfc41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SolutionPool</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>acfd2afc60305bddd7927b7f406dce492</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a9fb836da69e3c48b8ea240c0aee64d61</anchor>
      <arglist>(Assignment *const assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RegisterNewSolution</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a2e49e36a6c729756e59287fb8a3a3bcd</anchor>
      <arglist>(Assignment *const assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetNextSolution</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>a695368c209531f7ae73419543a3d63cd</anchor>
      <arglist>(Assignment *const assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>SyncNeeded</name>
      <anchorfile>classoperations__research_1_1SolutionPool.html</anchorfile>
      <anchor>ab71086e9d6cbca14023cd54a03bd1eff</anchor>
      <arglist>(Assignment *const local_assignment)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::Solver</name>
    <filename>classoperations__research_1_1Solver.html</filename>
    <class kind="struct">operations_research::Solver::IntegerCastInfo</class>
    <class kind="struct">operations_research::Solver::SearchLogParameters</class>
    <member kind="enumeration">
      <type></type>
      <name>IntVarStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8bab82ee292f55491e6068a560434f9a649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baccdbce6c50c85d4ed2c507dbc5691116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_FIRST_UNBOUND</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8f69d3fc74e6a3faaa9be2583ce8fce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2547ec2e47ea5c8da65a39817a04f220</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba1b2865e3429fc5b1956da5f601ae0ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf654ef2638f1ed2cd22cee830695a2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8954f01caaa3b482d349a3ed6c254155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf1eadfb5ea6dc853f075589cded04314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2edce2c3cb946cfafd4541b442b3c511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba76e76e12dcb8935b6a7713f849a11df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babcab6960ac4a67fbb73fb94aa5e752e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babce047aa9c6aa994057ae76e535d59df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_REGRET_ON_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf25b88c6fb8a0b956dd3812af864e2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_PATH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba46e6f2fa2b646a2114a32d816ba399ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IntValueStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a3291dae3d9aa520fe52d1ffaa2a2eadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a78588d0b2a789c20c1252eaffed29e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MIN_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab68b8c2566158157a2ba1660aae07553</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MAX_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a13d07bd4fac1cf9de979eaa59bb9089b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_RANDOM_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab75b213a2a3871a9946a74610e388b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_CENTER_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a0484f76eaad7b381c13bfd4ccd47ef68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_LOWER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a5abe444845850bb7a0f2f5c87cef2763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_UPPER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a094a0fbeabae8b18ca5367f2564a0896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EvaluatorStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_STATIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21ad2e527283c597c714aa93e9fa72ee0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_DYNAMIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21a4c35b22102e37b5ca3d0e62cffcf93d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SequenceStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaaf8c34e2288277212469f187b5cc268b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa2824d95f6832660bf47a077680403b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SLACK_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaeb08eb7c7c4cd0b65331584e4ae7bedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa139097881c016328ab920b3505100887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IntervalStrategy</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a1bd1a37995f05ae93089ba0475799682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424ae24e4970fab2a37e23eaa50c783fd6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a0ad27937b9a501b07827886abd97a8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_BACKWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a3892d13c5d6ce4a93609e4eb176195a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TWOOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a6954bf415a41a3e683060ce706cec2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OROPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a721d9e61cd2a9b9c221793b9b8086b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELOCATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ae38682b404f0255b45c6c5a3d4d31399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXCHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a27e459c0332eecea29a0b793ec635b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dcd871e02933eb704b45ea8ea68a852</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a41dc08543fce010d8ce65df80935ff38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEINACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a1a2beb32468f536c96644b3faa9c8d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKECHAININACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aa2d880da72318dcffa237e4f2100c58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aeac9baf3ea4fa072bb9e4eccf691205d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTENDEDSWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a99c891d39d424a087b7fd551b27906ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aae749f308386810f29338c96daf0e4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULLPATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3efd902ca50bb59867c6aaf3fbf20e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNACTIVELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dbb9333b0dd7a380a85b4e1bd298667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aed2205097d136a425fa309dcfc71586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ad5eb45c9651dc49f7e2f0f9bf251dd40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3a1a321416e317c8ed906573a937ffc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EvaluatorLocalSearchOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LK</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1aae6bcc97b395e12e9a8e54093a327512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1ac712194c4e0edea857001e9cf2ed5811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1a29c43618e41fc69d29d248c0031d5af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchFilterBound</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0ac146aa5e02ea92fc5666c258910c049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a7b0d93c6324068fe1984836247bc1104</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQ</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a1ed30b8b721fbabcd346c23b61ba8f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DemonPriority</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELAYED_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4af8769149902a8a2b168069cb93cc6370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4ae5f79fc80ef9ae665bcd7c0e55c02aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4a4f432957a8b27277538d5ee856201a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BinaryIntervalRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a6498f37a4ad4a85e8309080a357cb587</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aa98eb73b7940d0127b133f170976fb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9abaaae5f195366a4e2aeae19bb2f0ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad02b3b6c25bdd69c2735af0dcd7c3aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad5a5ac7b999f4c37d11206e531125988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ae80d18ceaf9ae55ad39559b85b745628</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aea2183489b4cb88c3e43e90e8f96eb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a5fbb5a6ea281c2affbcd2fc79c1d7c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAYS_IN_SYNC</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a4d3f223d92b1ac90127546c396f6cd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnaryIntervalRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dac88ebc55bfbf4a9ad97391ef97b4d6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da294a4a33adc6833aa24adfd0d8eb44f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da9cc048da4ce5362c5a58866161a219bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da5228c64950eccf096f9847d100100b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dab88a6a21271bd5f34e12ada996c0bfee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da21ce390ff5a9625cc07569f7629b2a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da79c510d187e0d3ef01df628731231ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AVOID_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da6ea2fea7afd48b130486b2b48b5ae418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecisionModification</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847aa8dfadb94521ac7979525ae94f618d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_LEFT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a7a7d1379ff946fd786c118c3358ce438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_RIGHT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a1322e52b2ac49d3b2975acb1f4603cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KILL_BOTH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847af16daaa1fec927c823d4d0441f4c742b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCH_BRANCHES</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a9bbb245ecd3725f5a67fd4c8466ee678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MarkerType</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENTINEL</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a6a8779a3d27000ed1e11b3549c0470ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE_MARKER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215aa5148450bdc2fa1d4b40c2dd70b6dd3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOICE_POINT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a68e4780981758b35943123d19ea5c070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REVERSIBLE_ACTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215ab8ed3456ae15444c88849d08123e4c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SolverState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTSIDE_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ac05654b6a7479316478744b3ce4a50df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_ROOT_NODE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a0e9b4a7467a4d4f1a7da211e6c59251e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a066908e143fd988a03767f05e682acaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AT_SOLUTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ad487136b6f055fa3fadfd6a3c12aa3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MORE_SOLUTIONS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a401b0c79d1fa9261524343fce4dd5439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROBLEM_INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a30b34e2664f9b1e2fb0d1347d7a87674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OptimizationDirection</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SET</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befadd112fa680436644573a4d6e6e955906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAXIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befa76db89f0caee82059523e2f233c31433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befaf042b1d4c82247d9ff0ca476800d8fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>IndexEvaluator1</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1040bdf484009e1a00e60ebb055ad1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64)&gt;</type>
      <name>IndexEvaluator2</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0243986dd2db4b6e1bda331329ae529b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64, int64)&gt;</type>
      <name>IndexEvaluator3</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1f24a08006b3142731a258d856f13e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(int64)&gt;</type>
      <name>IndexFilter1</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7e47d3b978e31e6273a63dc52fcf3379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; IntVar *(int64)&gt;</type>
      <name>Int64ToIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6183a217e1ddf504a4fd3f49788b73db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(Solver *solver, const std::vector&lt; IntVar * &gt; &amp;vars, int64 first_unbound, int64 last_unbound)&gt;</type>
      <name>VariableIndexSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a360a918948e4a8ae01a49899c5a9438e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(const IntVar *v, int64 id)&gt;</type>
      <name>VariableValueSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>addc64b89be5f633952a7735861cc9901</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(int64, int64, int64)&gt;</type>
      <name>VariableValueComparator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af24d476da11ebf69fae9d4890447cc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(int64)&gt;</type>
      <name>ObjectiveWatcher</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acb354925d9ed2803b56953a9a9ec59df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; DecisionModification()&gt;</type>
      <name>BranchSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a704132f8c12e3bbbd0590308a58ee744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Solver *)&gt;</type>
      <name>Action</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a87ca0b6abf9c8724900387f5aa557c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>Closure</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aab58d22b2215e79f8e3a9424fe186239</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8bab82ee292f55491e6068a560434f9a649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VAR_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baccdbce6c50c85d4ed2c507dbc5691116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_FIRST_UNBOUND</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8f69d3fc74e6a3faaa9be2583ce8fce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2547ec2e47ea5c8da65a39817a04f220</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba1b2865e3429fc5b1956da5f601ae0ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf654ef2638f1ed2cd22cee830695a2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_LOWEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba8954f01caaa3b482d349a3ed6c254155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf1eadfb5ea6dc853f075589cded04314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_LOWEST_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba2edce2c3cb946cfafd4541b442b3c511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_HIGHEST_MAX</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba76e76e12dcb8935b6a7713f849a11df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babcab6960ac4a67fbb73fb94aa5e752e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_SIZE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8babce047aa9c6aa994057ae76e535d59df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MAX_REGRET_ON_MIN</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8baf25b88c6fb8a0b956dd3812af864e2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_PATH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8bda7ed6e7e533cca4c44eba6efffc8ba46e6f2fa2b646a2114a32d816ba399ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a3291dae3d9aa520fe52d1ffaa2a2eadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT_VALUE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a78588d0b2a789c20c1252eaffed29e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MIN_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab68b8c2566158157a2ba1660aae07553</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_MAX_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a13d07bd4fac1cf9de979eaa59bb9089b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_RANDOM_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659ab75b213a2a3871a9946a74610e388b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN_CENTER_VALUE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a0484f76eaad7b381c13bfd4ccd47ef68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_LOWER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a5abe444845850bb7a0f2f5c87cef2763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_UPPER_HALF</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae63acd77b8c2ee40387795051298f659a094a0fbeabae8b18ca5367f2564a0896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_STATIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21ad2e527283c597c714aa93e9fa72ee0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_DYNAMIC_GLOBAL_BEST</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afabd2f40b8da33b224a5cafd2a053a21a4c35b22102e37b5ca3d0e62cffcf93d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaaf8c34e2288277212469f187b5cc268b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENCE_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa2824d95f6832660bf47a077680403b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_MIN_SLACK_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaaeb08eb7c7c4cd0b65331584e4ae7bedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOOSE_RANDOM_RANK_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a24557456395e59c924a095f2096aaa139097881c016328ab920b3505100887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_DEFAULT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a1bd1a37995f05ae93089ba0475799682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SIMPLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424ae24e4970fab2a37e23eaa50c783fd6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_FORWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a0ad27937b9a501b07827886abd97a8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERVAL_SET_TIMES_BACKWARD</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae21b3786b7770dc880343e4a1445b424a3892d13c5d6ce4a93609e4eb176195a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TWOOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a6954bf415a41a3e683060ce706cec2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OROPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a721d9e61cd2a9b9c221793b9b8086b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RELOCATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ae38682b404f0255b45c6c5a3d4d31399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXCHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a27e459c0332eecea29a0b793ec635b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dcd871e02933eb704b45ea8ea68a852</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a41dc08543fce010d8ce65df80935ff38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKEINACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a1a2beb32468f536c96644b3faa9c8d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAKECHAININACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aa2d880da72318dcffa237e4f2100c58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aeac9baf3ea4fa072bb9e4eccf691205d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTENDEDSWAPACTIVE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a99c891d39d424a087b7fd551b27906ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aae749f308386810f29338c96daf0e4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULLPATHLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3efd902ca50bb59867c6aaf3fbf20e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNACTIVELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a5dbb9333b0dd7a380a85b4e1bd298667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4aed2205097d136a425fa309dcfc71586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECREMENT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4ad5eb45c9651dc49f7e2f0f9bf251dd40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLELNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3c5b22fad8060ca1a66bd928182d8a4a3a1a321416e317c8ed906573a937ffc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LK</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1aae6bcc97b395e12e9a8e54093a327512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPOPT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1ac712194c4e0edea857001e9cf2ed5811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSPLNS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1b3220ae80fb8430bc06310c5bea5f1a29c43618e41fc69d29d248c0031d5af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0ac146aa5e02ea92fc5666c258910c049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a7b0d93c6324068fe1984836247bc1104</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQ</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e9cbe2323b10c6b49da625f5bae14c0a1ed30b8b721fbabcd346c23b61ba8f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELAYED_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4af8769149902a8a2b168069cb93cc6370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4ae5f79fc80ef9ae665bcd7c0e55c02aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL_PRIORITY</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b0972c731faf884eba5acab99ebb2b4a4f432957a8b27277538d5ee856201a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a6498f37a4ad4a85e8309080a357cb587</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aa98eb73b7940d0127b133f170976fb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9abaaae5f195366a4e2aeae19bb2f0ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad02b3b6c25bdd69c2735af0dcd7c3aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ad5a5ac7b999f4c37d11206e531125988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9ae80d18ceaf9ae55ad39559b85b745628</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_END</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9aea2183489b4cb88c3e43e90e8f96eb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT_START</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a5fbb5a6ea281c2affbcd2fc79c1d7c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAYS_IN_SYNC</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6302978f1de57bdeafa0ffee05c92c9a4d3f223d92b1ac90127546c396f6cd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dac88ebc55bfbf4a9ad97391ef97b4d6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da294a4a33adc6833aa24adfd0d8eb44f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da9cc048da4ce5362c5a58866161a219bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AFTER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da5228c64950eccf096f9847d100100b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_AT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60dab88a6a21271bd5f34e12ada996c0bfee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STARTS_BEFORE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da21ce390ff5a9625cc07569f7629b2a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CROSS_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da79c510d187e0d3ef01df628731231ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AVOID_DATE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a83e14be9c6bba9abdd1949c25c32a60da6ea2fea7afd48b130486b2b48b5ae418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CHANGE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847aa8dfadb94521ac7979525ae94f618d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_LEFT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a7a7d1379ff946fd786c118c3358ce438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_RIGHT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a1322e52b2ac49d3b2975acb1f4603cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KILL_BOTH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847af16daaa1fec927c823d4d0441f4c742b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCH_BRANCHES</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5f87c832967334179f0f9c8d05380847a9bbb245ecd3725f5a67fd4c8466ee678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENTINEL</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a6a8779a3d27000ed1e11b3549c0470ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE_MARKER</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215aa5148450bdc2fa1d4b40c2dd70b6dd3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOICE_POINT</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215a68e4780981758b35943123d19ea5c070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REVERSIBLE_ACTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6dee2b402434520635e66e9d58a6215ab8ed3456ae15444c88849d08123e4c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTSIDE_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ac05654b6a7479316478744b3ce4a50df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_ROOT_NODE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a0e9b4a7467a4d4f1a7da211e6c59251e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_SEARCH</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a066908e143fd988a03767f05e682acaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AT_SOLUTION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95ad487136b6f055fa3fadfd6a3c12aa3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MORE_SOLUTIONS</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a401b0c79d1fa9261524343fce4dd5439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROBLEM_INFEASIBLE</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b5712802e63dcd3ee5abfd37e0f2a95a30b34e2664f9b1e2fb0d1347d7a87674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SET</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befadd112fa680436644573a4d6e6e955906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAXIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befa76db89f0caee82059523e2f233c31433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINIMIZATION</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a00b64c16b54cef4e0467730e171befaf042b1d4c82247d9ff0ca476800d8fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Solver</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af4d2c143bd1e769ab96a69a8ab855136</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Solver</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1aceea22f252449e417cc4bf7ec749d8</anchor>
      <arglist>(const std::string &amp;name, const ConstraintSolverParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Solver</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a663bdb75f27a96e424ad2a7a4ba397ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverParameters</type>
      <name>parameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adb77a0b4b40ea4e8282cf78b54717cd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SaveValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>add51e06535f44461347658d8ce59979a</anchor>
      <arglist>(T *o)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>RevAlloc</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01e1a27e5e6c03b48faab541885737ca</anchor>
      <arglist>(T *object)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>RevAllocArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a45ce1ff8007e76e844d2ec32e740b3d9</anchor>
      <arglist>(T *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9c522a6cff91adae19af5cce7d8e411f</anchor>
      <arglist>(Constraint *const c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCastConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8e06358629a979e64e62158816f6759a</anchor>
      <arglist>(CastConstraint *const constraint, IntVar *const target_var, IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4610adb8edc9b5804370b55e84d9c99b</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a85fd9d56a17aa81fcb33410f8e6f5e49</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a879bcbe8ed7dcfbc3d93f35b09402423</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a960a0af1bd12b441511189d394df3d9f</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveAndCommit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aed9077a5e312e08f6a0e472a718f7b7e</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a779da92d4afffabdb868318665298d59</anchor>
      <arglist>(Assignment *const solution)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae39c8f6f3ee87c9a3d74bc8a446db697</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>SolverState</type>
      <name>state</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad8d269e222a882295b43ebf8dc4ec83a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a45534161a4dda7e1997bc0effd606648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddBacktrackAction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67a3f35a5b19a1ebdf4217b483068ad7</anchor>
      <arglist>(Action a, bool fast)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad3a0dd883b4adb63646503b62dabbc23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>absl::Time</type>
      <name>Now</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a543e7aa911009e1c4a6c33e82e49e582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>wall_time</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a53fae091a4dac1829b8947ff7426aa4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>branches</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa843d980b4526a9b051e98e7f3425b40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>solutions</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a89a5139453ffd5edd1992c82bd95f675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>unchecked_solutions</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad68a982dad17396ac23877b5c80f7b7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>demon_runs</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6905ce95ac75e188d838c0a230888f2</anchor>
      <arglist>(DemonPriority p) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>failures</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2047abfd3e0cf6919d67a4a6ccd1d3cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>neighbors</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a440a3d529f66bbb818d953beb362a825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>filtered_neighbors</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab3e7525b57ce27119e4eb32fe24eedca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>accepted_neighbors</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a644bf665c00f8b9447bdcb5f18590ee9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>stamp</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af9873f0b909de865b771b6168eafc78b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>fail_stamp</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1bcd30f46029ec27d32f9718c5a0d2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OptimizationDirection</type>
      <name>optimization_direction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a045309e1ee229240071692a4e889f3e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_optimization_direction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae49d5791dd8bb104be6a25c30cf59de6</anchor>
      <arglist>(OptimizationDirection direction)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6a699e2d6f96a64244119ee9718e0f71</anchor>
      <arglist>(int64 min, int64 max, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab9d315e6a471d8a04eaa98917054d955</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac720f3b8bc3842a02a7cafbacad4681a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;values, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2568563e12ef73217f0fd5bf6d39fa2d</anchor>
      <arglist>(int64 min, int64 max)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a00b09770cb4927e6aee85cfe6c6d377f</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad39c478a66b0db95fba8e6ebca74b24d</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeBoolVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa3ff89872a2c6fee13814091c63102b5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeBoolVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a941c7c212362540d900af004c16692a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntConst</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a462cc213ea47b1e4c772e0332cb12249</anchor>
      <arglist>(int64 val, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIntConst</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab97c5326b6add25e4c5d54babad46ddc</anchor>
      <arglist>(int64 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeIntVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8b9acf693b1584dd7c7113ba7cea2527</anchor>
      <arglist>(int var_count, int64 vmin, int64 vmax, const std::string &amp;name, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeIntVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa9e1f52efcf6a0d6b5ba577b01e2706b</anchor>
      <arglist>(int var_count, int64 vmin, int64 vmax, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>IntVar **</type>
      <name>MakeIntVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac34e896913439db6a03de167e3ee2fb9</anchor>
      <arglist>(int var_count, int64 vmin, int64 vmax, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeBoolVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8307ead1637b1c665169d0dc1f822549</anchor>
      <arglist>(int var_count, const std::string &amp;name, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeBoolVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8c1971dc963ec7f0accc3ac2ca8baaee</anchor>
      <arglist>(int var_count, std::vector&lt; IntVar * &gt; *vars)</arglist>
    </member>
    <member kind="function">
      <type>IntVar **</type>
      <name>MakeBoolVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6b62b87038d1d458fdcbd254ca79f52</anchor>
      <arglist>(int var_count, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSum</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8b4e4af37e3d9c1f667992bcec34630c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSum</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a43aa3f6af9681069773a02a50aabef9e</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSum</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7486c6901b9f6ef3d5e1c902c0e487f6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeScalProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a58f99f85567010c8726801175b285bfe</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeScalProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a69c2dcf09c273e401997d2615a7b1074</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDifference</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6ef8634dceaef579006ab4db28f1f684</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDifference</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b7a84df4c046f10f588aee00edd0330</anchor>
      <arglist>(int64 value, IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeOpposite</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0fe164a682eb2272efa0f483373b9db8</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6da70a11e2bce1a688259a2e0ab6c9d</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeProd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a33d87f6845a515cb76a08e49e2c1ee5a</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDiv</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a95f09c393e1c513ff4bc15522a854633</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeDiv</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a05799e4c5afbcabaa3961c12db34bf51</anchor>
      <arglist>(IntExpr *const numerator, IntExpr *const denominator)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeAbs</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a57875170b22abd8ca8c499be11659af1</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSquare</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a547a1c1bd3b8df3a759661e60fbb3e9d</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakePower</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af0f7c0067b5a3a79cfff03d48e9eeb94</anchor>
      <arglist>(IntExpr *const expr, int64 n)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea4e904944dd8850347309110ee64c36</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;values, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab338b8352e875cd05be1bed6799e9b72</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;values, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17d3059be586754680e67e64a0cf015b</anchor>
      <arglist>(IndexEvaluator1 values, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMonotonicElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa729df413387f7bb5b6b54bf7b21f340</anchor>
      <arglist>(IndexEvaluator1 values, bool increasing, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2440cbe2c75ec63595aa274a570e8c35</anchor>
      <arglist>(IndexEvaluator2 values, IntVar *const index1, IntVar *const index2)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a852eafbea6eb6a018330000dd2d9c97f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeElement</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a54b78213201d4e352531f56943b8fe70</anchor>
      <arglist>(Int64ToIntVar vars, int64 range_start, int64 range_end, IntVar *argument)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeIndexExpression</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6e6d2b77130f2557bd0b0c77f19710dc</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIfThenElseCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac6ac3661a9add716fade6fecf1645805</anchor>
      <arglist>(IntVar *const condition, IntExpr *const then_expr, IntExpr *const else_expr, IntVar *const target_var)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0047bb3bb4cdff41ece9cfaad2ad108b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab3cde3e28e3984c155cbba13b40e1ccf</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4141a92538b1f2b29ab06ed5efeaa56c</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae73edb2aba9061969c9b8df65573accf</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abebae695ae85e01fe4c176c5a056c9b9</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adfa6d7bf42c29f8a3d6e3efe8cb76015</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a20b29f3a61a50103b8ae87ef2c48ef1f</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a079b4fb579593a5ec3e8d04084afd2af</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeConvexPiecewiseExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7133f1f0ea6afd334b2091e3d5a668d0</anchor>
      <arglist>(IntExpr *expr, int64 early_cost, int64 early_date, int64 late_date, int64 late_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeSemiContinuousExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0c3ee759e1618eb55ca895c8f6878e57</anchor>
      <arglist>(IntExpr *const expr, int64 fixed_charge, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakePiecewiseLinearExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaa52f2620322c849e2142fdfc0eb4213</anchor>
      <arglist>(IntExpr *expr, const PiecewiseLinearFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeModulo</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad80dd1ae1e4b2a33944cf207f2a63458</anchor>
      <arglist>(IntExpr *const x, int64 mod)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeModulo</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ada9dc08dfcaedfe2ec4fad458e6040</anchor>
      <arglist>(IntExpr *const x, IntExpr *const mod)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>MakeConditionalExpression</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ae4ede3b7a68624006b888b97fae3c5</anchor>
      <arglist>(IntVar *const condition, IntExpr *const expr, int64 unperformed_value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTrueConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abdbfec794188ed5074d0cb2f611124ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeFalseConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad0b048792bdbf3cd5699eb82a9b57e76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeFalseConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2ee398114b19c34ffc10d3b204d2ce5b</anchor>
      <arglist>(const std::string &amp;explanation)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsEqualCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab170e1ca8e081b65e7ee595be5fb9e81</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsEqualCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a655735058a06195cc28f25d2564fc8ca</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsEqualCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae6f147ee2f7bf03fa728868ae2d670d</anchor>
      <arglist>(IntExpr *const v1, IntExpr *v2, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsEqualVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a52c3bdf647a8bcea13c4da9330c3a9d3</anchor>
      <arglist>(IntExpr *const v1, IntExpr *v2)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44c97dfc4f51c14779ea29f76c662036</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aead2a0ad32553226f600207c04d1f952</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3e66bcd4f419d69270d7260559585d1</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsDifferentCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0bd00b719a0d7571e3bbc3bb93f64eb6</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsDifferentCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9a9e58a1e346c571e52c2d491f8b3748</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsDifferentVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a91764cdc9186294ec25adb3dec886515</anchor>
      <arglist>(IntExpr *const v1, IntExpr *const v2)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsDifferentCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afdd94e94c4d4b8950d20f1ebf7fd238d</anchor>
      <arglist>(IntExpr *const v1, IntExpr *const v2, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa99c80d3aa788f16d966b7b5af4be7e2</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1026486ac57179fbcdbe51b2de00a79</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a385a87783158b8335290c35c527870d6</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessOrEqualCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a452f6de4ae9e08677c8303dfd7c3292f</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessOrEqualCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7b555e672930179b244785a8f97b3b8f</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessOrEqualVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae6f96ee767c7b6bd0e190c86d995e88c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessOrEqualCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a84a1c30c400cb98e95fca1f74d064c80</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a53ea0cb612f72835754ca2d0c5a3c51c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae2f48cbdadc39938cdf5476a65ee1533</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8319da1d80eccb258d4a1d8928cb757d</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterOrEqualCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8f5eee399d887d3f3f0bfebec6096cc3</anchor>
      <arglist>(IntExpr *const var, int64 value, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterOrEqualCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4f85930982b76fe71ed525a692957515</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterOrEqualVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5bdf15368dacb3a71e78ed7f7ca38ce3</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterOrEqualCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa6f53d2a5d18750d91f16db45700c3af</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab836ebc6f5a7daa6e9e5e2bd08cd50f3</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a404647b2bfe0a59f5a8e276ede47e029</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a08d49b63062128ccc840c9bfea837e4b</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a85403f4ea76885802e486103ef5d6615</anchor>
      <arglist>(IntExpr *const v, int64 c, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6cea2e744a27c3ee4567c65216f36c39</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsGreaterVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3f704993474818667273f078cd273863</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsGreaterCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6a8f7bc1b42272024cb04882c410894b</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreater</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8d6fbba2ba47eda46d4565e4a0ca69cf</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreater</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af381a6c62cc7867dfe806e0a9d895b49</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeGreater</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44bdef4eba494ff998502a253667ead2</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessCstCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adab85b93ce8b5ea9a14b5a5969adcc14</anchor>
      <arglist>(IntExpr *const v, int64 c, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessCstVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a932daaf79abd6438cab1c6c8acb71e0f</anchor>
      <arglist>(IntExpr *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsLessVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af26049e7a0c0bd0a3d3b826579a839ff</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsLessCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8986fc6e352ee5b9601831e6466b923c</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1d3505710b6b1b66c738695d877aef8b</anchor>
      <arglist>(IntExpr *const left, IntExpr *const right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4fba36c87ce9ffe943c6ce30c44aeb13</anchor>
      <arglist>(IntExpr *const expr, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae8aa22da252f3a13e099c0662b55c88e</anchor>
      <arglist>(IntExpr *const expr, int value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a124e2377182b7f2be763fc2c009f2fe6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0dd7452d63d18c1e4591ce9468e38026</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abb5ced4ea25c0dfaa7f5a5a8258423da</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSumEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac3da69851ef4adc166f034ae20098bed</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abc4f50009f6abdfa5430c828c2119d76</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a88aefead29b277a625b47c7648fd9e83</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6143cbf362cd00c1bc8194dab4954a27</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefficients, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6829a80b0964217e3db30d53e28abd48</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefficients, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab00ece9bae955aa3eed634a3df54e8b0</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coeffs, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdGreaterOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abed45c8b36664314ce24ff741ad210b3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coeffs, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a674a604bf7823571ae7ba12dbd939290</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeScalProdLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a99da5ab42e9e01e110ce5534a5e636aa</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;coefficients, int64 cst)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMinEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a707908bc6f7b50d0a3ea6a6814912b03</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const min_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMaxEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18ff54edbaad4a3da9eb7b1112194d1a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const max_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad2d2769a8cae1736dec41abe50d6a711</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;vals, IntVar *const index, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9007cd118fc848c0393e3e48dc8c6329</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vals, IntVar *const index, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae4b4097e4ada19def8c04e680b630019</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index, IntVar *const target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeElementEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ada1ed4983419cdd1cafb48022668f4e5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index, int64 target)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAbsEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6c2937a3cb434bc01c01d454419fcb95</anchor>
      <arglist>(IntVar *const var, IntVar *const abs_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIndexOfConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a07f7fa906a3c321c3095969fca1c6ff5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const index, int64 target)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintInitialPropagateCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7c32391ccea4cf45797ccb99d3b4ea2f</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintInitialPropagateCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a92be45d90f748f1228f09b9585deefcf</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeActionDemon</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a70a1f8ef1f9c2d029d134917e60bf363</anchor>
      <arglist>(Action action)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeClosureDemon</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1b2eed669b8c881a2d596f63bb68150c</anchor>
      <arglist>(Closure closure)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeBetweenCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a997571dcb78d0c1cedd3e5cb6a8afbd3</anchor>
      <arglist>(IntExpr *const expr, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotBetweenCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1b0628976e99904e7c4ae72618c9772e</anchor>
      <arglist>(IntExpr *const expr, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsBetweenCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a776893abf62ec0dbf9b80a5faf0aa455</anchor>
      <arglist>(IntExpr *const expr, int64 l, int64 u, IntVar *const b)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsBetweenVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6d314aa714607f1c12b3f3b75928f250</anchor>
      <arglist>(IntExpr *const v, int64 l, int64 u)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7cb2726d3860a2ca7d7097d58beaa58f</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a37b10a542773716ddb4cad5e45dc4601</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a687be895b4cfd73ad06992a8e6115eef</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a454a133de98f3b4258d03cf9efd1e80c</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a49ae8505daa94f323aea651ec37c5280</anchor>
      <arglist>(IntExpr *const expr, std::vector&lt; int64 &gt; starts, std::vector&lt; int64 &gt; ends)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1b9d2cb1b637067fa79896d1abd28141</anchor>
      <arglist>(IntExpr *const expr, std::vector&lt; int &gt; starts, std::vector&lt; int &gt; ends)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNotMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a03c63143b4354ef99642e5035da5a8da</anchor>
      <arglist>(IntExpr *expr, SortedDisjointIntervalList intervals)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abe0c38990d5922ce0b7b8674c5c9cdd8</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIsMemberCt</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1a0c9b7ea2dab4d150a3ff7bb571f2f7</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values, IntVar *const boolvar)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsMemberVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a495f20c9f679b71c617a627c3041eba2</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>MakeIsMemberVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6c6e9c0c5bef3038b1d8cc47c9e14995</anchor>
      <arglist>(IntExpr *const expr, const std::vector&lt; int &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAtMost</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af10e474564d080f7949e680215224176</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; vars, int64 value, int64 max_count)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCount</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2fc4c2534a45caa04ad4e11ba7b10a52</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value, int64 max_count)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCount</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ad100b150f29d18c0fc4deaf0d45a53</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value, IntVar *const max_count)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8f39cd51e795db7a44e418fafbabf93f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values, const std::vector&lt; IntVar * &gt; &amp;cards)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2d2e0f524f98cda7bca9472ab2b4d7c8</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;values, const std::vector&lt; IntVar * &gt; &amp;cards)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8cbe8846e14fe3645bf1a9dbd1c06a6f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;cards)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5e416047eddcc9ad587a1f317152c2a2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 card_min, int64 card_max, int64 card_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2be5b31a87bef04348fade0e1ec238ff</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;card_min, const std::vector&lt; int64 &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a20c8085d1885978ae71321f2143ab2ec</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;card_min, const std::vector&lt; int &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5bac1c5911f45688f1945c7747b9423b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values, const std::vector&lt; int64 &gt; &amp;card_min, const std::vector&lt; int64 &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDistribute</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4efa8bf8e7ef9a276a90a29d9e38116d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int &gt; &amp;values, const std::vector&lt; int &gt; &amp;card_min, const std::vector&lt; int &gt; &amp;card_max)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDeviation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aced209d10277f701930a1e46f95465e7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVar *const deviation_var, int64 total_sum)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllDifferent</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a63eadebc6faf0538523bfc4dcbc39d97</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllDifferent</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17d2b1ffa5a83f1256c2a825aad714d6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, bool stronger_propagation)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllDifferentExcept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a305fcf51481e580ce845a7c1642fb63a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 escape_value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSortingConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af46c19361350e8714e3749c9d70047cf</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;sorted)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLexicalLess</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a82743e5fcfb142e69798225fc83305ca</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;left, const std::vector&lt; IntVar * &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeLexicalLessOrEqual</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae2bcfbbfd2ccd50e71d9b7c2b466a9c2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;left, const std::vector&lt; IntVar * &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeInversePermutationConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a59f3825b2c4fc01c7be8d7e523211d68</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;left, const std::vector&lt; IntVar * &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIndexOfFirstMaxValueConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a65a1027f9fa77f54095277f7ef10cfca</anchor>
      <arglist>(IntVar *index, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIndexOfFirstMinValueConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1f15c77df41fd565ee016cfde6185052</anchor>
      <arglist>(IntVar *index, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNullIntersect</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aad9eb1217dc7ff8f54cf10a3391410b6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;first_vars, const std::vector&lt; IntVar * &gt; &amp;second_vars)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNullIntersectExcept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af285b462fedc4cf35d36faff5fc78e21</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;first_vars, const std::vector&lt; IntVar * &gt; &amp;second_vars, int64 escape_value)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNoCycle</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3a2e8e7abcce51fb754da16c477fca45</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, IndexFilter1 sink_handler=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNoCycle</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a03badde3aa8f608b4c6ddf722d140f67</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, IndexFilter1 sink_handler, bool assume_paths)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCircuit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac69bf81e7f8a9d08453ca8dae9619092</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeSubCircuit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a149da4f0a5e14223dd41d0b647b8f392</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67e272ab8675e00ddeaf04d21bf87ce3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, const std::vector&lt; IntVar * &gt; &amp;transits)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeDelayedPathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a16cf34d9d8c3f46d7d1414b8c0e3b0c8</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, const std::vector&lt; IntVar * &gt; &amp;transits)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2bbc92456fe591e913634424090c145c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, IndexEvaluator2 transit_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathCumul</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a15799ba1c679eb15e7dc748ee70db18f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;nexts, const std::vector&lt; IntVar * &gt; &amp;active, const std::vector&lt; IntVar * &gt; &amp;cumuls, const std::vector&lt; IntVar * &gt; &amp;slacks, IndexEvaluator2 transit_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathConnected</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a65bedad451869cdc814f87ceb68f2a7c</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, std::vector&lt; int64 &gt; sources, std::vector&lt; int64 &gt; sinks, std::vector&lt; IntVar * &gt; status)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathPrecedenceConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abdda7108c8185b3dcea12523567b96a4</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, const std::vector&lt; std::pair&lt; int, int &gt;&gt; &amp;precedences)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathPrecedenceConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6fcaf1e64be8290c5cf5bd1e4b75fc88</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, const std::vector&lt; std::pair&lt; int, int &gt;&gt; &amp;precedences, const std::vector&lt; int &gt; &amp;lifo_path_starts, const std::vector&lt; int &gt; &amp;fifo_path_starts)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakePathTransitPrecedenceConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a39c7db7afb0e10783e0f9f18a9045139</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; nexts, std::vector&lt; IntVar * &gt; transits, const std::vector&lt; std::pair&lt; int, int &gt;&gt; &amp;precedences)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeMapDomain</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a95b306294d94049874328a4c02f320b4</anchor>
      <arglist>(IntVar *const var, const std::vector&lt; IntVar * &gt; &amp;actives)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeAllowedAssignments</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa4bb610f8e4708b2ea925c37db2b7f66</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const IntTupleSet &amp;tuples)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTransitionConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae4b9d3730dc01f9b766e69d411f190a6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const IntTupleSet &amp;transition_table, int64 initial_state, const std::vector&lt; int64 &gt; &amp;final_states)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTransitionConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a84119caadb86e0b3439c6c1b58006744</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const IntTupleSet &amp;transition_table, int64 initial_state, const std::vector&lt; int &gt; &amp;final_states)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3e4a18958cd72c63d679d1feea501e98</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; IntVar * &gt; &amp;x_size, const std::vector&lt; IntVar * &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adc171d708698c071972da2392513e974</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int64 &gt; &amp;x_size, const std::vector&lt; int64 &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa8ba312556cc46a8f523d5301f75f8c2</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int &gt; &amp;x_size, const std::vector&lt; int &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingNonStrictBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab235bf1af3430d5b19cf811be7c2da0f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; IntVar * &gt; &amp;x_size, const std::vector&lt; IntVar * &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingNonStrictBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f3dbc73a9cfbe92feedf9f0cfd58043</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int64 &gt; &amp;x_size, const std::vector&lt; int64 &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeNonOverlappingNonStrictBoxesConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5fdaec772223aa02f8ea5679458f484f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;x_vars, const std::vector&lt; IntVar * &gt; &amp;y_vars, const std::vector&lt; int &gt; &amp;x_size, const std::vector&lt; int &gt; &amp;y_size)</arglist>
    </member>
    <member kind="function">
      <type>Pack *</type>
      <name>MakePack</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4140a32d9cc0d4700ef8cd391e20f635</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_bins)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af3cf859de88467c7340a3ada0fe79620</anchor>
      <arglist>(int64 start_min, int64 start_max, int64 duration, bool optional, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a84df9e10dbd2548f4ffebba134c41a31</anchor>
      <arglist>(int count, int64 start_min, int64 start_max, int64 duration, bool optional, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7f312d4dd096765774c8d9415f8881b2</anchor>
      <arglist>(IntVar *const start_variable, int64 duration, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5a4df4a5ef95d1c8b3d33a4669fa07a4</anchor>
      <arglist>(IntVar *const start_variable, int64 duration, IntVar *const performed_variable, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa09de251c6c45166301981e0b18dab83</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, int64 duration, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a94a29f5c8bb3b77cb4274ad8a120e22b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int64 &gt; &amp;durations, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0aa7f9ec8b5634c0d028c869c3a38636</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int &gt; &amp;durations, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17b8f29ea80c3496fb7768fc6b12df8c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int64 &gt; &amp;durations, const std::vector&lt; IntVar * &gt; &amp;performed_variables, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeFixedDurationIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a08f6f320bf7f336932b9571c27421895</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;start_variables, const std::vector&lt; int &gt; &amp;durations, const std::vector&lt; IntVar * &gt; &amp;performed_variables, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abc3ebe43e811c7fb172f962a78305a2e</anchor>
      <arglist>(int64 start, int64 duration, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac87d5128f0c386531d6bc37d847e9379</anchor>
      <arglist>(int64 start_min, int64 start_max, int64 duration_min, int64 duration_max, int64 end_min, int64 end_max, bool optional, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeIntervalVarArray</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a406c32061db9fd011adb31709eab75ea</anchor>
      <arglist>(int count, int64 start_min, int64 start_max, int64 duration_min, int64 duration_max, int64 end_min, int64 end_max, bool optional, const std::string &amp;name, std::vector&lt; IntervalVar * &gt; *const array)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeMirrorInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2b941bb1e1090e457abd3b2da7e45b09</anchor>
      <arglist>(IntervalVar *const interval_var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationStartSyncedOnStartIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afb8890710339634b60f2c59043a2b4dd</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationStartSyncedOnEndIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a14b79fb7c8d45f40452921f13bdcf3a1</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationEndSyncedOnStartIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7c7cdd60d6c9e3bc141dfc36595bdd7f</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeFixedDurationEndSyncedOnEndIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a561299bd3b4d1875e1a627084c4f3dc2</anchor>
      <arglist>(IntervalVar *const interval_var, int64 duration, int64 offset)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeIntervalRelaxedMin</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0a9ab7660c16c45e3a04547107a1f44f</anchor>
      <arglist>(IntervalVar *const interval_var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>MakeIntervalRelaxedMax</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5664b23c751cead631f08318bdeeb63a</anchor>
      <arglist>(IntervalVar *const interval_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIntervalVarRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44750e41a0195b2790202338c3798ce1</anchor>
      <arglist>(IntervalVar *const t, UnaryIntervalRelation r, int64 d)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIntervalVarRelation</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3edcfc8477f3c8885744ec5b22b99d3f</anchor>
      <arglist>(IntervalVar *const t1, BinaryIntervalRelation r, IntervalVar *const t2)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeIntervalVarRelationWithDelay</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01d92f3ca676da6aecf64fd91fbcf1b5</anchor>
      <arglist>(IntervalVar *const t1, BinaryIntervalRelation r, IntervalVar *const t2, int64 delay)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTemporalDisjunction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acb0a02a6acc71bb5c26f5db75be94d43</anchor>
      <arglist>(IntervalVar *const t1, IntervalVar *const t2, IntVar *const alt)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeTemporalDisjunction</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2ada569684adb7dd2eea5c9b5b0cafa6</anchor>
      <arglist>(IntervalVar *const t1, IntervalVar *const t2)</arglist>
    </member>
    <member kind="function">
      <type>DisjunctiveConstraint *</type>
      <name>MakeDisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1097997c1048eba4ed6b2ba1bc3d3a1</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>DisjunctiveConstraint *</type>
      <name>MakeStrictDisjunctiveConstraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afab240c5c40998926973f668308d3e28</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a91cc6755dcf8a72ebdccea585239b223</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int64 &gt; &amp;demands, int64 capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a762485ce728e2fd41b101b09c8db02e6</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int &gt; &amp;demands, int64 capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a72fb5ada4cdcdf76a5d5e4731ebc3c2c</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int64 &gt; &amp;demands, IntVar *const capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1321c1b607289aaa82a344d24fdea55e</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; int &gt; &amp;demands, IntVar *const capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a76734321a899562cc4f7d806383071d9</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; IntVar * &gt; &amp;demands, int64 capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCumulative</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6e1b58978a0854b687265db806211e5</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, const std::vector&lt; IntVar * &gt; &amp;demands, IntVar *const capacity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeCover</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a31446874c1dc3fd6e1e81b85f0be282f</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;vars, IntervalVar *const target_var)</arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>MakeEquality</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a069a42e0658c46afe924eced6e1ac41d</anchor>
      <arglist>(IntervalVar *const var1, IntervalVar *const var2)</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>MakeAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44616760a35fb4c8a0811c487108a773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>MakeAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac776afa0917dd7752a7b88c14fde0cd0</anchor>
      <arglist>(const Assignment *const a)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeFirstSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a93bb10313227a60f812842b3da04d276</anchor>
      <arglist>(const Assignment *const assignment)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeFirstSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18656e1529d449a029580307f65978e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeLastSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aed4fa5966b4a38f68b03d4d8f9803dc7</anchor>
      <arglist>(const Assignment *const assignment)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeLastSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aecb0b69911306ae5b8aa6a69839812e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1f477deb432653548d529105d333b51e</anchor>
      <arglist>(const Assignment *const assignment, bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab6f54c6d9ba0109d05171888ed2c631a</anchor>
      <arglist>(bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeNBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af56a95588607d60cd6908739164c2455</anchor>
      <arglist>(const Assignment *const assignment, int solution_count, bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeNBestValueSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a593f8b4c527e40ad9251b0837304152f</anchor>
      <arglist>(int solution_count, bool maximize)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeAllSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a19dc14c4d315bd718d14cfad2f81603b</anchor>
      <arglist>(const Assignment *const assignment)</arglist>
    </member>
    <member kind="function">
      <type>SolutionCollector *</type>
      <name>MakeAllSolutionCollector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af2dd63ac2ae9f837cfab35b13176dc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeMinimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2ebf87279a0ec3e2342579e72f2bd34f</anchor>
      <arglist>(IntVar *const v, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeMaximize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adf3a1f03acad746f2abe8bf5d2d6f93d</anchor>
      <arglist>(IntVar *const v, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2359ce77356b72617d07f9fe15e64b8e</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMinimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5d2f031cb8202d7b1cfe534e3c8e1918</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int64 &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMinimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a16ec0eb1cb1e1e5727cb9a438c782f80</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMaximize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aeb7ec77351bcc3b896fbd6f034749427</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int64 &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedMaximize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adbfc772159be0180a934c3ad0400c483</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa41f52a032f36aa8f26b00cceb8b6793</anchor>
      <arglist>(bool maximize, const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int64 &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>OptimizeVar *</type>
      <name>MakeWeightedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa3f616323e1424ae9534f462fd4d327c</anchor>
      <arglist>(bool maximize, const std::vector&lt; IntVar * &gt; &amp;sub_objectives, const std::vector&lt; int &gt; &amp;weights, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeTabuSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a741958c282764f0093800613f9a49eb7</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step, const std::vector&lt; IntVar * &gt; &amp;vars, int64 keep_tenure, int64 forbid_tenure, double tabu_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeGenericTabuSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3488d384fcd80a6dbc3347c6b8dfb222</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step, const std::vector&lt; IntVar * &gt; &amp;tabu_vars, int64 forbid_tenure)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSimulatedAnnealing</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaba6e77a62dd706b07a0c993f6e0a945</anchor>
      <arglist>(bool maximize, IntVar *const v, int64 step, int64 initial_temperature)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeGuidedLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01b92dc5c74e94c0decb3883663b6a21</anchor>
      <arglist>(bool maximize, IntVar *const objective, IndexEvaluator2 objective_function, int64 step, const std::vector&lt; IntVar * &gt; &amp;vars, double penalty_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeGuidedLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2cfbc3030bc56c8304fe783ae8ae4b58</anchor>
      <arglist>(bool maximize, IntVar *const objective, IndexEvaluator3 objective_function, int64 step, const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, double penalty_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeLubyRestart</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac4587ad555a3768febcd111ac7481b58</anchor>
      <arglist>(int scale_factor)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeConstantRestart</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa4558615a9df31d326b9e04902cc362a</anchor>
      <arglist>(int frequency)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeTimeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9b761ffa2c4aa399c1247b642a5e1d54</anchor>
      <arglist>(int64 time_in_ms)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeBranchesLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af9171596e98a897628f751924979a3ab</anchor>
      <arglist>(int64 branches)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeFailuresLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aff9d2ee8b32e16581d3b5838f1d56e21</anchor>
      <arglist>(int64 failures)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeSolutionsLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5d25b8d216afddbe19a9713a0398e2d2</anchor>
      <arglist>(int64 solutions)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae094ccae48e0e5942835f318aee30f58</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3d08b54aaf3da19b34b63904dc0e49cf</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions, bool smart_time_check)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4b1e2510dcf2e4f604ddfbaef8f60637</anchor>
      <arglist>(int64 time, int64 branches, int64 failures, int64 solutions, bool smart_time_check, bool cumulative)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2e33ac4d5e07c7ab4963803696530568</anchor>
      <arglist>(const RegularLimitParameters &amp;proto)</arglist>
    </member>
    <member kind="function">
      <type>RegularLimitParameters</type>
      <name>MakeDefaultRegularLimitParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae91967e7ceb0016a3bc1d177a17c1ef9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SearchLimit *</type>
      <name>MakeLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8da743507b97db5ad0efc1b6a3778c1c</anchor>
      <arglist>(SearchLimit *const limit_1, SearchLimit *const limit_2)</arglist>
    </member>
    <member kind="function">
      <type>SearchLimit *</type>
      <name>MakeCustomLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af8fa7be9bf993f9441d56aaaa8213eb5</anchor>
      <arglist>(std::function&lt; bool()&gt; limiter)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab46fa9dd348f4228f9b830fcf8ab0ca6</anchor>
      <arglist>(int branch_period)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8df50a46fcee0db11765a1deb8999163</anchor>
      <arglist>(int branch_period, IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a03ad41e00e671685f0facb4fd0a0962e</anchor>
      <arglist>(int branch_period, std::function&lt; std::string()&gt; display_callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af6f709df7448e8e9d313ed535dd6cd07</anchor>
      <arglist>(int branch_period, IntVar *var, std::function&lt; std::string()&gt; display_callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0b2094b7ab019831ca36641ab212f06b</anchor>
      <arglist>(int branch_period, OptimizeVar *const opt_var)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad6f9344fc20ffc674979bfa0de5eaa76</anchor>
      <arglist>(int branch_period, OptimizeVar *const opt_var, std::function&lt; std::string()&gt; display_callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchLog</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67d072fc54c4fe627607e0a7569946b4</anchor>
      <arglist>(SearchLogParameters parameters)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSearchTrace</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a608fbd51b0f1c5b6fa65be4b5fc9e4a6</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeEnterSearchCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4d7cd9490b4b727b513fa325aa118561</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeExitSearchCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9358d9ba39e033777f5d862f76f8531b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeAtSolutionCallback</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a131e1a06b2ee488ac26d6e2c84a187c1</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>ModelVisitor *</type>
      <name>MakePrintModelVisitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3755a91175b0918171b5758e15e34208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModelVisitor *</type>
      <name>MakeStatisticsModelVisitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3a509ada6c8ab1ca9924a548e9614344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModelVisitor *</type>
      <name>MakeVariableDegreeVisitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af45183dc5bc39eda3d7a7ed11e0e7f31</anchor>
      <arglist>(absl::flat_hash_map&lt; const IntVar *, int &gt; *const map)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3023ac289117048d22e69d76b5f6640e</anchor>
      <arglist>(const std::vector&lt; SymmetryBreaker * &gt; &amp;visitors)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a54a9b6e1e086b0bfb25cce07881f0efd</anchor>
      <arglist>(SymmetryBreaker *const v1)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a378307b06b35c4d90f4a6b7dfd6834c8</anchor>
      <arglist>(SymmetryBreaker *const v1, SymmetryBreaker *const v2)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6d548d220ea1071e403ad8c020a17eb1</anchor>
      <arglist>(SymmetryBreaker *const v1, SymmetryBreaker *const v2, SymmetryBreaker *const v3)</arglist>
    </member>
    <member kind="function">
      <type>SearchMonitor *</type>
      <name>MakeSymmetryManager</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa06f9d86f581df760944266d0a87e10d</anchor>
      <arglist>(SymmetryBreaker *const v1, SymmetryBreaker *const v2, SymmetryBreaker *const v3, SymmetryBreaker *const v4)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariableValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4d59a6ca10783bbd71c02450cd300167</anchor>
      <arglist>(IntVar *const var, int64 val)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeVariableLessOrEqualValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac2ec1f48c0928a10193dbd01c9a2ca7e</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeVariableGreaterOrEqualValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7439b7f22691d89b1743cd176973904e</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeSplitVariableDomain</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae92ae7da7adbe8c74cfca8bda16b3ab4</anchor>
      <arglist>(IntVar *const var, int64 val, bool start_with_lower_half)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariableValueOrFail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad7e8f831f8fe5c00526fc38f30c4ab8d</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariableValueOrDoNothing</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9816b2778045704456abd21374c9174d</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeAssignVariablesValues</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad7fbe491c3a389f2cd649301689375f5</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; int64 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeFailDecision</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adf86f33f53f99f73d5f0a459e11e2a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeDecision</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a915268f135681d8a8eeafe9feb4efc5f</anchor>
      <arglist>(Action apply, Action refute)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5deb6524933e21a8cd1c3563f5cd3c4d</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0678bd634283f24b4cc75000cbe612d5</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aec9360236e67493740460f551fe111bc</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3, DecisionBuilder *const db4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Compose</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a328f038f34eedae7990d27f8c9bb996c</anchor>
      <arglist>(const std::vector&lt; DecisionBuilder * &gt; &amp;dbs)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>add5cfd638da3fe013e6d86aef1426009</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1d8848a280917d6997a2d3de658b2857</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abf8de10f7e440c1fb6b492e4c7308481</anchor>
      <arglist>(DecisionBuilder *const db1, DecisionBuilder *const db2, DecisionBuilder *const db3, DecisionBuilder *const db4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>Try</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab4a543a73df7517f3463c3d052dd3ca0</anchor>
      <arglist>(const std::vector&lt; DecisionBuilder * &gt; &amp;dbs)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2f30468d938065d5e3ae986a09b66df4</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a467564162c4a4aa124322b9ccedc2058</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator1 var_evaluator, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afd64c73a1c4f09eb1a1d6416e701385a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, IndexEvaluator2 value_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afb949c1a7e3a780db3c5b9d785287f0b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, VariableValueComparator var_val1_val2_comparator)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaf08f4bbd7284b048f9f2784bdbbeba7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator1 var_evaluator, IndexEvaluator2 value_evaluator)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5582150203f7e8de280e0c0b28671b54</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IntVarStrategy var_str, IndexEvaluator2 value_evaluator, IndexEvaluator1 tie_breaker)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac1006f1b85832700ba13e925166a52ff</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator1 var_evaluator, IndexEvaluator2 value_evaluator, IndexEvaluator1 tie_breaker)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeDefaultPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a2b8fff361dacff8b29be507fc704d0b1</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeDefaultPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4a27cb0b44ac37da13b3cdff83b5c91a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const DefaultPhaseParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab7d8889dbd810d56da90bf78ef0e064e</anchor>
      <arglist>(IntVar *const v0, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a08a7ba25496b357edbb2fe061cbc5183</anchor>
      <arglist>(IntVar *const v0, IntVar *const v1, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1aa9157dfdbac8dc4400ae4217b3c506</anchor>
      <arglist>(IntVar *const v0, IntVar *const v1, IntVar *const v2, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4cfc3952a57d9ee97a75dcc26e1e0ee4</anchor>
      <arglist>(IntVar *const v0, IntVar *const v1, IntVar *const v2, IntVar *const v3, IntVarStrategy var_str, IntValueStrategy val_str)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeScheduleOrPostpone</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a31d7d8bb2bb4f992ef1ec9d41434091c</anchor>
      <arglist>(IntervalVar *const var, int64 est, int64 *const marker)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeScheduleOrExpedite</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a76d57c8fe9937093475ce43cdfe2412d</anchor>
      <arglist>(IntervalVar *const var, int64 est, int64 *const marker)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeRankFirstInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1ce9ae264e0bbde4bcd8c5b9fd97a7e2</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>MakeRankLastInterval</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a878714df7b35afc923456d2608205377</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7b585451d6b7ebdbc4e1acb775ab8245</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 eval, EvaluatorStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afc349a3f4dbd992954ba7000455d638d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 eval, IndexEvaluator1 tie_breaker, EvaluatorStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaef09aa8cff9b5db0a5f657b57850631</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, IntervalStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakePhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a71507e80076ddeccf4d211186aeb4017</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;sequences, SequenceStrategy str)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeDecisionBuilderFromAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea8c7f5b1272ab68b5cb2f864029a233</anchor>
      <arglist>(Assignment *const assignment, DecisionBuilder *const db, const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeConstraintAdder</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9110719b65ea5b817d9da02a742270fe</anchor>
      <arglist>(Constraint *const ct)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a983c4e29e7048bcbcd8b7e170089df83</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab091d0e817419c2ee12166f0c9f1ea61</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5842f839ef68fb09ae24f57b63f3f1fb</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1, SearchMonitor *const monitor2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abf8db57f12b7dd5e3becf8df4320dcf3</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a530f539d891e99b2cfe266da5003cf9b</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3, SearchMonitor *const monitor4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSolveOnce</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a020962ddeab9ac9aa4518518084f389d</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adbf9d5aec9bc8016844cdb07a9f56bfa</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a76f310ac98c73d170b9b15141fe92da0</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaa02661c1005ae173772adaba7ee7d11</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1, SearchMonitor *const monitor2)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3a04899527bc125ff7060994354227cb</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac322ea52fe54d4a70e3ac4d8e58e9371</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, SearchMonitor *const monitor1, SearchMonitor *const monitor2, SearchMonitor *const monitor3, SearchMonitor *const monitor4)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeNestedOptimize</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a01289d8708da19dbb62a2ef0917ef0bd</anchor>
      <arglist>(DecisionBuilder *const db, Assignment *const solution, bool maximize, int64 step, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeRestoreAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4ee11d297238c4b366eacbe02fe2ed23</anchor>
      <arglist>(Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeStoreAssignment</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f974867e7b4d7f51f9ae33bea50ba02</anchor>
      <arglist>(Assignment *assignment)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5a4f58391d4317f078f4940adaeea72e</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, LocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abd5bcef297383ebf40b32edbe29d82c0</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, LocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a538593eed20666ff33b3e5d9a2d86da7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator3 evaluator, EvaluatorLocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea0ae4d2591729881ebd1b4873301835</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, IndexEvaluator3 evaluator, EvaluatorLocalSearchOperators op)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeRandomLnsOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ca2c3302d7fda338f6c59adbb8c7979</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_variables)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeRandomLnsOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad62313497138859a3fdba4607f804b36</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int number_of_variables, int32 seed)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeMoveTowardTargetOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a566bbd1c5497546294c96367cffa47f8</anchor>
      <arglist>(const Assignment &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeMoveTowardTargetOperator</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac6632ca7448c86141f21e2e5867b04fa</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;variables, const std::vector&lt; int64 &gt; &amp;target_values)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>ConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab97f6b20657cd0f589db096d9d6da855</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>ConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a44a67355e58a5bf8298ea4f8c62e251c</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops, bool restart)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>ConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1de7a854b822925248e0b074b463a13f</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops, std::function&lt; int64(int, int)&gt; evaluator)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>RandomConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aba8c3c31b4420581c108861a64014df2</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>RandomConcatenateOperators</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a06572fa7669fd21f6e8b5155b07ab602</anchor>
      <arglist>(const std::vector&lt; LocalSearchOperator * &gt; &amp;ops, int32 seed)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeNeighborhoodLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8ebee4942752665dac914898d2c1ff49</anchor>
      <arglist>(LocalSearchOperator *const op, int64 limit)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6c4750d9d038ef7c4fac71b6f3d12f46</anchor>
      <arglist>(Assignment *const assignment, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ac6b950aa021832c45692f2be48544d73</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, DecisionBuilder *const first_solution, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab0ffe9f4df595a6ed7c40ec952eb3d4d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, DecisionBuilder *const first_solution, DecisionBuilder *const first_solution_sub_decision_builder, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeLocalSearchPhase</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea7a84a32885f37c9867daab48b0c4f3</anchor>
      <arglist>(const std::vector&lt; SequenceVar * &gt; &amp;vars, DecisionBuilder *const first_solution, LocalSearchPhaseParameters *const parameters)</arglist>
    </member>
    <member kind="function">
      <type>SolutionPool *</type>
      <name>MakeDefaultSolutionPool</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae471dd402e8c4860b84b50a17012364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f79c92d6b10f900f213b483162466e6</anchor>
      <arglist>(LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa2e2d27ac4fb6b74d727e08d31d6c94a</anchor>
      <arglist>(LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ae91e0a142911a2c740cf89243d6eb119</anchor>
      <arglist>(LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a8a7fa99e9c07bce34dbd8e5f37db6a65</anchor>
      <arglist>(SolutionPool *const pool, LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afed2405db5bb99b23dfddb4873814648</anchor>
      <arglist>(SolutionPool *const pool, LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchPhaseParameters *</type>
      <name>MakeLocalSearchPhaseParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad1b3f8d7a2345b6aa8400220d62d865c</anchor>
      <arglist>(SolutionPool *const pool, LocalSearchOperator *const ls_operator, DecisionBuilder *const sub_decision_builder, RegularLimit *const limit, const std::vector&lt; LocalSearchFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchFilter *</type>
      <name>MakeVariableDomainFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ac432327eb7d81e8521da4936f9a12b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a845c613a7ca1a56f898c0b8eedc86a24</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 values, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7c88b8b189ee310004876db8974e598f</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, IndexEvaluator2 values, ObjectiveWatcher delta_objective_callback, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a37f3b91e08faaa9c16b0940aac3f342a</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, Solver::IndexEvaluator3 values, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeSumObjectiveFilter</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>accca1f9d148525f7eb246880c1c23f43</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, Solver::IndexEvaluator3 values, ObjectiveWatcher delta_objective_callback, IntVar *const objective, Solver::LocalSearchFilterBound filter_enum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TopPeriodicCheck</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6ffc56653b5ef9643ce87d05c9ebd8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TopProgressPercent</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a121897bbc632a6e27428666949b781e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6d2ae179cd6e66dc4cfd14307126b2cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PopState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67a90d3f386c8530100f810ef54a240a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SearchDepth</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1694a1680e59545addfa46bf8512218c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SearchLeftDepth</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5804f6bd3c4bc743ed902d467aa11343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveDepth</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abbf76a02f141b5d555d37f047be49155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBranchSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0333a30480e11666e6b67162d05b2144</anchor>
      <arglist>(BranchSelector bs)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeApplyBranchSelector</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a51f15897d3435634cc78f1a18a67530f</anchor>
      <arglist>(BranchSelector bs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SaveAndSetValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6b4182ad46462a9374c84063249eef45</anchor>
      <arglist>(T *adr, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SaveAndAdd</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a63132523df4ebdb9948c120d12b8d802</anchor>
      <arglist>(T *adr, T val)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Rand64</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5166877a2d94e773fc8abf433b086d82</anchor>
      <arglist>(int64 size)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>Rand32</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5ed39d9055b446d626bad476ace74cac</anchor>
      <arglist>(int32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReSeed</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a977f97618d061bd656919818a3e5b63c</anchor>
      <arglist>(int32 seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExportProfilingOverview</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a10095177497184eb69d38915b04e2b82</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>LocalSearchProfile</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a64fd8adbc00c3bed16bf4b824dfd3e2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CurrentlyInSolve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a06878b72d0eb67da9c177f29468a721c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>constraints</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0683bc1537d5fbc81ae0a2f0c271cd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1c39e5b63288d7be78e1b70eeec4ee54</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>Decision *</type>
      <name>balancing_decision</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ade277831f6962ff6979f8a2e6558cef5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fail_intercept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a173ed9d464551149bbb92274ddb129e9</anchor>
      <arglist>(std::function&lt; void()&gt; fail_intercept)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_fail_intercept</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a57300a63dc9978b1a14a74e1698a8920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DemonProfiler *</type>
      <name>demon_profiler</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9f660afd82319498e83cb630a71dedd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUseFastLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afa66a85cec14980401bb16d4f4a84aa1</anchor>
      <arglist>(bool use_fast_local_search)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseFastLocalSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a4f085aa9a85c0d17046a1410e46de3c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acf6d57032f4a4c2ea638066179385b5e</anchor>
      <arglist>(const PropagationBaseObject *object) const</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>RegisterDemon</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aacf8c33542c5f879ab9e1e21717c6fa6</anchor>
      <arglist>(Demon *const demon)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>RegisterIntExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aaa99adf81f8caaf01fd593e95c33ae50</anchor>
      <arglist>(IntExpr *const expr)</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>RegisterIntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a66ac2efcb889501c994e3355d5a331ba</anchor>
      <arglist>(IntVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>IntervalVar *</type>
      <name>RegisterIntervalVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a70e56c3a6b9f72cd1237a48eda01d330</anchor>
      <arglist>(IntervalVar *const var)</arglist>
    </member>
    <member kind="function">
      <type>Search *</type>
      <name>ActiveSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>afd4223d7e392bacabeacbd256cfd6b47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModelCache *</type>
      <name>Cache</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab2055a138f98b721cf76d2656a3b90f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstrumentsDemons</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aeb2e6947882d148bfaece200f5c6b131</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsProfilingEnabled</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa916897f2e52eefc110e225ffd8d23e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocalSearchProfilingEnabled</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0f576f70d8fae8d5d498ec142490f8e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstrumentsVariables</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af6888b151e4711476ed1e0d64732ac44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NameAllVariables</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3267baa7f21b8bda6b5ac4bced87fbae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>model_name</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a6b43cb3f57f637e3c0633bac1d805564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PropagationMonitor *</type>
      <name>GetPropagationMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a9c8cdc1822429bc21c4523cee66b730d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPropagationMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a51c801ef84c5843e4b9a1ba489a15f0f</anchor>
      <arglist>(PropagationMonitor *const monitor)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchMonitor *</type>
      <name>GetLocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1559c74f56ae49a7c49ebe359b3631cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddLocalSearchMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>af723a41e416b056f0ab17c114498e675</anchor>
      <arglist>(LocalSearchMonitor *monitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSearchContext</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a91ddc514b7b8418b66575323f56ac418</anchor>
      <arglist>(Search *search, const std::string &amp;search_context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>SearchContext</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab5f100b79eb45ff9d1e65d6743c3724c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>SearchContext</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a71e90f91c2ab98ce233949f90abd987f</anchor>
      <arglist>(const Search *search) const</arglist>
    </member>
    <member kind="function">
      <type>Assignment *</type>
      <name>GetOrCreateLocalSearchState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3d0f049e3e28448b276346341717d945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearLocalSearchState</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abb7ca3d6a720b538c57845e8573b45a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBooleanVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aea82a4efd98d6523154ab7c8fa9125d3</anchor>
      <arglist>(IntExpr *const expr, IntVar **inner_var, bool *is_negated) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsProduct</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a763e42ec89318fb1fc36098a60eca516</anchor>
      <arglist>(IntExpr *const expr, IntExpr **inner_expr, int64 *coefficient)</arglist>
    </member>
    <member kind="function">
      <type>IntExpr *</type>
      <name>CastExpression</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a191609e0de3a43db88f862257151974e</anchor>
      <arglist>(const IntVar *const var) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FinishCurrentSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aa17bdea653a78104b916a01addc085e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RestartCurrentSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad140a06463178d92b516e34762903b2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShouldFail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ada8d3fd4401506308d77417b72c66dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckFail</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a489b5750b870a190187805c835ae9001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ce9d85b90e2416f59ee89b13579c725</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aab76d0849165f2c5b70ca910114607cd</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ade33b8a9dce522094d5ce4b53fd5299d</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae3ef7a28da87aeb3fbd258210f805c7</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18f600b8b9594c59d9da9fb1b93cfa9b</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adadd60fc9e9d63a293b606376a171578</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67ed18b7174df0eb483834276f19ce73</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a92bf29bae6bb68ecae8d09e477183689</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0e93535e454db167f3b2bac3ffc18610</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a77376dffe41cb00920902a485c137b75</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a309a2fb045ca55e103b3705b3ad3ba39</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b0d44ae2db74b96268885785bd9c328</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NextSolution</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a11ed2a5d7bb8fb1a8967fee572ab9c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a13e7e93a66ce0f15343c48c66d615e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab95c7f997dbe36deb51e7c0213bdf445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintSolverParameters</type>
      <name>DefaultSolverParameters</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad47d47ea8e05e2187fcb81ae1dea508a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>MemoryUsage</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3d8a500d9eb0df0d74daffa348a4ffef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>tmp_vector_</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aad709b2db0bb964c2cdeeb0d47414297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNumPriorities</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ad4faf53cefb2c2cdb8892b978a4b93a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>BaseIntExpr</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a7de3703a8816dad121d3fd166c07a79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Constraint</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a697ed9eaa8955d595a023663ab1e8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DemonProfiler</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a17a56adc8ee57642c3f00a1778319192</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FindOneNeighbor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a68ccd69d2cb81ad9b176a007275fde0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IntVar</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a34419e55556ff4e92b447fe895bdb9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PropagationBaseObject</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>acd6c49bd62ce1a1777a1c0e644f1186e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Queue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a47dfc6f2bc0d50a6e7c92eb00d97b064</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SearchMonitor</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aac32a6eabe1d316d7ff5f92fedd1ec5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SearchLimit</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>abb737b44b0a0335d550d2a740ba00236</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RoutingModel</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab7aef297f0c654af26dc7108c9ee6c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LocalSearchProfiler</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a622500a4c7e11bbc4b8a5e5de2c84f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SimpleRevFIFO</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a830db5e85473a2e0a7392ac6bbc538d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RevImmutableMultiMap</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a523b4c1786dd34b9d1fa2579b91b4c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>InternalSaveBooleanVarValue</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a1a981ab215cf0097502d1dd4f3a542ac</anchor>
      <arglist>(Solver *const, IntVar *const)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a3ce9d85b90e2416f59ee89b13579c725</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aab76d0849165f2c5b70ca910114607cd</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ade33b8a9dce522094d5ce4b53fd5299d</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>aae3ef7a28da87aeb3fbd258210f805c7</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a18f600b8b9594c59d9da9fb1b93cfa9b</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solve</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>adadd60fc9e9d63a293b606376a171578</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a67ed18b7174df0eb483834276f19ce73</anchor>
      <arglist>(DecisionBuilder *const db, const std::vector&lt; SearchMonitor * &gt; &amp;monitors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a92bf29bae6bb68ecae8d09e477183689</anchor>
      <arglist>(DecisionBuilder *const db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a0e93535e454db167f3b2bac3ffc18610</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a77376dffe41cb00920902a485c137b75</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a309a2fb045ca55e103b3705b3ad3ba39</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a5b0d44ae2db74b96268885785bd9c328</anchor>
      <arglist>(DecisionBuilder *const db, SearchMonitor *const m1, SearchMonitor *const m2, SearchMonitor *const m3, SearchMonitor *const m4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NextSolution</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a11ed2a5d7bb8fb1a8967fee572ab9c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RestartSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>a13e7e93a66ce0f15343c48c66d615e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EndSearch</name>
      <anchorfile>classoperations__research_1_1Solver.html</anchorfile>
      <anchor>ab95c7f997dbe36deb51e7c0213bdf445</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::CheapestInsertionFilteredDecisionBuilder::StartEndValue</name>
    <filename>structoperations__research_1_1CheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structoperations__research_1_1CheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</anchorfile>
      <anchor>a9c231f84a7d2d4e045d179a0b5960696</anchor>
      <arglist>(const StartEndValue &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>distance</name>
      <anchorfile>structoperations__research_1_1CheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</anchorfile>
      <anchor>a69b62dbfb6dd4e04a9c13c2b7ae96283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vehicle</name>
      <anchorfile>structoperations__research_1_1CheapestInsertionFilteredDecisionBuilder_1_1StartEndValue.html</anchorfile>
      <anchor>ac590c77936e140e9784deb32ac1600b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::RoutingModel::StateDependentTransit</name>
    <filename>structoperations__research_1_1RoutingModel_1_1StateDependentTransit.html</filename>
    <member kind="variable">
      <type>RangeIntToIntFunction *</type>
      <name>transit</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1StateDependentTransit.html</anchorfile>
      <anchor>aa03ad7e9ddea7fb222523be91361629b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RangeMinMaxIndexFunction *</type>
      <name>transit_plus_identity</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1StateDependentTransit.html</anchorfile>
      <anchor>a0723ef2570124a42891a5740acde6ac7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SwapIndexPairOperator</name>
    <filename>classoperations__research_1_1SwapIndexPairOperator.html</filename>
    <base>operations_research::IntVarLocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>SwapIndexPairOperator</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>a0ac93cd1cb2105295c385323478b158b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;path_vars, const RoutingIndexPairs &amp;index_pairs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SwapIndexPairOperator</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>aa5f7f593d6a8b735f7c9653a3262cab9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>aa898c7fe71ea8c1bf1d16ac656037c01</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>a57b4655f98c6bda8b055156b091001a4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1SwapIndexPairOperator.html</anchorfile>
      <anchor>a4b6e91cf387750a4d199f0ec3a225008</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>MakeOneNeighbor</name>
      <anchorfile>classoperations__research_1_1IntVarLocalSearchOperator.html</anchorfile>
      <anchor>a821c7457813d5411b11e6bbfce63f47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SweepArranger</name>
    <filename>classoperations__research_1_1SweepArranger.html</filename>
    <member kind="function">
      <type></type>
      <name>SweepArranger</name>
      <anchorfile>classoperations__research_1_1SweepArranger.html</anchorfile>
      <anchor>a91a681c3c3dc2c4fceafe4733bef5b13</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; int64, int64 &gt;&gt; &amp;points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SweepArranger</name>
      <anchorfile>classoperations__research_1_1SweepArranger.html</anchorfile>
      <anchor>ab305a51a9b45be4d95d65044e4b8dfe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ArrangeIndices</name>
      <anchorfile>classoperations__research_1_1SweepArranger.html</anchorfile>
      <anchor>a98d7d121dd15a55d88cd4b8b44d87dbf</anchor>
      <arglist>(std::vector&lt; int64 &gt; *indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSectors</name>
      <anchorfile>classoperations__research_1_1SweepArranger.html</anchorfile>
      <anchor>ae0f3dd23a352473656bea721e48d34c7</anchor>
      <arglist>(int sectors)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::SymmetryBreaker</name>
    <filename>classoperations__research_1_1SymmetryBreaker.html</filename>
    <base>operations_research::DecisionVisitor</base>
    <member kind="function">
      <type></type>
      <name>SymmetryBreaker</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>a9a170caed81ab593c4078b94c0eb6f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SymmetryBreaker</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>a6586642345a43086f971910d72f08602</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntegerVariableEqualValueClause</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>ad77fe19a9060d61fa5c218fc2b48cfe0</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntegerVariableGreaterOrEqualValueClause</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>a1adf7a226f0e955569f07afbdc96b415</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntegerVariableLessOrEqualValueClause</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>ac6f27d524c9f0efd7b467d0e6db48478</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSetVariableValue</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>ac6e7b0464cdfb0caaac7661366295e65</anchor>
      <arglist>(IntVar *const var, int64 value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitSplitVariableDomain</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a8faebc249d15a171102fd56fbe725216</anchor>
      <arglist>(IntVar *const var, int64 value, bool start_with_lower_half)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrPostpone</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af48323740d18f4059ff01271b50eb9f2</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitScheduleOrExpedite</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a7003dd5f4ff2cf139801866b35d02960</anchor>
      <arglist>(IntervalVar *const var, int64 est)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankFirstInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a00084fcd22fc7f269b23dbfd5aa1032f</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitRankLastInterval</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>a771d64a88d1eecc6fcce4a5b39349be8</anchor>
      <arglist>(SequenceVar *const sequence, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>VisitUnknownDecision</name>
      <anchorfile>classoperations__research_1_1DecisionVisitor.html</anchorfile>
      <anchor>af93d0ecd1a2cf63364ce9f8e554979cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SymmetryManager</name>
      <anchorfile>classoperations__research_1_1SymmetryBreaker.html</anchorfile>
      <anchor>aa126bb367514a24cbd6e0b2c48fda9ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto</name>
    <filename>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</filename>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>ab5fda0b43f22b9ddd9fbcb08cff18ace</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>a508a737a6f8e15b1aa1cfb77e1762e46</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema [2]</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>a073d8f2ffd5d99017da6a91bdad062cb</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata</type>
      <name>field_metadata</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>a38c98650df323b6051b068a37efa4834</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable</type>
      <name>serialization_table</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>a3f042d4fad097fef80b5ca1ba6d48ed7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::uint32</type>
      <name>offsets</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fenums__2eproto.html</anchorfile>
      <anchor>aa4012da1d708e7c88b0540d61af7248a</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto</name>
    <filename>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</filename>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>a2fb86ecfe8ad2860574802a70cd30f86</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux []</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>adf273e45163a74e47a4d3329194b4f56</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema [3]</type>
      <name>PROTOBUF_SECTION_VARIABLE</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>a2aef2dbd747f1c5b8e214c32e31ecb5a</anchor>
      <arglist>(protodesc_cold)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata</type>
      <name>field_metadata</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>a3a2c7d7e549806559170a84a201ba597</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable</type>
      <name>serialization_table</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>afc09e329ebff5cec3be01ae37c182025</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ::PROTOBUF_NAMESPACE_ID::uint32</type>
      <name>offsets</name>
      <anchorfile>structTableStruct__ortools__2fconstraint__5fsolver__2frouting__5fparameters__2eproto.html</anchorfile>
      <anchor>a117ffe01c8b8a0d7a5d72f7c7ca66b49</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::DisjunctivePropagator::Tasks</name>
    <filename>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a1b6429704f519567fa1cfa3d05c74e2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_chain_tasks</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>adfad07d1a5630489cce6a184f93c7950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_min</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a32dfedca557a573ad9b57b2115007665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>start_max</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a77b9d8ff0967560a84426fd738c7ace2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>duration_min</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>aadf688835846d21de86534523ef17db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>duration_max</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a2a5477f2c7a91cf5da2efcbade36ad65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>end_min</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a71bc3bc90b5b5e7e4d3afe4bcce235df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int64 &gt;</type>
      <name>end_max</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a0d86d53b48fe077e4a7d83806f41f611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>is_preemptible</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>af73024abcc74544668ba0670e6cf686c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const SortedDisjointIntervalList * &gt;</type>
      <name>forbidden_intervals</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a843482b23d0a253b232b4bf15c9074d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; int64, int64 &gt; &gt;</type>
      <name>distance_duration</name>
      <anchorfile>structoperations__research_1_1DisjunctivePropagator_1_1Tasks.html</anchorfile>
      <anchor>a2c505a4d04cd15978ec60f925a1ce747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::TypeIncompatibilityChecker</name>
    <filename>classoperations__research_1_1TypeIncompatibilityChecker.html</filename>
    <base>operations_research::TypeRegulationsChecker</base>
    <member kind="function">
      <type></type>
      <name>TypeIncompatibilityChecker</name>
      <anchorfile>classoperations__research_1_1TypeIncompatibilityChecker.html</anchorfile>
      <anchor>a1d543e4703f6d24201ba6e1d66e970a0</anchor>
      <arglist>(const RoutingModel &amp;model, bool check_hard_incompatibilities)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TypeIncompatibilityChecker</name>
      <anchorfile>classoperations__research_1_1TypeIncompatibilityChecker.html</anchorfile>
      <anchor>a03eb6d15aebb5ba2d71e20a5a9473d2b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckVehicle</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a0b4f0b1229831593a81796be8d1ba1ba</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>PickupDeliveryStatus</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PICKUP</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a0fa19a9622775519017039dc924ee9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>DELIVERY</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a2953d752d8155e98b97caa5d188c9168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NONE</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0ac6b4a588174e741667c1348bab18ed22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PICKUP</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a0fa19a9622775519017039dc924ee9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>DELIVERY</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a2953d752d8155e98b97caa5d188c9168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NONE</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0ac6b4a588174e741667c1348bab18ed22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetNonDeliveryCount</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a04a755f07976c11c248ac6a11f02f5b2</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetNonDeliveredCount</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>aea3c74d7683c88af7fdc5e84299e3dbc</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeCheck</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a1d251c1c25fb1667a7cdc01d55560a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>FinalizeCheck</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>acfdb9e4a1750ee5c5d5d48876b037a54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RoutingModel &amp;</type>
      <name>model_</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a62263ad13e1e19dba9a3a2078bfc5f22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::TypeRegulationsChecker</name>
    <filename>classoperations__research_1_1TypeRegulationsChecker.html</filename>
    <class kind="struct">operations_research::TypeRegulationsChecker::NodeCount</class>
    <member kind="function">
      <type></type>
      <name>TypeRegulationsChecker</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a27875e686580a562a88e680c3945b9f2</anchor>
      <arglist>(const RoutingModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TypeRegulationsChecker</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>ae53d1145526ed3c088dd9bbd062b8a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckVehicle</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a0b4f0b1229831593a81796be8d1ba1ba</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>PickupDeliveryStatus</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PICKUP</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a0fa19a9622775519017039dc924ee9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>DELIVERY</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a2953d752d8155e98b97caa5d188c9168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NONE</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0ac6b4a588174e741667c1348bab18ed22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PICKUP</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a0fa19a9622775519017039dc924ee9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>DELIVERY</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a2953d752d8155e98b97caa5d188c9168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NONE</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0ac6b4a588174e741667c1348bab18ed22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetNonDeliveryCount</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a04a755f07976c11c248ac6a11f02f5b2</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetNonDeliveredCount</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>aea3c74d7683c88af7fdc5e84299e3dbc</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>HasRegulationsToCheck</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a438df887824060c5fb3c21b743f5aa59</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeCheck</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a1d251c1c25fb1667a7cdc01d55560a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>CheckTypeRegulations</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2865ddc8f604e74c2d58bcfa4a769361</anchor>
      <arglist>(int type)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>FinalizeCheck</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>acfdb9e4a1750ee5c5d5d48876b037a54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RoutingModel &amp;</type>
      <name>model_</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a62263ad13e1e19dba9a3a2078bfc5f22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::TypeRegulationsConstraint</name>
    <filename>classoperations__research_1_1TypeRegulationsConstraint.html</filename>
    <base>operations_research::Constraint</base>
    <member kind="function">
      <type></type>
      <name>TypeRegulationsConstraint</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsConstraint.html</anchorfile>
      <anchor>aeae90eab871a67eb39147218b4771225</anchor>
      <arglist>(const RoutingModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Post</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsConstraint.html</anchorfile>
      <anchor>add0fa8d777cd68c77f87cfbd22ad5dd9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitialPropagate</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsConstraint.html</anchorfile>
      <anchor>a350eb7ba99ec672599956a2b61a2a8b1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a443bf6da3f8db15c240cb92d20e37466</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PostAndPropagate</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a92c3bfe86238b5c95448d4a0384a327f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a6e3070956af148d6fa0491de1d3cf289</anchor>
      <arglist>(ModelVisitor *const visitor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCastConstraint</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a834edc2ae995b866a6aa63e44c242570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1Constraint.html</anchorfile>
      <anchor>a5606cc31756a1708615d492ab75ba886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solver *</type>
      <name>solver</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab3aa61657c74294f198a16d1dbc52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a78b16596f589dd63573a1586f61c2dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeQueue</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a97782b79fbcf8043201fefaa7729dcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueDelayedDemon</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5dd87cd906d80738f8727fda04bc5ace</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueVar</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a3fe6115081d583d57b6cd8b0dd1783d7</anchor>
      <arglist>(Demon *const d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExecuteAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4a7285479f5e0fa7663c043cdfc7dd61</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnqueueAll</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5975e144479d99ceae4f009472ca5e92</anchor>
      <arglist>(const SimpleRevFIFO&lt; Demon * &gt; &amp;demons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5c6bf90bb0b099a2c8f81aaefdfdd46c</anchor>
      <arglist>(Solver::Action a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_action_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ad07aa613bcc8d3896dff3f33520b061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variable_to_clean_on_fail</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a4d2ccb8a806df14394b3271791c81e61</anchor>
      <arglist>(IntVar *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a8be8b75223b76744791e48747677cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>a5d4a4cf402b353ba2908836656cf0c62</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>af6e627822f954d6072125c1d152c30f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>BaseName</name>
      <anchorfile>classoperations__research_1_1PropagationBaseObject.html</anchorfile>
      <anchor>ab34671f68433c582260a443f3d15bfae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::TypeRequirementChecker</name>
    <filename>classoperations__research_1_1TypeRequirementChecker.html</filename>
    <base>operations_research::TypeRegulationsChecker</base>
    <member kind="function">
      <type></type>
      <name>TypeRequirementChecker</name>
      <anchorfile>classoperations__research_1_1TypeRequirementChecker.html</anchorfile>
      <anchor>a5c564c69c96dd36222b5623c89228d39</anchor>
      <arglist>(const RoutingModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TypeRequirementChecker</name>
      <anchorfile>classoperations__research_1_1TypeRequirementChecker.html</anchorfile>
      <anchor>af5e86084de7226b91e04c8ec4829c864</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckVehicle</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a0b4f0b1229831593a81796be8d1ba1ba</anchor>
      <arglist>(int vehicle, const std::function&lt; int64(int64)&gt; &amp;next_accessor)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>PickupDeliveryStatus</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PICKUP</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a0fa19a9622775519017039dc924ee9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>DELIVERY</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a2953d752d8155e98b97caa5d188c9168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NONE</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0ac6b4a588174e741667c1348bab18ed22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PICKUP</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a0fa19a9622775519017039dc924ee9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>DELIVERY</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0a2953d752d8155e98b97caa5d188c9168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NONE</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a2d70db5fae656cb4a04ee1c9e830d4a0ac6b4a588174e741667c1348bab18ed22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetNonDeliveryCount</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a04a755f07976c11c248ac6a11f02f5b2</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetNonDeliveredCount</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>aea3c74d7683c88af7fdc5e84299e3dbc</anchor>
      <arglist>(int type) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RoutingModel &amp;</type>
      <name>model_</name>
      <anchorfile>classoperations__research_1_1TypeRegulationsChecker.html</anchorfile>
      <anchor>a62263ad13e1e19dba9a3a2078bfc5f22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::UnsortedNullableRevBitset</name>
    <filename>classoperations__research_1_1UnsortedNullableRevBitset.html</filename>
    <member kind="function">
      <type></type>
      <name>UnsortedNullableRevBitset</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>ac50e298d0404cb5d5bd4418d5416e0b7</anchor>
      <arglist>(int bit_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnsortedNullableRevBitset</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a584260636e22ebad9b0d8f2d8e896d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a6a3cc8dfc50782fdafe3f7ae27ded2ae</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; uint64 &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RevSubtract</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a597373530d096ff338bf697633ff8997</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; uint64 &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RevAnd</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a87955b04701c3ad95557126accd8238c</anchor>
      <arglist>(Solver *const solver, const std::vector&lt; uint64 &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ActiveWordSize</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a808b280d420c8fe393e5dc58ae6007ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a914f7cd7d3e1796dd3aa05f4d1ad4a85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Intersects</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>ab15619861b99a57a19f69aa4876001be</anchor>
      <arglist>(const std::vector&lt; uint64 &gt; &amp;mask, int *support_index)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>bit_size</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a3a52bebf3dd298ee6552e3628997248f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>word_size</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>a3b5fcc5763d6f4b59a3df487fc0e8d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RevIntSet&lt; int &gt; &amp;</type>
      <name>active_words</name>
      <anchorfile>classoperations__research_1_1UnsortedNullableRevBitset.html</anchorfile>
      <anchor>abe8303e30c616b1306b05132dd97c4d7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>operations_research::VarLocalSearchOperator</name>
    <filename>classoperations__research_1_1VarLocalSearchOperator.html</filename>
    <templarg>V</templarg>
    <templarg>Val</templarg>
    <templarg>Handler</templarg>
    <base>operations_research::LocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a1e25813206d18e9df5ef7c940ff748dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>adef2d40376a89ff39c852ffd681779fd</anchor>
      <arglist>(std::vector&lt; V * &gt; vars, Handler var_handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a2d36e4b9c517a0c0874916db4099bc29</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const Val &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const Val &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; V * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Val &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Handler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VarLocalSearchOperator&lt; IntVar, int64, IntVarLocalSearchHandler &gt;</name>
    <filename>classoperations__research_1_1VarLocalSearchOperator.html</filename>
    <base>operations_research::LocalSearchOperator</base>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a1e25813206d18e9df5ef7c940ff748dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>adef2d40376a89ff39c852ffd681779fd</anchor>
      <arglist>(std::vector&lt; IntVar * &gt; vars, IntVarLocalSearchHandler var_handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VarLocalSearchOperator</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a2d36e4b9c517a0c0874916db4099bc29</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HoldsDelta</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a8b2f5a0a53ca3a5fd370d51d5cd03acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aea532902ec6591bfdd80bfcf8bc101e5</anchor>
      <arglist>(const Assignment *assignment) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIncremental</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>abeb70644a01dd602718900dc4ea74138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a24d7846b013b9940fbf367e3f9575eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>Value</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed2632ded4615cbad36036b6025ac183</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>IntVar *</type>
      <name>Var</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a4844e2d1e002a6012c65e582583b351d</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SkipUnchanged</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a77ea7391b7d1cbde18ad821e8e681413</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const int64 &amp;</type>
      <name>OldValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acc1f38d74f6325824ed77acdc1ef973b</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a58228fd9a45fda74debe601dbed29412</anchor>
      <arglist>(int64 index, const int64 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Activated</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aad4866caecbcae8b8350ae9e15e124d0</anchor>
      <arglist>(int64 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a510df14620fc20ebe03cfd7769ee6eac</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deactivate</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed4a4938ec6ea3c46a8b9df80b5656e1</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ApplyChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a50a9e8bb02dced90001def09e5fe09aa</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RevertChanges</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab0879e67af842558a1eba522d962b1a1</anchor>
      <arglist>(bool incremental)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVars</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ab7586c7a5666257d16e25e7e402e0881</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnStart</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>acea2a4d4db296445315d66aaec85ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>MakeNextNeighbor</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a2951ae57e5fd3fce7d4f9b831594b460</anchor>
      <arglist>(Assignment *delta, Assignment *deltadelta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a19dbe14d545ff629f7756b32d570c349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LocalSearchOperator *</type>
      <name>Self</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a9498f655675f66cd8fcf71041f7ef2cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasFragments</name>
      <anchorfile>classoperations__research_1_1LocalSearchOperator.html</anchorfile>
      <anchor>a7ce368143e93d9d49b6e087c53800e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DebugString</name>
      <anchorfile>classoperations__research_1_1BaseObject.html</anchorfile>
      <anchor>afb3b013c5063d71566d5273793c1d828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MarkChange</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a45cd791846ef146c03a87b3ab380c030</anchor>
      <arglist>(int64 index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IntVar * &gt;</type>
      <name>vars_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a710d1eeb2818e3730a08e62c7314862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aadd339ccd5a44eb702049d147fce0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>old_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ae4f20070ef5ff1a051b602e691ab6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int64 &gt;</type>
      <name>prev_values_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>ad53681f1b9d6707149608c7826c3a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>assignment_indices_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a65dad0789e8a043e7e38528ce81c6874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a36de50f13d1b2aa3de35ceca4214c2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitset64</type>
      <name>was_activated_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a14f6f947f99af037d1611c18c2730323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>aed78d261e91c29a927c7caf938882bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseBitset</type>
      <name>delta_changes_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a07f399ef1d34d435289229d620c3350e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cleared_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a5c6887f734d2a6ef16165b9893a9fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVarLocalSearchHandler</type>
      <name>var_handler_</name>
      <anchorfile>classoperations__research_1_1VarLocalSearchOperator.html</anchorfile>
      <anchor>a79bf2242dc1962d10e6b04cf09be2c56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::RoutingModel::VehicleClass</name>
    <filename>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>LessThan</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>aec380433df515c1a5bb166ba52828fd2</anchor>
      <arglist>(const VehicleClass &amp;a, const VehicleClass &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>CostClassIndex</type>
      <name>cost_class_index</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>a45f52b1d62144c98d8a49065b17d4a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>fixed_cost</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>a5ca90b9a98f28012ccd29d9361d91265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>start_equivalence_class</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>a3e5773e5e974e392a69349be4e5cb0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>end_equivalence_class</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>a2e484de39bcb2b510164e88112ed6ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gtl::ITIVector&lt; DimensionIndex, int64 &gt;</type>
      <name>dimension_start_cumuls_min</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>a867852a03a08d1000bac9ade86552c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gtl::ITIVector&lt; DimensionIndex, int64 &gt;</type>
      <name>dimension_start_cumuls_max</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>ab2017a1b4f4a02e523386cb883c9dabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gtl::ITIVector&lt; DimensionIndex, int64 &gt;</type>
      <name>dimension_end_cumuls_min</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>a734695f6f92ce0ca91919f49572e1521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gtl::ITIVector&lt; DimensionIndex, int64 &gt;</type>
      <name>dimension_end_cumuls_max</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>aaad1775862b1c4b859cad75a437e0fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gtl::ITIVector&lt; DimensionIndex, int64 &gt;</type>
      <name>dimension_capacities</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>a9e5e9b7c21fd09b302309ed10c65e1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gtl::ITIVector&lt; DimensionIndex, int64 &gt;</type>
      <name>dimension_evaluator_classes</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>aff3b14d0392881f341830b3495a6bd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>unvisitable_nodes_fprint</name>
      <anchorfile>structoperations__research_1_1RoutingModel_1_1VehicleClass.html</anchorfile>
      <anchor>ad1214f7853897966b1d4b9836c3f209f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>operations_research::SavingsFilteredDecisionBuilder::VehicleClassEntry</name>
    <filename>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</anchorfile>
      <anchor>aad87ac7096cc80706908f448c9d4e20e</anchor>
      <arglist>(const VehicleClassEntry &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vehicle_class</name>
      <anchorfile>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</anchorfile>
      <anchor>abd293b056dc12a2011b7a4f072033847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>fixed_cost</name>
      <anchorfile>structoperations__research_1_1SavingsFilteredDecisionBuilder_1_1VehicleClassEntry.html</anchorfile>
      <anchor>af119cbcf8e058d2415c205ab9060a607</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>internal</name>
    <filename>namespaceinternal.html</filename>
  </compound>
  <compound kind="namespace">
    <name>operations_research</name>
    <filename>namespaceoperations__research.html</filename>
    <class kind="class">operations_research::ArgumentHolder</class>
    <class kind="class">operations_research::ArrayWithOffset</class>
    <class kind="class">operations_research::Assignment</class>
    <class kind="class">operations_research::AssignmentContainer</class>
    <class kind="class">operations_research::AssignmentElement</class>
    <class kind="class">operations_research::BaseIntExpr</class>
    <class kind="class">operations_research::BaseLns</class>
    <class kind="class">operations_research::BaseObject</class>
    <class kind="class">operations_research::BasePathFilter</class>
    <class kind="class">operations_research::BooleanVar</class>
    <class kind="class">operations_research::CallMethod0</class>
    <class kind="class">operations_research::CallMethod1</class>
    <class kind="class">operations_research::CallMethod2</class>
    <class kind="class">operations_research::CallMethod3</class>
    <class kind="class">operations_research::CastConstraint</class>
    <class kind="class">operations_research::ChangeValue</class>
    <class kind="class">operations_research::CheapestAdditionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::CheapestInsertionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::ChristofidesFilteredDecisionBuilder</class>
    <class kind="class">operations_research::ComparatorCheapestAdditionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::Constraint</class>
    <class kind="class">operations_research::CPFeasibilityFilter</class>
    <class kind="class">operations_research::Decision</class>
    <class kind="class">operations_research::DecisionBuilder</class>
    <class kind="class">operations_research::DecisionVisitor</class>
    <class kind="struct">operations_research::DefaultPhaseParameters</class>
    <class kind="class">operations_research::DelayedCallMethod0</class>
    <class kind="class">operations_research::DelayedCallMethod1</class>
    <class kind="class">operations_research::DelayedCallMethod2</class>
    <class kind="class">operations_research::Demon</class>
    <class kind="class">operations_research::DimensionCumulOptimizerCore</class>
    <class kind="class">operations_research::DisjunctiveConstraint</class>
    <class kind="class">operations_research::DisjunctivePropagator</class>
    <class kind="class">operations_research::EvaluatorCheapestAdditionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::ExchangeSubtrip</class>
    <class kind="class">operations_research::FirstSolutionStrategy</class>
    <class kind="class">operations_research::GlobalCheapestInsertionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::GlobalDimensionCumulOptimizer</class>
    <class kind="class">operations_research::GlobalVehicleBreaksConstraint</class>
    <class kind="class">operations_research::IndexPairSwapActiveOperator</class>
    <class kind="class">operations_research::InitAndGetValues</class>
    <class kind="class">operations_research::IntervalVar</class>
    <class kind="class">operations_research::IntervalVarElement</class>
    <class kind="class">operations_research::IntExpr</class>
    <class kind="class">operations_research::IntVar</class>
    <class kind="class">operations_research::IntVarElement</class>
    <class kind="class">operations_research::IntVarFilteredDecisionBuilder</class>
    <class kind="class">operations_research::IntVarIterator</class>
    <class kind="class">operations_research::IntVarLocalSearchFilter</class>
    <class kind="class">operations_research::IntVarLocalSearchHandler</class>
    <class kind="class">operations_research::IntVarLocalSearchOperator</class>
    <class kind="class">operations_research::LightPairRelocateOperator</class>
    <class kind="class">operations_research::LocalCheapestInsertionFilteredDecisionBuilder</class>
    <class kind="class">operations_research::LocalDimensionCumulOptimizer</class>
    <class kind="class">operations_research::LocalSearchFilter</class>
    <class kind="class">operations_research::LocalSearchFilterManager</class>
    <class kind="class">operations_research::LocalSearchMetaheuristic</class>
    <class kind="class">operations_research::LocalSearchMonitor</class>
    <class kind="class">operations_research::LocalSearchOperator</class>
    <class kind="class">operations_research::MakePairActiveOperator</class>
    <class kind="class">operations_research::MakePairInactiveOperator</class>
    <class kind="class">operations_research::MakeRelocateNeighborsOperator</class>
    <class kind="class">operations_research::ModelCache</class>
    <class kind="class">operations_research::ModelParser</class>
    <class kind="class">operations_research::ModelVisitor</class>
    <class kind="class">operations_research::NumericalRev</class>
    <class kind="class">operations_research::NumericalRevArray</class>
    <class kind="class">operations_research::OptimizeVar</class>
    <class kind="class">operations_research::Pack</class>
    <class kind="class">operations_research::PairExchangeOperator</class>
    <class kind="class">operations_research::PairExchangeRelocateOperator</class>
    <class kind="class">operations_research::PairNodeSwapActiveOperator</class>
    <class kind="class">operations_research::PairRelocateOperator</class>
    <class kind="class">operations_research::ParallelSavingsFilteredDecisionBuilder</class>
    <class kind="class">operations_research::PathOperator</class>
    <class kind="class">operations_research::PathWithPreviousNodesOperator</class>
    <class kind="class">operations_research::PropagationBaseObject</class>
    <class kind="class">operations_research::PropagationMonitor</class>
    <class kind="class">operations_research::RegularLimit</class>
    <class kind="class">operations_research::RelocateExpensiveChain</class>
    <class kind="class">operations_research::RelocateSubtrip</class>
    <class kind="class">operations_research::Rev</class>
    <class kind="class">operations_research::RevArray</class>
    <class kind="class">operations_research::RevBitMatrix</class>
    <class kind="class">operations_research::RevBitSet</class>
    <class kind="class">operations_research::RevGrowingArray</class>
    <class kind="class">operations_research::RevImmutableMultiMap</class>
    <class kind="class">operations_research::RevIntSet</class>
    <class kind="class">operations_research::RevPartialSequence</class>
    <class kind="class">operations_research::RevSwitch</class>
    <class kind="class">operations_research::RoutingDimension</class>
    <class kind="class">operations_research::RoutingFilteredDecisionBuilder</class>
    <class kind="class">operations_research::RoutingIndexManager</class>
    <class kind="class">operations_research::RoutingModel</class>
    <class kind="class">operations_research::RoutingModelParameters</class>
    <class kind="class">operations_research::RoutingModelVisitor</class>
    <class kind="class">operations_research::RoutingSearchParameters</class>
    <class kind="class">operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators</class>
    <class kind="class">operations_research::SavingsFilteredDecisionBuilder</class>
    <class kind="class">operations_research::SearchLimit</class>
    <class kind="class">operations_research::SearchLog</class>
    <class kind="class">operations_research::SearchMonitor</class>
    <class kind="class">operations_research::SequenceVar</class>
    <class kind="class">operations_research::SequenceVarElement</class>
    <class kind="class">operations_research::SequenceVarLocalSearchHandler</class>
    <class kind="class">operations_research::SequenceVarLocalSearchOperator</class>
    <class kind="class">operations_research::SequentialSavingsFilteredDecisionBuilder</class>
    <class kind="class">operations_research::SimpleBoundCosts</class>
    <class kind="class">operations_research::SimpleRevFIFO</class>
    <class kind="class">operations_research::SmallRevBitSet</class>
    <class kind="class">operations_research::SolutionCollector</class>
    <class kind="class">operations_research::SolutionPool</class>
    <class kind="class">operations_research::Solver</class>
    <class kind="class">operations_research::SwapIndexPairOperator</class>
    <class kind="class">operations_research::SweepArranger</class>
    <class kind="class">operations_research::SymmetryBreaker</class>
    <class kind="class">operations_research::TypeIncompatibilityChecker</class>
    <class kind="class">operations_research::TypeRegulationsChecker</class>
    <class kind="class">operations_research::TypeRegulationsConstraint</class>
    <class kind="class">operations_research::TypeRequirementChecker</class>
    <class kind="class">operations_research::UnsortedNullableRevBitset</class>
    <class kind="class">operations_research::VarLocalSearchOperator</class>
    <member kind="typedef">
      <type>VarLocalSearchOperator&lt; SequenceVar, std::vector&lt; int &gt;, SequenceVarLocalSearchHandler &gt;</type>
      <name>SequenceVarLocalSearchOperatorTemplate</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ad91551404d4eeb115402e25f8ac599b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64)&gt;</type>
      <name>RoutingTransitCallback1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a40e66c7b62d7c023af6f08912fdc3f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; int64(int64, int64)&gt;</type>
      <name>RoutingTransitCallback2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae7851f8d6518e3180b9d9f0ec69826e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::vector&lt; int64 &gt;, std::vector&lt; int64 &gt; &gt;</type>
      <name>RoutingIndexPair</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a30af988d402f0f3d36640575ca87153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RoutingIndexPair &gt;</type>
      <name>RoutingIndexPairs</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a114ea14886b902c9cf9b988c4ef12672</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarTypes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSPECIFIED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbab4f91414920a046da6b20cd63a2796e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOMAIN_INT_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba035478726d2dcd2fb9ac77afb5c759cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOLEAN_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba79122eee2a14a98d575b0b9ac73b0e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONST_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbad9de5a1ac157ce63c698777275b17787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_ADD_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba0cc8439ff5d71bb0c4c981cd04b73d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAR_TIMES_CST</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dbaa77c2e49834d223253421d9e3d69c51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CST_SUB_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93697c551d06ce8d37be776116f23f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPP_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba9558ccbf57e24d3ddde9bfbf2835e4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRACE_VAR</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a744e7cc90d56b2c503520ee1f97fc1dba93b00759c703fe20d9d8a5a75268a69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FirstSolutionStrategy_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dad02e019c28342793688466400afd032d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da6c8e1e7a2859125316fe07082a2da868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da4c1d8ec510011789f52267efc7d34bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dae133e7145564aa475a81741a6240e901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_EVALUATOR_STRATEGY</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da6d0f4bf298a2b6e6462feb7035d2c5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SAVINGS</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da2acc1235ef1e7bec84c9a60b010400b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SWEEP</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da83fd39655867e51be481faa09fbea164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_CHRISTOFIDES</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da8a09bb6c57bf531f6674ea171b011791</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_ALL_UNPERFORMED</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da0c4ad672038428a0f3b3b7f6c92d8840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_BEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dad0735ef20259782cea2046f90c39bda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dabba644bd336acdb33aef7257f5bfa536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da8580f408e6e4af5373e4dd081d59d767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da348e92318608b985248e17102d016cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da9a63d38a1eed11971089af926145f83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da451e468bc86902552aa9b987f66f5875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da9c097f678b4aaaa6b10df89dc4d4802e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06da8cdfd32facff4a66e180fab80f3fb711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aef3a296fa4f9d9d745fe62f1aa67a06dae584dc12821c9b7171986c986b6c7462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalSearchMetaheuristic_Value</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_UNSET</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aedab1177884bf5c3fda2cac819cca8279ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_AUTOMATIC</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda883a6e25cd8984a9e4e06636823f7201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GREEDY_DESCENT</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda844fc936bb493f6a5d592b28302ea2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda2909a10cd525473780b35aaa3c4f4eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda0d373c31dbec1678db8b9e50ae63327f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda63e13a565cf5daf981c1b565912b3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda300fe37f649b909a810935825778b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MIN_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda0783003ef2622becdab73be7bfb66e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MAX_SENTINEL_DO_NOT_USE_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a792fc7c1636eff4a9476ea5a24459aeda719d13ec837e44b8b25b0f3315346594</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a316abccdfa41512564d84365ea8f0ead</anchor>
      <arglist>(std::ostream &amp;out, const Solver *const s)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>Zero</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a009f247167f32509baf749083e4bc984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>One</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa96bb5a28dd9c1ccc864b1587e8e1a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a991f7a823d83b455d6b1a45141cb9ce9</anchor>
      <arglist>(std::ostream &amp;out, const BaseObject *o)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4f44b10aa7fc7b6e85b72e7f0c96cc1f</anchor>
      <arglist>(std::ostream &amp;out, const Assignment &amp;assignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAssignmentFromAssignment</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aea2bf322fab4e2319a23ad22acf8ccf8</anchor>
      <arglist>(Assignment *target_assignment, const std::vector&lt; IntVar * &gt; &amp;target_vars, const Assignment *source_assignment, const std::vector&lt; IntVar * &gt; &amp;source_vars)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a64cf3e1336ec61275bdd2ae853d38406</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab89995e46facfc1db291ce75658dd0a5</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acfc54730764156f1fb717e99b71ba5d4</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a65a9c1ccf298ae110decc3b9d285dc16</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ca754fad158b92d7f678b5d354d8927</anchor>
      <arglist>(void *const ptr)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aec42cb0a7c3079eb8f0406914077d633</anchor>
      <arglist>(const std::vector&lt; T * &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>Hash1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac2ba31780fce352d4bba600e6e8eacad</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;ptrs)</arglist>
    </member>
    <member kind="function">
      <type>LocalSearchOperator *</type>
      <name>MakeLocalSearchOperator</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a85ea0ef5b46465c3793333ce9821f15f</anchor>
      <arglist>(Solver *solver, const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; IntVar * &gt; &amp;secondary_vars, std::function&lt; int(int64)&gt; start_empty_path_class)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayConstant</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a12527c82ffc8b31c5d8dc836c366d624</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayBoolean</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3f4525e71a6b05d97c868f0832750a60</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllOnes</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3e4f71c4c79e0b4ec00c4e715a7c298</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab0ae787392a8dd8a499eb55ac0916aa4</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllGreaterOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3aea406979285a28c91fd1ee8115af74</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllLessOrEqual</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a15f08cfbb35e2b8b1eb76f79caea924a</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab62b402f767cda48eb67ef8b50397f8f</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a38972723946490ea4df4e34298d8805d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyPositive</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3de09f9134b976e5ba64751ac0f4440b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllStrictlyNegative</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8351829c324863ddda52e201df4f9f84</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasingContiguous</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aafac7375c23337f25821aa6f86ca627c</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncreasing</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d434774c07815a25ffaa7adb343c19e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsArrayInRange</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adf2aea6c68fe502389c9264b971b2f85</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, T range_min, T range_max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBound</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae4c7a8bfc6877606e512d3279549f44d</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBooleans</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7abde7313cef64d25202a18f07481fc3</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundOrNull</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a54470bffc3ea32cc37d0222e5dbb62a6</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, const std::vector&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AreAllBoundTo</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7028ce8b481be8cb6fca7a6925d41aa7</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, int64 value)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MaxVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abc42d1bcfe023d3ac6f59471b75d853c</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>MinVarArray</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5c1932027ef8bc1689d725a1c597867b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillValues</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a6662a100d8715747870beb9721bb304b</anchor>
      <arglist>(const std::vector&lt; IntVar * &gt; &amp;vars, std::vector&lt; int64 &gt; *const values)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivUp</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a60dabfa452b4264887ef76c75edf3765</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>PosIntDivDown</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a942ba2898a44303790c91e761b8f4630</anchor>
      <arglist>(int64 e, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int64 &gt;</type>
      <name>ToInt64Vector</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aad4e1b406f0e56c83283747b038df88a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendTasksFromPath</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a9c690acb94faaa03d89930ec84a76bba</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;path, const std::vector&lt; int64 &gt; &amp;min_travels, const std::vector&lt; int64 &gt; &amp;max_travels, const std::vector&lt; int64 &gt; &amp;pre_travels, const std::vector&lt; int64 &gt; &amp;post_travels, const RoutingDimension &amp;dimension, DisjunctivePropagator::Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendTasksFromIntervals</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aec575fd72a48b07ceca957691d785d57</anchor>
      <arglist>(const std::vector&lt; IntervalVar * &gt; &amp;intervals, DisjunctivePropagator::Tasks *tasks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillPathEvaluation</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4f6a1b9fc737ba25fee7bf42d6635182</anchor>
      <arglist>(const std::vector&lt; int64 &gt; &amp;path, const RoutingModel::TransitCallback2 &amp;evaluator, std::vector&lt; int64 &gt; *values)</arglist>
    </member>
    <member kind="function">
      <type>DecisionBuilder *</type>
      <name>MakeSetValuesFromTargets</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4e907b3668a07c9fa3f62d938f6cb855</anchor>
      <arglist>(Solver *solver, std::vector&lt; IntVar * &gt; variables, std::vector&lt; int64 &gt; targets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveModelWithSat</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab70fc1eb89b0210ef0e6d24256f7776a</anchor>
      <arglist>(const RoutingModel &amp;model, const Assignment *initial_solution, Assignment *solution)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeNodeDisjunctionFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae096121f1559753c357ed8ee184353f8</anchor>
      <arglist>(const RoutingModel &amp;routing_model, std::function&lt; void(int64)&gt; objective_callback)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeVehicleAmortizedCostFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5f6417c3f4078b9fdaafdb8e19116b55</anchor>
      <arglist>(const RoutingModel &amp;routing_model, Solver::ObjectiveWatcher objective_callback)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeTypeRegulationsFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3de43a015d4ee3ce53eb030e1d7232de</anchor>
      <arglist>(const RoutingModel &amp;routing_model)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; IntVarLocalSearchFilter * &gt;</type>
      <name>MakeCumulFilters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab7e213b9838f546243a7040d58506cd9</anchor>
      <arglist>(const RoutingDimension &amp;dimension, Solver::ObjectiveWatcher objective_callback, bool filter_objective_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakePathCumulFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab64b4ace42f0744e0814257a9a6ffa16</anchor>
      <arglist>(const RoutingDimension &amp;dimension, Solver::ObjectiveWatcher objective_callback, bool propagate_own_objective_value, bool filter_objective_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeGlobalLPCumulFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afbaa470f2ff428bc316d5eac61567955</anchor>
      <arglist>(const RoutingDimension &amp;dimension, Solver::ObjectiveWatcher objective_callback, bool filter_objective_cost)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakePickupDeliveryFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3ffb53eac6214b414e926238012a2a0</anchor>
      <arglist>(const RoutingModel &amp;routing_model, const RoutingModel::IndexPairs &amp;pairs, const std::vector&lt; RoutingModel::PickupAndDeliveryPolicy &gt; &amp;vehicle_policies)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeVehicleVarFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a67f4b4b64a6c11717020eaa963b98c51</anchor>
      <arglist>(const RoutingModel &amp;routing_model)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeVehicleBreaksFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae9a33af72abb5c2332a1f7ca71ab8215</anchor>
      <arglist>(const RoutingModel &amp;routing_model, const RoutingDimension &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>IntVarLocalSearchFilter *</type>
      <name>MakeCPFeasibilityFilter</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aaa5f7d59af23f5e10fc43a3989fa0b68</anchor>
      <arglist>(const RoutingModel *routing_model)</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>BuildModelParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae39a6c4d8ba890ec5150ea91a7aad643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>BuildSearchParametersFromFlags</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a95da1d3a46432afd40024f79279a48b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingModelParameters</type>
      <name>DefaultRoutingModelParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa388c8707db255ae7742c04046bdd613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingSearchParameters</type>
      <name>DefaultRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>adcac4a11f1e4d36ceb47f7251461487d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>FindErrorInRoutingSearchParameters</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae2e060e8ee4ea901dc4df260b3385eac</anchor>
      <arglist>(const RoutingSearchParameters &amp;search_parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a8fee47a5359613bc7f8df356595c7ff0</anchor>
      <arglist>(RoutingNodeIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>afa9196adb7aa76d8e60cd4c0c6687c0d</anchor>
      <arglist>(RoutingCostClassIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3d98b6fb94b9cdabfaca3d9f3c9632e9</anchor>
      <arglist>(RoutingDimensionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a1edd1d7c020633019991b13d14b4b15b</anchor>
      <arglist>(RoutingDisjunctionIndex, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_INT_TYPE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aff19b78b3d56ff95c23727ca4ff64ea7</anchor>
      <arglist>(RoutingVehicleClassIndex, int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ac8fb428ce4826abddd79ff391cfc1c51</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *</type>
      <name>FirstSolutionStrategy_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a99ad9f9140f36fbb7d0fa70aba00b46b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>FirstSolutionStrategy_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa3347cbb67e6b42bf2d99c6e36a43285</anchor>
      <arglist>(T enum_t_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FirstSolutionStrategy_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a53e650ef5267d5f3db388f6a6b9482a8</anchor>
      <arglist>(const std::string &amp;name, FirstSolutionStrategy_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_IsValid</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aed46fa1bbfbc75c04bd66f5055ddb3c1</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *</type>
      <name>LocalSearchMetaheuristic_Value_descriptor</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a00f3e64ec0029f07e62e1c1abfd6071f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>LocalSearchMetaheuristic_Value_Name</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3412913b0ac8a9e00d3a64bcce238da0</anchor>
      <arglist>(T enum_t_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LocalSearchMetaheuristic_Value_Parse</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>acd6f3950d95b591a67cdc61be1f8cb40</anchor>
      <arglist>(const std::string &amp;name, LocalSearchMetaheuristic_Value *value)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="variable">
      <type>FirstSolutionStrategyDefaultTypeInternal</type>
      <name>_FirstSolutionStrategy_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a88484804c6e66958d00fb3f1b0821b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LocalSearchMetaheuristicDefaultTypeInternal</type>
      <name>_LocalSearchMetaheuristic_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a5e179c1aa71c3f208d4dfbd8a27bfdc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a2c7b8136ecfa0fe9cf4cd72a7f503e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr FirstSolutionStrategy_Value</type>
      <name>FirstSolutionStrategy_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a02c2709292cb324dd96c1f7c3cd6bb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>FirstSolutionStrategy_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aa952bfe0a71c0897a2490f8e29feea1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MIN</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>aeef02d29a4fbff402021b9ed0509b3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr LocalSearchMetaheuristic_Value</type>
      <name>LocalSearchMetaheuristic_Value_Value_MAX</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a7c6b8ceb9a6dad94886b3a8fa8d3a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>LocalSearchMetaheuristic_Value_Value_ARRAYSIZE</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ab75b4553844ec6a32a0d881f7f64d879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingModelParametersDefaultTypeInternal</type>
      <name>_RoutingModelParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>ae3a853384e4e580582b670a57018029d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParametersDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a601e1a7c230fbf44503db528b20e30ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal</type>
      <name>_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a595bafdd2ca0348c23f2c03da8ef2468</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3ea6af6581e6922832918c97753146a7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a0953b50b08320d1109c678555137f1db</anchor>
      <arglist>(P param)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ParameterDebugString</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a3c2f93547af434566184b7dee7039c93</anchor>
      <arglist>(P *param)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4fb750da00c784e5ffd1763fd3ce88f7</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a4da629cafe75f958924e1684ac2b0eff</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeConstraintDemon3</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>abdca98f14c02e004ab5e19d2c3985667</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q, R), const std::string &amp;name, P param1, Q param2, R param3)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon0</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a82110ba1f45aa29ffc933102880dbd82</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(), const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon1</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a11f4a7dbafd8e00a36b892a82e44445f</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P), const std::string &amp;name, P param1)</arglist>
    </member>
    <member kind="function">
      <type>Demon *</type>
      <name>MakeDelayedConstraintDemon2</name>
      <anchorfile>namespaceoperations__research.html</anchorfile>
      <anchor>a29b8113bf656aa61493c9459508ed953</anchor>
      <arglist>(Solver *const s, T *const ct, void(T::*method)(P, Q), const std::string &amp;name, P param1, Q param2)</arglist>
    </member>
  </compound>
</tagfile>
